Updated list of todo items for EBB/3BB refactor

* From EBB issue #139 - make all return values consistent: repeat the command, then optional data, then a carriage return. 
* From EBB issue #139 - make all commands two letters long
* From EBB issue #139 - make all errors follow the above format (two character error code, followed by a fixed length text string describing the error, all semi-human readable)

* Remove <servo_rate_up> and <servo_rate_down> as global SC command parameters
* Added global <gPenMoveDuration> as global SC command parameter (for SP command)
* Remove g_servo2_RPn (hard code to RP4)

* On SC,4 and SC,5 check that Min is always a larger number than Max

* Add IMMEDIATE/FIFO parameter to PO commands

* Make sure you can set the FIFO depth to zero, which requires immediate execution of all commands (even motion control ones)

* Make sure that if you change the FIFO size, and there are items in the FIFO, they do not get deleted. All commands must finish properly.
  - If you have the fifo size set to 10, and you have 10 items in it, then set it to 0, those 10 commands can't get lost.

* Force drivers to be DISABLED until a succecssful register read and subsiquent init, then ENABLE them (to prevent high current draw until we detect that the drivers are powered via the 250ms poll)


* Refactor I/O initialization
  - Make table of all I/O ports for each board, make I/O init smaller
  - 

* Should we break out all "pen" functionality (SP, TP) into it's own file? Now that it's all stepper based, doesn't seem to fit in servo.c anymore

* How to handle limping of pen stepper? At same time as others, or different command? Need to re-init to MAX position after turning power back on

* Remove SC commands which allow for external stepper drivers 
  - Remove from SC command 
  - Remove from ISR

* On EBB, RC Servo RB1 will ALWAYS be a pen output. No option to disable it.

* Update all variable names to use common coding standard
* Add section headers to all .c and .h files (defines, includes, variables, prototypes, etc.)

* (3BB) Remove commands that don't make sense anymore, like RC Servo power control

* Remove analog conversions from low ISR, instead, make them simple and blocking

* Pull out pulse commands to own files

* Factor out command parsing into its own file
  - Make table based to shorten code?

* Factor out ISRs into their own file

* Create UART I/O low level code in own file

* Factor out USB serial I/O into own file

* Factor out motion control commands into own file

* Factor out 'instant' commands into own file

* Factor out FIFO code into own file

* Put all RC Servo stuff into RCServo2.c, then rename to servo.c

* Can the "old" servo stuff be completely removed and just use new RCServo2 code? (yes)

* OK to remove all UBW "T" command and ISR/FIFO? (YES)
* Remove QN, SN, NI, ND commands as well
* Remove BO, BS, SS, RS, SI, RI, CI, RC, BC, TX, RX, CX

* Break out command processing into own file (parse.c/h)

* Convert all variable types to "Microchip" standard (UINT8, etc.)


Code Size : RAM/Free, ROM/Free
  EBB_BL
    5/24  : 3461/315, 42794/22734


  3BB_BL 
    5/24  : 3461/315, 42794/22734