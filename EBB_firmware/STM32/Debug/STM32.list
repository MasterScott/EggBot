
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009940  08009940  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  08009940  08009940  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009940  08009940  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009940  08009940  00019940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08009948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  20000354  08009c9c  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e78  08009c9c  00021e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a1f  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000364e  00000000  00000000  00038da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  0003c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  0003d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000284f4  00000000  00000000  0003ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000105f0  00000000  00000000  000662ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7420  00000000  00000000  000768dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015dcfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c90  00000000  00000000  0015dd78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009490 	.word	0x08009490

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	08009490 	.word	0x08009490

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <parseVRCommand>:

#endif

// All we do here is just print out our version number
void parseVRCommand(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  printf (st_version);
 80002c4:	4802      	ldr	r0, [pc, #8]	; (80002d0 <parseVRCommand+0x10>)
 80002c6:	f008 f98d 	bl	80085e4 <iprintf>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	0800976c 	.word	0x0800976c

080002d4 <parsePacket>:
 * of the packet is at g_RX_buf_out, and the end (CR) is at
 * g_RX_buf_in. To make parsing simpler, ALL commands are exactly two characters
 * long.
 */
void parsePacket(void)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
  uint16_t command;
  uint16_t testCommand;
  uint8_t i;

  // Always grab the first character (which is the first byte of the command)
  command = toupper(g_RX_buf[g_RX_buf_out]);
 80002da:	4b50      	ldr	r3, [pc, #320]	; (800041c <parsePacket+0x148>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b4f      	ldr	r3, [pc, #316]	; (8000420 <parsePacket+0x14c>)
 80002e2:	5c9b      	ldrb	r3, [r3, r2]
 80002e4:	71bb      	strb	r3, [r7, #6]
 80002e6:	f008 f955 	bl	8008594 <__locale_ctype_ptr>
 80002ea:	4602      	mov	r2, r0
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	3301      	adds	r3, #1
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	f003 0303 	and.w	r3, r3, #3
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	d102      	bne.n	8000302 <parsePacket+0x2e>
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	3b20      	subs	r3, #32
 8000300:	e000      	b.n	8000304 <parsePacket+0x30>
 8000302:	79bb      	ldrb	r3, [r7, #6]
 8000304:	80bb      	strh	r3, [r7, #4]
  advance_RX_buf_out();
 8000306:	4b45      	ldr	r3, [pc, #276]	; (800041c <parsePacket+0x148>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b43      	ldr	r3, [pc, #268]	; (800041c <parsePacket+0x148>)
 8000310:	701a      	strb	r2, [r3, #0]
 8000312:	4b42      	ldr	r3, [pc, #264]	; (800041c <parsePacket+0x148>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2bff      	cmp	r3, #255	; 0xff
 8000318:	d102      	bne.n	8000320 <parsePacket+0x4c>
 800031a:	4b40      	ldr	r3, [pc, #256]	; (800041c <parsePacket+0x148>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
  command = (command << 8) | toupper (g_RX_buf[g_RX_buf_out]);
 8000320:	88bb      	ldrh	r3, [r7, #4]
 8000322:	021b      	lsls	r3, r3, #8
 8000324:	b21c      	sxth	r4, r3
 8000326:	4b3d      	ldr	r3, [pc, #244]	; (800041c <parsePacket+0x148>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b3c      	ldr	r3, [pc, #240]	; (8000420 <parsePacket+0x14c>)
 800032e:	5c9b      	ldrb	r3, [r3, r2]
 8000330:	70fb      	strb	r3, [r7, #3]
 8000332:	f008 f92f 	bl	8008594 <__locale_ctype_ptr>
 8000336:	4602      	mov	r2, r0
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	3301      	adds	r3, #1
 800033c:	4413      	add	r3, r2
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	f003 0303 	and.w	r3, r3, #3
 8000344:	2b02      	cmp	r3, #2
 8000346:	d102      	bne.n	800034e <parsePacket+0x7a>
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	3b20      	subs	r3, #32
 800034c:	e000      	b.n	8000350 <parsePacket+0x7c>
 800034e:	78fb      	ldrb	r3, [r7, #3]
 8000350:	b21b      	sxth	r3, r3
 8000352:	4323      	orrs	r3, r4
 8000354:	b21b      	sxth	r3, r3
 8000356:	80bb      	strh	r3, [r7, #4]
  advance_RX_buf_out();
 8000358:	4b30      	ldr	r3, [pc, #192]	; (800041c <parsePacket+0x148>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <parsePacket+0x148>)
 8000362:	701a      	strb	r2, [r3, #0]
 8000364:	4b2d      	ldr	r3, [pc, #180]	; (800041c <parsePacket+0x148>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2bff      	cmp	r3, #255	; 0xff
 800036a:	d102      	bne.n	8000372 <parsePacket+0x9e>
 800036c:	4b2b      	ldr	r3, [pc, #172]	; (800041c <parsePacket+0x148>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]

  // Now 'command' is equal to two bytes of our command
  i = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	71fb      	strb	r3, [r7, #7]
  while (commandTable[i].c1 != 0x00)
 8000376:	e01c      	b.n	80003b2 <parsePacket+0xde>
  {
    testCommand = ((uint16_t)commandTable[i].c1 << 8) | commandTable[i].c2;
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4a2a      	ldr	r2, [pc, #168]	; (8000424 <parsePacket+0x150>)
 800037c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000380:	021b      	lsls	r3, r3, #8
 8000382:	b21a      	sxth	r2, r3
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	4927      	ldr	r1, [pc, #156]	; (8000424 <parsePacket+0x150>)
 8000388:	00db      	lsls	r3, r3, #3
 800038a:	440b      	add	r3, r1
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	b21b      	sxth	r3, r3
 8000390:	4313      	orrs	r3, r2
 8000392:	b21b      	sxth	r3, r3
 8000394:	803b      	strh	r3, [r7, #0]
    if (command == testCommand)
 8000396:	88ba      	ldrh	r2, [r7, #4]
 8000398:	883b      	ldrh	r3, [r7, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d106      	bne.n	80003ac <parsePacket+0xd8>
    {
      commandTable[i].func();
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a20      	ldr	r2, [pc, #128]	; (8000424 <parsePacket+0x150>)
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4798      	blx	r3
      break;
 80003aa:	e008      	b.n	80003be <parsePacket+0xea>
    }
    i++;
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	3301      	adds	r3, #1
 80003b0:	71fb      	strb	r3, [r7, #7]
  while (commandTable[i].c1 != 0x00)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <parsePacket+0x150>)
 80003b6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1dc      	bne.n	8000378 <parsePacket+0xa4>
  }
  if (commandTable[i].c1 == 0x00)
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a18      	ldr	r2, [pc, #96]	; (8000424 <parsePacket+0x150>)
 80003c2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d10b      	bne.n	80003e2 <parsePacket+0x10e>
  {
    // Send back 'unknown command' error
    printf (
       "!8 Err: Unknown command '%c%c:%4X'\r\n"
      ,(uint8_t)(command >> 8)
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	0a1b      	lsrs	r3, r3, #8
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	b2db      	uxtb	r3, r3
    printf (
 80003d2:	4619      	mov	r1, r3
      ,(uint8_t)command
 80003d4:	88bb      	ldrh	r3, [r7, #4]
 80003d6:	b2db      	uxtb	r3, r3
    printf (
 80003d8:	461a      	mov	r2, r3
 80003da:	88bb      	ldrh	r3, [r7, #4]
 80003dc:	4812      	ldr	r0, [pc, #72]	; (8000428 <parsePacket+0x154>)
 80003de:	f008 f901 	bl	80085e4 <iprintf>
  // Double check that our output pointer is now at the ending <CR>
  // If it is not, this indicates that there were extra characters that
  // the command parsing routine didn't eat. This would be an error and needs
  // to be reported. (Ignore for Reset command because FIFO pointers get cleared.)
  if (
    (g_RX_buf[g_RX_buf_out] != kCR && 0 == error_byte)
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <parsePacket+0x148>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <parsePacket+0x14c>)
 80003ea:	5c9b      	ldrb	r3, [r3, r2]
  if (
 80003ec:	2b0d      	cmp	r3, #13
 80003ee:	d00d      	beq.n	800040c <parsePacket+0x138>
    (g_RX_buf[g_RX_buf_out] != kCR && 0 == error_byte)
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <parsePacket+0x158>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d109      	bne.n	800040c <parsePacket+0x138>
    &&
 80003f8:	88bb      	ldrh	r3, [r7, #4]
 80003fa:	2b52      	cmp	r3, #82	; 0x52
 80003fc:	d006      	beq.n	800040c <parsePacket+0x138>
    ('R' != command)
  )
  {
    bitset (error_byte, kERROR_BYTE_EXTRA_CHARACTERS);
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <parsePacket+0x158>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <parsePacket+0x158>)
 800040a:	701a      	strb	r2, [r3, #0]
  }

  // Clean up by skipping over any bytes we haven't eaten
  // This is safe since we parse each packet as we get a <CR>
  // (i.e. g_RX_buf_in doesn't move while we are in this routine)
  g_RX_buf_out = g_RX_buf_in;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <parsePacket+0x15c>)
 800040e:	781a      	ldrb	r2, [r3, #0]
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <parsePacket+0x148>)
 8000412:	701a      	strb	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	2000197c 	.word	0x2000197c
 8000420:	2000087c 	.word	0x2000087c
 8000424:	0800975c 	.word	0x0800975c
 8000428:	080094a8 	.word	0x080094a8
 800042c:	200005a4 	.word	0x200005a4
 8000430:	2000197d 	.word	0x2000197d

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000438:	f000 fa1b 	bl	8000872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043c:	f000 f807 	bl	800044e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000440:	f000 f870 	bl	8000524 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000444:	f007 fa50 	bl	80078e8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit();
 8000448:	f000 f8ae 	bl	80005a8 <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0x18>

0800044e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b0a8      	sub	sp, #160	; 0xa0
 8000452:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000454:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000458:	2238      	movs	r2, #56	; 0x38
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f008 f8b9 	bl	80085d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000462:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000472:	463b      	mov	r3, r7
 8000474:	2254      	movs	r2, #84	; 0x54
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f008 f8ab 	bl	80085d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800047e:	2000      	movs	r0, #0
 8000480:	f002 f9a4 	bl	80027cc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000484:	2322      	movs	r3, #34	; 0x22
 8000486:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800048c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048e:	2340      	movs	r3, #64	; 0x40
 8000490:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000492:	2301      	movs	r3, #1
 8000494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800049e:	2302      	movs	r3, #2
 80004a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80004aa:	232a      	movs	r3, #42	; 0x2a
 80004ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004b6:	2302      	movs	r3, #2
 80004b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004bc:	2302      	movs	r3, #2
 80004be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fa44 	bl	8002954 <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004d2:	f000 f857 	bl	8000584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	230f      	movs	r3, #15
 80004d8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004da:	2303      	movs	r3, #3
 80004dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004ee:	2104      	movs	r1, #4
 80004f0:	4618      	mov	r0, r3
 80004f2:	f002 fe41 	bl	8003178 <HAL_RCC_ClockConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004fc:	f000 f842 	bl	8000584 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000504:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000506:	2300      	movs	r3, #0
 8000508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050a:	463b      	mov	r3, r7
 800050c:	4618      	mov	r0, r3
 800050e:	f003 f8db 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000518:	f000 f834 	bl	8000584 <Error_Handler>
  }
}
 800051c:	bf00      	nop
 800051e:	37a0      	adds	r7, #160	; 0xa0
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_GPIO_Init+0x5c>)
 800053a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <MX_GPIO_Init+0x5c>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_GPIO_Init+0x5c>)
 8000546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f000 fd92 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800055c:	2320      	movs	r3, #32
 800055e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fb2c 	bl	8000bd0 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <RetargetInit>:
#define STDIN_FILENO  0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

void RetargetInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
//  setvbuf(stdout, NULL, _IONBF, 0);
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_isatty>:

int _isatty(int fd)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db04      	blt.n	80005ce <_isatty+0x18>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	dc01      	bgt.n	80005ce <_isatty+0x18>
  {
    return 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e005      	b.n	80005da <_isatty+0x24>
  }

  errno = EBADF;
 80005ce:	f007 ffb7 	bl	8008540 <__errno>
 80005d2:	4602      	mov	r2, r0
 80005d4:	2309      	movs	r3, #9
 80005d6:	6013      	str	r3, [r2, #0]
  return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_write>:

int _write(int fd, char* ptr, int len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
  uint8_t status;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d002      	beq.n	80005fa <_write+0x18>
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d10e      	bne.n	8000618 <_write+0x36>
  {
    status = CDC_Transmit_FS((uint8_t *) ptr, len);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	68b8      	ldr	r0, [r7, #8]
 8000602:	f007 fb5f 	bl	8007cc4 <CDC_Transmit_FS>
 8000606:	4603      	mov	r3, r0
 8000608:	75fb      	strb	r3, [r7, #23]
///    status = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
    if (status == USBD_OK)
 800060a:	7dfb      	ldrb	r3, [r7, #23]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d101      	bne.n	8000614 <_write+0x32>
    {
      return len;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	e008      	b.n	8000626 <_write+0x44>
    }
    else
    {
      return EIO;
 8000614:	2305      	movs	r3, #5
 8000616:	e006      	b.n	8000626 <_write+0x44>
    }
  }
  errno = EBADF;
 8000618:	f007 ff92 	bl	8008540 <__errno>
 800061c:	4602      	mov	r2, r0
 800061e:	2309      	movs	r3, #9
 8000620:	6013      	str	r3, [r2, #0]
  return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_close>:

int _close(int fd)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	db04      	blt.n	8000646 <_close+0x18>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b02      	cmp	r3, #2
 8000640:	dc01      	bgt.n	8000646 <_close+0x18>
  {
    return 0;
 8000642:	2300      	movs	r3, #0
 8000644:	e006      	b.n	8000654 <_close+0x26>
  }

  errno = EBADF;
 8000646:	f007 ff7b 	bl	8008540 <__errno>
 800064a:	4602      	mov	r2, r0
 800064c:	2309      	movs	r3, #9
 800064e:	6013      	str	r3, [r2, #0]
  return -1;
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_lseek>:

int _lseek(int fd, int ptr, int dir)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000668:	f007 ff6a 	bl	8008540 <__errno>
 800066c:	4602      	mov	r2, r0
 800066e:	2309      	movs	r3, #9
 8000670:	6013      	str	r3, [r2, #0]
  return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_read>:

int _read(int fd, char* ptr, int len)
{
 800067e:	b480      	push	{r7}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
//  HAL_StatusTypeDef hstatus;

//  if (fd == STDIN_FILENO) {
//    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
//    if (hstatus == HAL_OK)
      return 1;
 800068a:	2301      	movs	r3, #1
//    else
//      return EIO;
//  }
//  errno = EBADF;
//  return -1;
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_fstat>:

int _fstat(int fd, struct stat* st)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db08      	blt.n	80006ba <_fstat+0x22>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	dc05      	bgt.n	80006ba <_fstat+0x22>
  {
    st->st_mode = S_IFCHR;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b4:	605a      	str	r2, [r3, #4]
    return 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e005      	b.n	80006c6 <_fstat+0x2e>
  }

  errno = EBADF;
 80006ba:	f007 ff41 	bl	8008540 <__errno>
 80006be:	4602      	mov	r2, r0
 80006c0:	2309      	movs	r3, #9
 80006c2:	6013      	str	r3, [r2, #0]
  return 0;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x44>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6613      	str	r3, [r2, #96]	; 0x60
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x44>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x44>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6593      	str	r3, [r2, #88]	; 0x58
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x44>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000706:	f002 f915 	bl	8002934 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f8d4 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <USB_LP_IRQHandler+0x10>)
 800077a:	f000 fdc5 	bl	8001308 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20001b80 	.word	0x20001b80

08000788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <_sbrk+0x5c>)
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <_sbrk+0x60>)
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <_sbrk+0x64>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <_sbrk+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d207      	bcs.n	80007c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b8:	f007 fec2 	bl	8008540 <__errno>
 80007bc:	4602      	mov	r2, r0
 80007be:	230c      	movs	r3, #12
 80007c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	e009      	b.n	80007dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <_sbrk+0x64>)
 80007d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20020000 	.word	0x20020000
 80007e8:	00000400 	.word	0x00000400
 80007ec:	20000370 	.word	0x20000370
 80007f0:	20001e78 	.word	0x20001e78

080007f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <SystemInit+0x28>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <SystemInit+0x28>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <SystemInit+0x28>)
 800080a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800080e:	609a      	str	r2, [r3, #8]
#endif
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000822:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490e      	ldr	r1, [pc, #56]	; (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0b      	ldr	r4, [pc, #44]	; (800086c <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800084a:	f7ff ffd3 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f007 fe7d 	bl	800854c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000852:	f7ff fdef 	bl	8000434 <main>

08000856 <LoopForever>:

LoopForever:
    b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   r0, =_estack
 8000858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8000864:	08009948 	.word	0x08009948
  ldr r2, =_sbss
 8000868:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 800086c:	20001e78 	.word	0x20001e78

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>

08000872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f939 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f80e 	bl	80008a4 <HAL_InitTick>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	e001      	b.n	8000898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000894:	f7ff ff1c 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000898:	79fb      	ldrb	r3, [r7, #7]

}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_InitTick+0x68>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d022      	beq.n	80008fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_InitTick+0x6c>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_InitTick+0x68>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f973 	bl	8000bb8 <HAL_SYSTICK_Config>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10f      	bne.n	80008f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d809      	bhi.n	80008f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008de:	2200      	movs	r2, #0
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	f04f 30ff 	mov.w	r0, #4294967295
 80008e6:	f000 f925 	bl	8000b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_InitTick+0x70>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	e007      	b.n	8000902 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e004      	b.n	8000902 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e001      	b.n	8000902 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000008 	.word	0x20000008
 8000910:	20000000 	.word	0x20000000
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x1c>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x20>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4413      	add	r3, r2
 8000926:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x1c>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	200005a8 	.word	0x200005a8
 8000938:	20000008 	.word	0x20000008

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200005a8 	.word	0x200005a8

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4907      	ldr	r1, [pc, #28]	; (80009f0 <__NVIC_EnableIRQ+0x38>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f7ff ff8e 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d00f      	beq.n	8000b22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	d00c      	beq.n	8000b22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d009      	beq.n	8000b22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d006      	beq.n	8000b22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d003      	beq.n	8000b22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b1a:	21a7      	movs	r1, #167	; 0xa7
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000b1e:	f7ff fd38 	bl	8000592 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ff16 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	080094f8 	.word	0x080094f8

08000b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d903      	bls.n	8000b50 <HAL_NVIC_SetPriority+0x1c>
 8000b48:	21bf      	movs	r1, #191	; 0xbf
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <HAL_NVIC_SetPriority+0x50>)
 8000b4c:	f7ff fd21 	bl	8000592 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d903      	bls.n	8000b5e <HAL_NVIC_SetPriority+0x2a>
 8000b56:	21c0      	movs	r1, #192	; 0xc0
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_NVIC_SetPriority+0x50>)
 8000b5a:	f7ff fd1a 	bl	8000592 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5e:	f7ff ff1d 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000b62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	6978      	ldr	r0, [r7, #20]
 8000b6a:	f7ff ff6d 	bl	8000a48 <NVIC_EncodePriority>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff3c 	bl	80009f4 <__NVIC_SetPriority>
}
 8000b7c:	bf00      	nop
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	080094f8 	.word	0x080094f8

08000b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da03      	bge.n	8000ba2 <HAL_NVIC_EnableIRQ+0x1a>
 8000b9a:	21d3      	movs	r1, #211	; 0xd3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_NVIC_EnableIRQ+0x2c>)
 8000b9e:	f7ff fcf8 	bl	8000592 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff06 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	080094f8 	.word	0x080094f8

08000bb8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff75 	bl	8000ab0 <SysTick_Config>
 8000bc6:	4603      	mov	r3, r0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000be4:	d01b      	beq.n	8000c1e <HAL_GPIO_Init+0x4e>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a3b      	ldr	r2, [pc, #236]	; (8000cd8 <HAL_GPIO_Init+0x108>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d017      	beq.n	8000c1e <HAL_GPIO_Init+0x4e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a3a      	ldr	r2, [pc, #232]	; (8000cdc <HAL_GPIO_Init+0x10c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0x4e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a39      	ldr	r2, [pc, #228]	; (8000ce0 <HAL_GPIO_Init+0x110>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d00f      	beq.n	8000c1e <HAL_GPIO_Init+0x4e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <HAL_GPIO_Init+0x114>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d00b      	beq.n	8000c1e <HAL_GPIO_Init+0x4e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a37      	ldr	r2, [pc, #220]	; (8000ce8 <HAL_GPIO_Init+0x118>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_Init+0x4e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a36      	ldr	r2, [pc, #216]	; (8000cec <HAL_GPIO_Init+0x11c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x4e>
 8000c16:	21b1      	movs	r1, #177	; 0xb1
 8000c18:	4835      	ldr	r0, [pc, #212]	; (8000cf0 <HAL_GPIO_Init+0x120>)
 8000c1a:	f7ff fcba 	bl	8000592 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_GPIO_Init+0x64>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	041b      	lsls	r3, r3, #16
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x6c>
 8000c34:	21b2      	movs	r1, #178	; 0xb2
 8000c36:	482e      	ldr	r0, [pc, #184]	; (8000cf0 <HAL_GPIO_Init+0x120>)
 8000c38:	f7ff fcab 	bl	8000592 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d035      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d031      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b11      	cmp	r3, #17
 8000c52:	d02d      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d029      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b12      	cmp	r3, #18
 8000c62:	d025      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <HAL_GPIO_Init+0x124>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d020      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4a21      	ldr	r2, [pc, #132]	; (8000cf8 <HAL_GPIO_Init+0x128>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d01b      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <HAL_GPIO_Init+0x12c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d016      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_GPIO_Init+0x130>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d011      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_GPIO_Init+0x134>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00c      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <HAL_GPIO_Init+0x138>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0xe0>
 8000ca8:	21b3      	movs	r1, #179	; 0xb3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <HAL_GPIO_Init+0x120>)
 8000cac:	f7ff fc71 	bl	8000592 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 81d2 	beq.w	800105e <HAL_GPIO_Init+0x48e>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	f000 81cd 	beq.w	800105e <HAL_GPIO_Init+0x48e>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	f000 81c8 	beq.w	800105e <HAL_GPIO_Init+0x48e>
 8000cce:	21b4      	movs	r1, #180	; 0xb4
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <HAL_GPIO_Init+0x120>)
 8000cd2:	f7ff fc5e 	bl	8000592 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cd6:	e1c2      	b.n	800105e <HAL_GPIO_Init+0x48e>
 8000cd8:	48000400 	.word	0x48000400
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	48000c00 	.word	0x48000c00
 8000ce4:	48001000 	.word	0x48001000
 8000ce8:	48001400 	.word	0x48001400
 8000cec:	48001800 	.word	0x48001800
 8000cf0:	08009534 	.word	0x08009534
 8000cf4:	10110000 	.word	0x10110000
 8000cf8:	10210000 	.word	0x10210000
 8000cfc:	10310000 	.word	0x10310000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10220000 	.word	0x10220000
 8000d08:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 819a 	beq.w	8001058 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d00b      	beq.n	8000d44 <HAL_GPIO_Init+0x174>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d38:	2b11      	cmp	r3, #17
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b12      	cmp	r3, #18
 8000d42:	d144      	bne.n	8000dce <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00f      	beq.n	8000d6c <HAL_GPIO_Init+0x19c>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d00b      	beq.n	8000d6c <HAL_GPIO_Init+0x19c>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x19c>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x19c>
 8000d64:	21c4      	movs	r1, #196	; 0xc4
 8000d66:	4881      	ldr	r0, [pc, #516]	; (8000f6c <HAL_GPIO_Init+0x39c>)
 8000d68:	f7ff fc13 	bl	8000592 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 0201 	and.w	r2, r3, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x23e>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b12      	cmp	r3, #18
 8000e0c:	d14b      	bne.n	8000ea6 <HAL_GPIO_Init+0x2d6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e14:	d01b      	beq.n	8000e4e <HAL_GPIO_Init+0x27e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a55      	ldr	r2, [pc, #340]	; (8000f70 <HAL_GPIO_Init+0x3a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d017      	beq.n	8000e4e <HAL_GPIO_Init+0x27e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a54      	ldr	r2, [pc, #336]	; (8000f74 <HAL_GPIO_Init+0x3a4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d013      	beq.n	8000e4e <HAL_GPIO_Init+0x27e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a53      	ldr	r2, [pc, #332]	; (8000f78 <HAL_GPIO_Init+0x3a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d00f      	beq.n	8000e4e <HAL_GPIO_Init+0x27e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a52      	ldr	r2, [pc, #328]	; (8000f7c <HAL_GPIO_Init+0x3ac>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00b      	beq.n	8000e4e <HAL_GPIO_Init+0x27e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <HAL_GPIO_Init+0x3b0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x27e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <HAL_GPIO_Init+0x3b4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x27e>
 8000e46:	21dc      	movs	r1, #220	; 0xdc
 8000e48:	4848      	ldr	r0, [pc, #288]	; (8000f6c <HAL_GPIO_Init+0x39c>)
 8000e4a:	f7ff fba2 	bl	8000592 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	d903      	bls.n	8000e5e <HAL_GPIO_Init+0x28e>
 8000e56:	21dd      	movs	r1, #221	; 0xdd
 8000e58:	4844      	ldr	r0, [pc, #272]	; (8000f6c <HAL_GPIO_Init+0x39c>)
 8000e5a:	f7ff fb9a 	bl	8000592 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0203 	and.w	r2, r3, #3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 80b8 	beq.w	8001058 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_GPIO_Init+0x3b8>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <HAL_GPIO_Init+0x3b8>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_GPIO_Init+0x3b8>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f00:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <HAL_GPIO_Init+0x3bc>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2a:	d031      	beq.n	8000f90 <HAL_GPIO_Init+0x3c0>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <HAL_GPIO_Init+0x3a0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d019      	beq.n	8000f68 <HAL_GPIO_Init+0x398>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_GPIO_Init+0x3a4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_GPIO_Init+0x394>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_GPIO_Init+0x3a8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x390>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_GPIO_Init+0x3ac>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x38c>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_GPIO_Init+0x3b0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x388>
 8000f54:	2305      	movs	r3, #5
 8000f56:	e01c      	b.n	8000f92 <HAL_GPIO_Init+0x3c2>
 8000f58:	2306      	movs	r3, #6
 8000f5a:	e01a      	b.n	8000f92 <HAL_GPIO_Init+0x3c2>
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	e018      	b.n	8000f92 <HAL_GPIO_Init+0x3c2>
 8000f60:	2303      	movs	r3, #3
 8000f62:	e016      	b.n	8000f92 <HAL_GPIO_Init+0x3c2>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e014      	b.n	8000f92 <HAL_GPIO_Init+0x3c2>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e012      	b.n	8000f92 <HAL_GPIO_Init+0x3c2>
 8000f6c:	08009534 	.word	0x08009534
 8000f70:	48000400 	.word	0x48000400
 8000f74:	48000800 	.word	0x48000800
 8000f78:	48000c00 	.word	0x48000c00
 8000f7c:	48001000 	.word	0x48001000
 8000f80:	48001400 	.word	0x48001400
 8000f84:	48001800 	.word	0x48001800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	2300      	movs	r3, #0
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa2:	4935      	ldr	r1, [pc, #212]	; (8001078 <HAL_GPIO_Init+0x4a8>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fb0:	4b32      	ldr	r3, [pc, #200]	; (800107c <HAL_GPIO_Init+0x4ac>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd4:	4a29      	ldr	r2, [pc, #164]	; (800107c <HAL_GPIO_Init+0x4ac>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <HAL_GPIO_Init+0x4ac>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <HAL_GPIO_Init+0x4ac>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_GPIO_Init+0x4ac>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_GPIO_Init+0x4ac>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_GPIO_Init+0x4ac>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_GPIO_Init+0x4ac>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f ae4f 	bne.w	8000d0c <HAL_GPIO_Init+0x13c>
  }
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010000 	.word	0x40010000
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <HAL_GPIO_WritePin+0x20>
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <HAL_GPIO_WritePin+0x2a>
 80010a0:	f240 119d 	movw	r1, #413	; 0x19d
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <HAL_GPIO_WritePin+0x5c>)
 80010a6:	f7ff fa74 	bl	8000592 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80010aa:	787b      	ldrb	r3, [r7, #1]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <HAL_GPIO_WritePin+0x40>
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d004      	beq.n	80010c0 <HAL_GPIO_WritePin+0x40>
 80010b6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <HAL_GPIO_WritePin+0x5c>)
 80010bc:	f7ff fa69 	bl	8000592 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08009534 	.word	0x08009534

080010e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af06      	add	r7, sp, #24
 80010e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0e0      	b.n	80012b4 <HAL_PCD_Init+0x1d4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a71      	ldr	r2, [pc, #452]	; (80012bc <HAL_PCD_Init+0x1dc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d003      	beq.n	8001104 <HAL_PCD_Init+0x24>
 80010fc:	2185      	movs	r1, #133	; 0x85
 80010fe:	4870      	ldr	r0, [pc, #448]	; (80012c0 <HAL_PCD_Init+0x1e0>)
 8001100:	f7ff fa47 	bl	8000592 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d106      	bne.n	800111e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f006 ff21 	bl	8007f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f002 ff49 	bl	8003fc2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e04c      	b.n	80011d0 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	440b      	add	r3, r1
 8001146:	3301      	adds	r3, #1
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	b298      	uxth	r0, r3
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	3336      	adds	r3, #54	; 0x36
 8001174:	4602      	mov	r2, r0
 8001176:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3303      	adds	r3, #3
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3338      	adds	r3, #56	; 0x38
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	333c      	adds	r3, #60	; 0x3c
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	3340      	adds	r3, #64	; 0x40
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	3301      	adds	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3ad      	bcc.n	8001136 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e044      	b.n	800126a <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	3301      	adds	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3b5      	bcc.n	80011e0 <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	687e      	ldr	r6, [r7, #4]
 800127c:	466d      	mov	r5, sp
 800127e:	f106 0410 	add.w	r4, r6, #16
 8001282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	602b      	str	r3, [r5, #0]
 800128a:	1d33      	adds	r3, r6, #4
 800128c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	f002 feb2 	bl	8003ff8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d102      	bne.n	80012b2 <HAL_PCD_Init+0x1d2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 fa62 	bl	8002776 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012bc:	40005c00 	.word	0x40005c00
 80012c0:	08009570 	.word	0x08009570

080012c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_PCD_Start+0x16>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e012      	b.n	8001300 <HAL_PCD_Start+0x3c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fe54 	bl	8003f94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fe40 	bl	8005f76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f004 fe45 	bl	8005fa4 <USB_ReadInterrupts>
 800131a:	4603      	mov	r3, r0
 800131c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001324:	d102      	bne.n	800132c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fb5b 	bl	80019e2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fe37 	bl	8005fa4 <USB_ReadInterrupts>
 8001336:	4603      	mov	r3, r0
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	d112      	bne.n	8001368 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001354:	b292      	uxth	r2, r2
 8001356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f006 fe7b 	bl	8008056 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001360:	2100      	movs	r1, #0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f91e 	bl	80015a4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f004 fe19 	bl	8005fa4 <USB_ReadInterrupts>
 8001372:	4603      	mov	r3, r0
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800137c:	d10b      	bne.n	8001396 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001390:	b292      	uxth	r2, r2
 8001392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fe02 	bl	8005fa4 <USB_ReadInterrupts>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013aa:	d10b      	bne.n	80013c4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013be:	b292      	uxth	r2, r2
 80013c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fdeb 	bl	8005fa4 <USB_ReadInterrupts>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d8:	d133      	bne.n	8001442 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0204 	bic.w	r2, r2, #4
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0208 	bic.w	r2, r2, #8
 8001404:	b292      	uxth	r2, r2
 8001406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d107      	bne.n	8001424 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f007 f80e 	bl	8008440 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f006 fe4f 	bl	80080c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800143c:	b292      	uxth	r2, r2
 800143e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f004 fdac 	bl	8005fa4 <USB_ReadInterrupts>
 800144c:	4603      	mov	r3, r0
 800144e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001456:	d126      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0208 	orr.w	r2, r2, #8
 800146a:	b292      	uxth	r2, r2
 800146c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001482:	b292      	uxth	r2, r2
 8001484:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001490:	b29a      	uxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0204 	orr.w	r2, r2, #4
 800149a:	b292      	uxth	r2, r2
 800149c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f006 fdf7 	bl	8008094 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fd7a 	bl	8005fa4 <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d13f      	bne.n	800153a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014cc:	b292      	uxth	r2, r2
 80014ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d12b      	bne.n	8001534 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0204 	orr.w	r2, r2, #4
 80014ee:	b292      	uxth	r2, r2
 80014f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0208 	orr.w	r2, r2, #8
 8001506:	b292      	uxth	r2, r2
 8001508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800151c:	b29b      	uxth	r3, r3
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800152a:	2101      	movs	r1, #1
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f006 ff87 	bl	8008440 <HAL_PCDEx_LPM_Callback>
 8001532:	e002      	b.n	800153a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f006 fdad 	bl	8008094 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fd30 	bl	8005fa4 <USB_ReadInterrupts>
 8001544:	4603      	mov	r3, r0
 8001546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800154e:	d10e      	bne.n	800156e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001562:	b292      	uxth	r2, r2
 8001564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f006 fd66 	bl	800803a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fd16 	bl	8005fa4 <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001582:	d10b      	bne.n	800159c <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_PCD_SetAddress+0x1a>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e013      	b.n	80015e6 <HAL_PCD_SetAddress+0x42>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	78fa      	ldrb	r2, [r7, #3]
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 fcb9 	bl	8005f4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	70fb      	strb	r3, [r7, #3]
 8001600:	460b      	mov	r3, r1
 8001602:	803b      	strh	r3, [r7, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800160c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001610:	2b00      	cmp	r3, #0
 8001612:	da0e      	bge.n	8001632 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	705a      	strb	r2, [r3, #1]
 8001630:	e00e      	b.n	8001650 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	f003 0207 	and.w	r2, r3, #7
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800165c:	883a      	ldrh	r2, [r7, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	78ba      	ldrb	r2, [r7, #2]
 8001666:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800167a:	78bb      	ldrb	r3, [r7, #2]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d102      	bne.n	8001686 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_PCD_EP_Open+0xa6>
 8001690:	2302      	movs	r3, #2
 8001692:	e00e      	b.n	80016b2 <HAL_PCD_EP_Open+0xc4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fcca 	bl	800403c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80016b0:	7afb      	ldrb	r3, [r7, #11]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da0e      	bge.n	80016ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	705a      	strb	r2, [r3, #1]
 80016ea:	e00e      	b.n	800170a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0207 	and.w	r2, r3, #7
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	b2da      	uxtb	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_PCD_EP_Close+0x6a>
 8001720:	2302      	movs	r3, #2
 8001722:	e00e      	b.n	8001742 <HAL_PCD_EP_Close+0x88>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68f9      	ldr	r1, [r7, #12]
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fff0 	bl	8004718 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	460b      	mov	r3, r1
 8001758:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	f003 0207 	and.w	r2, r3, #7
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2200      	movs	r2, #0
 8001788:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178a:	7afb      	ldrb	r3, [r7, #11]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	b2da      	uxtb	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	2b00      	cmp	r3, #0
 800179e:	d106      	bne.n	80017ae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f9a3 	bl	8004af2 <USB_EPStartXfer>
 80017ac:	e005      	b.n	80017ba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6979      	ldr	r1, [r7, #20]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 f99c 	bl	8004af2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	f003 0207 	and.w	r2, r3, #7
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	460b      	mov	r3, r1
 8001802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2201      	movs	r2, #1
 800183e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	b2da      	uxtb	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 f948 	bl	8004af2 <USB_EPStartXfer>
 8001862:	e005      	b.n	8001870 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f941 	bl	8004af2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	f003 0207 	and.w	r2, r3, #7
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	d901      	bls.n	8001898 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e04c      	b.n	8001932 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189c:	2b00      	cmp	r3, #0
 800189e:	da0e      	bge.n	80018be <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	705a      	strb	r2, [r3, #1]
 80018bc:	e00c      	b.n	80018d8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_PCD_EP_SetStall+0x7e>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e01c      	b.n	8001932 <HAL_PCD_EP_SetStall+0xb8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fa22 	bl	8005d50 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	2b00      	cmp	r3, #0
 8001914:	d108      	bne.n	8001928 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f004 fb4e 	bl	8005fc4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 020f 	and.w	r2, r3, #15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	d901      	bls.n	8001958 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e040      	b.n	80019da <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da0e      	bge.n	800197e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	705a      	strb	r2, [r3, #1]
 800197c:	e00e      	b.n	800199c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f003 0207 	and.w	r2, r3, #7
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_EP_ClrStall+0x82>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e00e      	b.n	80019da <HAL_PCD_EP_ClrStall+0xa0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 fa11 	bl	8005df2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b08e      	sub	sp, #56	; 0x38
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019ea:	e2d1      	b.n	8001f90 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8152 	bne.w	8001cb0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d150      	bne.n	8001ab8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a26:	81fb      	strh	r3, [r7, #14]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3328      	adds	r3, #40	; 0x28
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	441a      	add	r2, r3
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a76:	2100      	movs	r1, #0
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f006 fac4 	bl	8008006 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8282 	beq.w	8001f90 <PCD_EP_ISR_Handler+0x5ae>
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 827d 	bne.w	8001f90 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ab6:	e26b      	b.n	8001f90 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ac8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d032      	beq.n	8001b38 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	f004 faa6 	bl	800605e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b1e:	4013      	ands	r3, r2
 8001b20:	823b      	strh	r3, [r7, #16]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	8a3a      	ldrh	r2, [r7, #16]
 8001b28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f006 fa3b 	bl	8007fac <HAL_PCD_SetupStageCallback>
 8001b36:	e22b      	b.n	8001f90 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f280 8227 	bge.w	8001f90 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b4e:	4013      	ands	r3, r2
 8001b50:	83bb      	strh	r3, [r7, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	8bba      	ldrh	r2, [r7, #28]
 8001b58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <PCD_EP_ISR_Handler+0x1e2>
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d015      	beq.n	8001bc4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	6959      	ldr	r1, [r3, #20]
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f004 fa58 	bl	800605e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	441a      	add	r2, r3
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f006 fa06 	bl	8007fd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4413      	add	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d112      	bne.n	8001c12 <PCD_EP_ISR_Handler+0x230>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	801a      	strh	r2, [r3, #0]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	801a      	strh	r2, [r3, #0]
 8001c10:	e02f      	b.n	8001c72 <PCD_EP_ISR_Handler+0x290>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b3e      	cmp	r3, #62	; 0x3e
 8001c18:	d813      	bhi.n	8001c42 <PCD_EP_ISR_Handler+0x260>
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <PCD_EP_ISR_Handler+0x252>
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c30:	3301      	adds	r3, #1
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	029b      	lsls	r3, r3, #10
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e017      	b.n	8001c72 <PCD_EP_ISR_Handler+0x290>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <PCD_EP_ISR_Handler+0x27a>
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c82:	827b      	strh	r3, [r7, #18]
 8001c84:	8a7b      	ldrh	r3, [r7, #18]
 8001c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c8a:	827b      	strh	r3, [r7, #18]
 8001c8c:	8a7b      	ldrh	r3, [r7, #18]
 8001c8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c92:	827b      	strh	r3, [r7, #18]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	8a7b      	ldrh	r3, [r7, #18]
 8001c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	8013      	strh	r3, [r2, #0]
 8001cae:	e16f      	b.n	8001f90 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cc2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f280 80e4 	bge.w	8001e94 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cfe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	7b1b      	ldrb	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d120      	bne.n	8001d5e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d40:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001d42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8083 	beq.w	8001e50 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	6959      	ldr	r1, [r3, #20]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	88da      	ldrh	r2, [r3, #6]
 8001d56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d58:	f004 f981 	bl	800605e <USB_ReadPMA>
 8001d5c:	e078      	b.n	8001e50 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	78db      	ldrb	r3, [r3, #3]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d108      	bne.n	8001d78 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f91d 	bl	8001fac <HAL_PCD_EP_DB_Receive>
 8001d72:	4603      	mov	r3, r0
 8001d74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d76:	e06b      	b.n	8001e50 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d92:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d01f      	beq.n	8001e12 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001df8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d028      	beq.n	8001e50 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	6959      	ldr	r1, [r3, #20]
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	891a      	ldrh	r2, [r3, #8]
 8001e0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e0c:	f004 f927 	bl	800605e <USB_ReadPMA>
 8001e10:	e01e      	b.n	8001e50 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e36:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	6959      	ldr	r1, [r3, #20]
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	895a      	ldrh	r2, [r3, #10]
 8001e4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e4c:	f004 f907 	bl	800605e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e56:	441a      	add	r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e62:	441a      	add	r2, r3
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <PCD_EP_ISR_Handler+0x498>
 8001e70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d206      	bcs.n	8001e88 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f006 f8a5 	bl	8007fd0 <HAL_PCD_DataOutStageCallback>
 8001e86:	e005      	b.n	8001e94 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fe2f 	bl	8004af2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d078      	beq.n	8001f90 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ecc:	843b      	strh	r3, [r7, #32]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	441a      	add	r2, r3
 8001edc:	8c3b      	ldrh	r3, [r7, #32]
 8001ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d108      	bne.n	8001f04 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d144      	bne.n	8001f84 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001efa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d13f      	bne.n	8001f84 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f28:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	8bfb      	ldrh	r3, [r7, #30]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d906      	bls.n	8001f42 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	8bfb      	ldrh	r3, [r7, #30]
 8001f3a:	1ad2      	subs	r2, r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e002      	b.n	8001f48 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f006 f855 	bl	8008006 <HAL_PCD_DataInStageCallback>
 8001f5c:	e018      	b.n	8001f90 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	8bfb      	ldrh	r3, [r7, #30]
 8001f64:	441a      	add	r2, r3
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	8bfb      	ldrh	r3, [r7, #30]
 8001f70:	441a      	add	r2, r3
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fdb8 	bl	8004af2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f82:	e005      	b.n	8001f90 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f86:	461a      	mov	r2, r3
 8001f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f917 	bl	80021be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f6ff ad25 	blt.w	80019ec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3738      	adds	r7, #56	; 0x38
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d07c      	beq.n	80020be <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	8b7b      	ldrh	r3, [r7, #26]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d306      	bcc.n	8002002 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	8b7b      	ldrh	r3, [r7, #26]
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	619a      	str	r2, [r3, #24]
 8002000:	e002      	b.n	8002008 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d123      	bne.n	8002058 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	833b      	strh	r3, [r7, #24]
 800202c:	8b3b      	ldrh	r3, [r7, #24]
 800202e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002032:	833b      	strh	r3, [r7, #24]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	441a      	add	r2, r3
 8002042:	8b3b      	ldrh	r3, [r7, #24]
 8002044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800204c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002054:	b29b      	uxth	r3, r3
 8002056:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01f      	beq.n	80020a2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207c:	82fb      	strh	r3, [r7, #22]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	441a      	add	r2, r3
 800208c:	8afb      	ldrh	r3, [r7, #22]
 800208e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800209e:	b29b      	uxth	r3, r3
 80020a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020a2:	8b7b      	ldrh	r3, [r7, #26]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8085 	beq.w	80021b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6959      	ldr	r1, [r3, #20]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	891a      	ldrh	r2, [r3, #8]
 80020b6:	8b7b      	ldrh	r3, [r7, #26]
 80020b8:	f003 ffd1 	bl	800605e <USB_ReadPMA>
 80020bc:	e07a      	b.n	80021b4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d306      	bcc.n	80020fc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	8b7b      	ldrh	r3, [r7, #26]
 80020f4:	1ad2      	subs	r2, r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	619a      	str	r2, [r3, #24]
 80020fa:	e002      	b.n	8002102 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d123      	bne.n	8002152 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002124:	83fb      	strh	r3, [r7, #30]
 8002126:	8bfb      	ldrh	r3, [r7, #30]
 8002128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800212c:	83fb      	strh	r3, [r7, #30]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	441a      	add	r2, r3
 800213c:	8bfb      	ldrh	r3, [r7, #30]
 800213e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214e:	b29b      	uxth	r3, r3
 8002150:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d11f      	bne.n	800219c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002176:	83bb      	strh	r3, [r7, #28]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	441a      	add	r2, r3
 8002186:	8bbb      	ldrh	r3, [r7, #28]
 8002188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800218c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002198:	b29b      	uxth	r3, r3
 800219a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800219c:	8b7b      	ldrh	r3, [r7, #26]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6959      	ldr	r1, [r3, #20]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	895a      	ldrh	r2, [r3, #10]
 80021ae:	8b7b      	ldrh	r3, [r7, #26]
 80021b0:	f003 ff55 	bl	800605e <USB_ReadPMA>
    }
  }

  return count;
 80021b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b092      	sub	sp, #72	; 0x48
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	4613      	mov	r3, r2
 80021ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8130 	beq.w	8002438 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002204:	429a      	cmp	r2, r3
 8002206:	d906      	bls.n	8002216 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	619a      	str	r2, [r3, #24]
 8002214:	e002      	b.n	800221c <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d12c      	bne.n	800227e <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f005 feeb 	bl	8008006 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 822d 	beq.w	8002696 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	827b      	strh	r3, [r7, #18]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	8a7b      	ldrh	r3, [r7, #18]
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]
 800227c:	e20b      	b.n	8002696 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01f      	beq.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	f040 81e1 	bne.w	8002696 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022da:	441a      	add	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022e6:	441a      	add	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6a1a      	ldr	r2, [r3, #32]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d309      	bcc.n	800230c <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	1ad2      	subs	r2, r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	621a      	str	r2, [r3, #32]
 800230a:	e014      	b.n	8002336 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002314:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002320:	e009      	b.n	8002336 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d155      	bne.n	80023ea <HAL_PCD_EP_DB_Transmit+0x22c>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	4413      	add	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	00da      	lsls	r2, r3, #3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4413      	add	r3, r2
 8002360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	2b00      	cmp	r3, #0
 800236a:	d112      	bne.n	8002392 <HAL_PCD_EP_DB_Transmit+0x1d4>
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002376:	b29a      	uxth	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238a:	b29a      	uxth	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	e047      	b.n	8002422 <HAL_PCD_EP_DB_Transmit+0x264>
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	2b3e      	cmp	r3, #62	; 0x3e
 8002396:	d811      	bhi.n	80023bc <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_PCD_EP_DB_Transmit+0x1f0>
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	3301      	adds	r3, #1
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	e032      	b.n	8002422 <HAL_PCD_EP_DB_Transmit+0x264>
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x214>
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	b29b      	uxth	r3, r3
 80023da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e01b      	b.n	8002422 <HAL_PCD_EP_DB_Transmit+0x264>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d117      	bne.n	8002422 <HAL_PCD_EP_DB_Transmit+0x264>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	4413      	add	r3, r2
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00da      	lsls	r2, r3, #3
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	4413      	add	r3, r2
 8002414:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	b29a      	uxth	r2, r3
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	6959      	ldr	r1, [r3, #20]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	891a      	ldrh	r2, [r3, #8]
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	b29b      	uxth	r3, r3
 8002432:	f003 fdd3 	bl	8005fdc <USB_WritePMA>
 8002436:	e12e      	b.n	8002696 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002464:	429a      	cmp	r2, r3
 8002466:	d306      	bcc.n	8002476 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e002      	b.n	800247c <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d12c      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f005 fdbb 	bl	8008006 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 80fd 	bne.w	8002696 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d8:	b29b      	uxth	r3, r3
 80024da:	8013      	strh	r3, [r2, #0]
 80024dc:	e0db      	b.n	8002696 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11f      	bne.n	8002528 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	b29b      	uxth	r3, r3
 8002526:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 80b1 	bne.w	8002696 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800253a:	441a      	add	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002546:	441a      	add	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d309      	bcc.n	800256c <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	1ad2      	subs	r2, r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	621a      	str	r2, [r3, #32]
 800256a:	e014      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002574:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002580:	e009      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d155      	bne.n	8002650 <HAL_PCD_EP_DB_Transmit+0x492>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	4413      	add	r3, r2
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00da      	lsls	r2, r3, #3
 80025c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d112      	bne.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x43a>
 80025d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025dc:	b29a      	uxth	r2, r3
 80025de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	e044      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	2b3e      	cmp	r3, #62	; 0x3e
 80025fc:	d811      	bhi.n	8002622 <HAL_PCD_EP_DB_Transmit+0x464>
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_PCD_EP_DB_Transmit+0x456>
 800260e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002610:	3301      	adds	r3, #1
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	b29b      	uxth	r3, r3
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	b29a      	uxth	r2, r3
 800261c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	e02f      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002634:	3b01      	subs	r3, #1
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263a:	b29b      	uxth	r3, r3
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	b29b      	uxth	r3, r3
 8002640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002648:	b29a      	uxth	r2, r3
 800264a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	e018      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d114      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	4413      	add	r3, r2
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	00da      	lsls	r2, r3, #3
 8002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002672:	4413      	add	r3, r2
 8002674:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	b29a      	uxth	r2, r3
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6959      	ldr	r1, [r3, #20]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	895a      	ldrh	r2, [r3, #10]
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	b29b      	uxth	r3, r3
 8002692:	f003 fca3 	bl	8005fdc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b0:	823b      	strh	r3, [r7, #16]
 80026b2:	8a3b      	ldrh	r3, [r7, #16]
 80026b4:	f083 0310 	eor.w	r3, r3, #16
 80026b8:	823b      	strh	r3, [r7, #16]
 80026ba:	8a3b      	ldrh	r3, [r7, #16]
 80026bc:	f083 0320 	eor.w	r3, r3, #32
 80026c0:	823b      	strh	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8a3b      	ldrh	r3, [r7, #16]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3748      	adds	r7, #72	; 0x48
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	817b      	strh	r3, [r7, #10]
 80026fe:	4613      	mov	r3, r2
 8002700:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800270e:	897b      	ldrh	r3, [r7, #10]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e009      	b.n	800273a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002726:	897a      	ldrh	r2, [r7, #10]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800273a:	893b      	ldrh	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2200      	movs	r2, #0
 8002744:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	b29a      	uxth	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	80da      	strh	r2, [r3, #6]
 800274e:	e00b      	b.n	8002768 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2201      	movs	r2, #1
 8002754:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	b29a      	uxth	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	b29a      	uxth	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800279a:	b29b      	uxth	r3, r3
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e0:	d007      	beq.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d003      	beq.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x26>
 80027ea:	219e      	movs	r1, #158	; 0x9e
 80027ec:	484d      	ldr	r0, [pc, #308]	; (8002924 <HAL_PWREx_ControlVoltageScaling+0x158>)
 80027ee:	f7fd fed0 	bl	8000592 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d141      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d131      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002806:	4b48      	ldr	r3, [pc, #288]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280c:	4a46      	ldr	r2, [pc, #280]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800280e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002812:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281e:	4a42      	ldr	r2, [pc, #264]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002824:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2232      	movs	r2, #50	; 0x32
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	4a3f      	ldr	r2, [pc, #252]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0c9b      	lsrs	r3, r3, #18
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283c:	e002      	b.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3b01      	subs	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002844:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d102      	bne.n	8002858 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f2      	bne.n	800283e <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002858:	4b33      	ldr	r3, [pc, #204]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002864:	d158      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e057      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800286c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002876:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800287a:	e04d      	b.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002882:	d141      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800288c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002890:	d131      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002892:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002898:	4a23      	ldr	r2, [pc, #140]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80028ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x160>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2232      	movs	r2, #50	; 0x32
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0c9b      	lsrs	r3, r3, #18
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c8:	e002      	b.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028dc:	d102      	bne.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x118>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f2      	bne.n	80028ca <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f0:	d112      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e011      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80028f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002906:	e007      	b.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002910:	4a05      	ldr	r2, [pc, #20]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002916:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	080095a8 	.word	0x080095a8
 8002928:	40007000 	.word	0x40007000
 800292c:	20000000 	.word	0x20000000
 8002930:	431bde83 	.word	0x431bde83

08002934 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800293e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002942:	6093      	str	r3, [r2, #8]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	f000 bc03 	b.w	800316e <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d022      	beq.n	80029b6 <HAL_RCC_OscConfig+0x62>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d110      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
 80029ac:	f240 1143 	movw	r1, #323	; 0x143
 80029b0:	48a4      	ldr	r0, [pc, #656]	; (8002c44 <HAL_RCC_OscConfig+0x2f0>)
 80029b2:	f7fd fdee 	bl	8000592 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8089 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <HAL_RCC_OscConfig+0x96>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_OscConfig+0x96>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029de:	d004      	beq.n	80029ea <HAL_RCC_OscConfig+0x96>
 80029e0:	f240 1149 	movw	r1, #329	; 0x149
 80029e4:	4897      	ldr	r0, [pc, #604]	; (8002c44 <HAL_RCC_OscConfig+0x2f0>)
 80029e6:	f7fd fdd4 	bl	8000592 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ea:	4b97      	ldr	r3, [pc, #604]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f4:	4b94      	ldr	r3, [pc, #592]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d102      	bne.n	8002a0a <HAL_RCC_OscConfig+0xb6>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_OscConfig+0xbc>
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	4b8d      	ldr	r3, [pc, #564]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d05b      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x180>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d157      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e3a2      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0xec>
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a84      	ldr	r2, [pc, #528]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0x128>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x110>
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b7c      	ldr	r3, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7b      	ldr	r2, [pc, #492]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0x128>
 8002a64:	4b78      	ldr	r3, [pc, #480]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a77      	ldr	r2, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b75      	ldr	r3, [pc, #468]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a74      	ldr	r2, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fd ff5a 	bl	800093c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fd ff56 	bl	800093c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e367      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x138>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fd ff46 	bl	800093c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fd ff42 	bl	800093c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e353      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac6:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x160>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 808d 	beq.w	8002bfe <HAL_RCC_OscConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_RCC_OscConfig+0x1ac>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d004      	beq.n	8002b00 <HAL_RCC_OscConfig+0x1ac>
 8002af6:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8002afa:	4852      	ldr	r0, [pc, #328]	; (8002c44 <HAL_RCC_OscConfig+0x2f0>)
 8002afc:	f7fd fd49 	bl	8000592 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b7f      	cmp	r3, #127	; 0x7f
 8002b06:	d904      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1be>
 8002b08:	f240 117f 	movw	r1, #383	; 0x17f
 8002b0c:	484d      	ldr	r0, [pc, #308]	; (8002c44 <HAL_RCC_OscConfig+0x2f0>)
 8002b0e:	f7fd fd40 	bl	8000592 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b12:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0x1de>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1e4>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d11f      	bne.n	8002b78 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x1fc>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e30e      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	493a      	ldr	r1, [pc, #232]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b64:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <HAL_RCC_OscConfig+0x2f8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fe9b 	bl	80008a4 <HAL_InitTick>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d043      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e2fa      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fd fed6 	bl	800093c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fd fed2 	bl	800093c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e2e3      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	4921      	ldr	r1, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
 8002bc6:	e01a      	b.n	8002bfe <HAL_RCC_OscConfig+0x2aa>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fd feb2 	bl	800093c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7fd feae 	bl	800093c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e2bf      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x288>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x2aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d04f      	beq.n	8002caa <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2d0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d004      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2d0>
 8002c1a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002c1e:	4809      	ldr	r0, [pc, #36]	; (8002c44 <HAL_RCC_OscConfig+0x2f0>)
 8002c20:	f7fd fcb7 	bl	8000592 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d022      	beq.n	8002c72 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <HAL_RCC_OscConfig+0x2f4>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fd fe7e 	bl	800093c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c42:	e00e      	b.n	8002c62 <HAL_RCC_OscConfig+0x30e>
 8002c44:	080095e4 	.word	0x080095e4
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fd fe74 	bl	800093c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e285      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c62:	4b95      	ldr	r3, [pc, #596]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <HAL_RCC_OscConfig+0x2fc>
 8002c70:	e01b      	b.n	8002caa <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c72:	4b91      	ldr	r3, [pc, #580]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c78:	4a8f      	ldr	r2, [pc, #572]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fd fe5b 	bl	800093c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fd fe57 	bl	800093c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e268      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9c:	4b86      	ldr	r3, [pc, #536]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ef      	bne.n	8002c8a <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80b7 	beq.w	8002e26 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00c      	beq.n	8002cde <HAL_RCC_OscConfig+0x38a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_OscConfig+0x38a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d004      	beq.n	8002cde <HAL_RCC_OscConfig+0x38a>
 8002cd4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8002cd8:	4878      	ldr	r0, [pc, #480]	; (8002ebc <HAL_RCC_OscConfig+0x568>)
 8002cda:	f7fd fc5a 	bl	8000592 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cde:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x39a>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x39c>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b70      	ldr	r3, [pc, #448]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002d00:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b6b      	ldr	r3, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x56c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x56c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a67      	ldr	r2, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x56c>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d28:	f7fd fe08 	bl	800093c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fd fe04 	bl	800093c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e215      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x56c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x414>
 8002d56:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	4a56      	ldr	r2, [pc, #344]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d66:	e024      	b.n	8002db2 <HAL_RCC_OscConfig+0x45e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d110      	bne.n	8002d92 <HAL_RCC_OscConfig+0x43e>
 8002d70:	4b51      	ldr	r3, [pc, #324]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a50      	ldr	r2, [pc, #320]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d80:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	4a4c      	ldr	r2, [pc, #304]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d90:	e00f      	b.n	8002db2 <HAL_RCC_OscConfig+0x45e>
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da2:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fd fdbf 	bl	800093c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fd fdbb 	bl	800093c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1ca      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd8:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ed      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x46e>
 8002de6:	e015      	b.n	8002e14 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fd fda8 	bl	800093c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fd fda4 	bl	800093c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e1b3      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ed      	bne.n	8002df0 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e14:	7ffb      	ldrb	r3, [r7, #31]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d04f      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d004      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
 8002e42:	f240 2139 	movw	r1, #569	; 0x239
 8002e46:	481d      	ldr	r0, [pc, #116]	; (8002ebc <HAL_RCC_OscConfig+0x568>)
 8002e48:	f7fd fba3 	bl	8000592 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fd fd6a 	bl	800093c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6c:	f7fd fd66 	bl	800093c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e177      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ef      	beq.n	8002e6c <HAL_RCC_OscConfig+0x518>
 8002e8c:	e021      	b.n	8002ed2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e94:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_RCC_OscConfig+0x564>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fd fd4d 	bl	800093c <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ea4:	e00e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea6:	f7fd fd49 	bl	800093c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d907      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e15a      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	080095e4 	.word	0x080095e4
 8002ec0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec4:	4ba6      	ldr	r3, [pc, #664]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8002ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e9      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x5a0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x5a0>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x5a0>
 8002eea:	f240 2162 	movw	r1, #610	; 0x262
 8002eee:	489d      	ldr	r0, [pc, #628]	; (8003164 <HAL_RCC_OscConfig+0x810>)
 8002ef0:	f7fd fb4f 	bl	8000592 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8137 	beq.w	800316c <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efe:	4b98      	ldr	r3, [pc, #608]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	f000 80ea 	beq.w	80030e0 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f040 80bd 	bne.w	8003090 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x5e4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d008      	beq.n	8002f38 <HAL_RCC_OscConfig+0x5e4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d004      	beq.n	8002f38 <HAL_RCC_OscConfig+0x5e4>
 8002f2e:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8002f32:	488c      	ldr	r0, [pc, #560]	; (8003164 <HAL_RCC_OscConfig+0x810>)
 8002f34:	f7fd fb2d 	bl	8000592 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCC_OscConfig+0x5f4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d904      	bls.n	8002f52 <HAL_RCC_OscConfig+0x5fe>
 8002f48:	f240 216d 	movw	r1, #621	; 0x26d
 8002f4c:	4885      	ldr	r0, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x810>)
 8002f4e:	f7fd fb20 	bl	8000592 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	d903      	bls.n	8002f62 <HAL_RCC_OscConfig+0x60e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f60:	d904      	bls.n	8002f6c <HAL_RCC_OscConfig+0x618>
 8002f62:	f240 216e 	movw	r1, #622	; 0x26e
 8002f66:	487f      	ldr	r0, [pc, #508]	; (8003164 <HAL_RCC_OscConfig+0x810>)
 8002f68:	f7fd fb13 	bl	8000592 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d903      	bls.n	8002f7c <HAL_RCC_OscConfig+0x628>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	2b1f      	cmp	r3, #31
 8002f7a:	d904      	bls.n	8002f86 <HAL_RCC_OscConfig+0x632>
 8002f7c:	f240 216f 	movw	r1, #623	; 0x26f
 8002f80:	4878      	ldr	r0, [pc, #480]	; (8003164 <HAL_RCC_OscConfig+0x810>)
 8002f82:	f7fd fb06 	bl	8000592 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d010      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x65c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d00c      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x65c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x65c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d004      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x65c>
 8002fa6:	f44f 711c 	mov.w	r1, #624	; 0x270
 8002faa:	486e      	ldr	r0, [pc, #440]	; (8003164 <HAL_RCC_OscConfig+0x810>)
 8002fac:	f7fd faf1 	bl	8000592 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d010      	beq.n	8002fda <HAL_RCC_OscConfig+0x686>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d00c      	beq.n	8002fda <HAL_RCC_OscConfig+0x686>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_OscConfig+0x686>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d004      	beq.n	8002fda <HAL_RCC_OscConfig+0x686>
 8002fd0:	f240 2171 	movw	r1, #625	; 0x271
 8002fd4:	4863      	ldr	r0, [pc, #396]	; (8003164 <HAL_RCC_OscConfig+0x810>)
 8002fd6:	f7fd fadc 	bl	8000592 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b61      	ldr	r3, [pc, #388]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a60      	ldr	r2, [pc, #384]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8002fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fd fca9 	bl	800093c <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fd fca5 	bl	800093c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0b6      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003000:	4b57      	ldr	r3, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300c:	4b54      	ldr	r3, [pc, #336]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4b55      	ldr	r3, [pc, #340]	; (8003168 <HAL_RCC_OscConfig+0x814>)
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6a11      	ldr	r1, [r2, #32]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301c:	3a01      	subs	r2, #1
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003026:	0212      	lsls	r2, r2, #8
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800302e:	0852      	lsrs	r2, r2, #1
 8003030:	3a01      	subs	r2, #1
 8003032:	0552      	lsls	r2, r2, #21
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800303a:	0852      	lsrs	r2, r2, #1
 800303c:	3a01      	subs	r2, #1
 800303e:	0652      	lsls	r2, r2, #25
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003046:	06d2      	lsls	r2, r2, #27
 8003048:	430a      	orrs	r2, r1
 800304a:	4945      	ldr	r1, [pc, #276]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a42      	ldr	r2, [pc, #264]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305c:	4b40      	ldr	r3, [pc, #256]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a3f      	ldr	r2, [pc, #252]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd fc68 	bl	800093c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fd fc64 	bl	800093c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e075      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x71c>
 800308e:	e06d      	b.n	800316c <HAL_RCC_OscConfig+0x818>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003090:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a32      	ldr	r2, [pc, #200]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 80030ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fd fc40 	bl	800093c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fd fc3c 	bl	800093c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04d      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x76c>
 80030de:	e045      	b.n	800316c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e040      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_RCC_OscConfig+0x80c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0203 	and.w	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d12c      	bne.n	800315a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	3b01      	subs	r3, #1
 800310c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d123      	bne.n	800315a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d11b      	bne.n	800315a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d113      	bne.n	800315a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	3b01      	subs	r3, #1
 8003140:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d109      	bne.n	800315a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d008      	beq.n	800316c <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <HAL_RCC_OscConfig+0x81a>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	080095e4 	.word	0x080095e4
 8003168:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e1e2      	b.n	8003556 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x30>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 030f 	bic.w	r3, r3, #15
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x3a>
 80031a8:	f240 310a 	movw	r1, #778	; 0x30a
 80031ac:	4897      	ldr	r0, [pc, #604]	; (800340c <HAL_RCC_ClockConfig+0x294>)
 80031ae:	f7fd f9f0 	bl	8000592 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d031      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d02e      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d02b      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d028      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d025      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d022      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b06      	cmp	r3, #6
 80031da:	d01f      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b07      	cmp	r3, #7
 80031e0:	d01c      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d019      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	d016      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b0a      	cmp	r3, #10
 80031f2:	d013      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b0b      	cmp	r3, #11
 80031f8:	d010      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d00d      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b0d      	cmp	r3, #13
 8003204:	d00a      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b0e      	cmp	r3, #14
 800320a:	d007      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d004      	beq.n	800321c <HAL_RCC_ClockConfig+0xa4>
 8003212:	f240 310b 	movw	r1, #779	; 0x30b
 8003216:	487d      	ldr	r0, [pc, #500]	; (800340c <HAL_RCC_ClockConfig+0x294>)
 8003218:	f7fd f9bb 	bl	8000592 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b7c      	ldr	r3, [pc, #496]	; (8003410 <HAL_RCC_ClockConfig+0x298>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_RCC_ClockConfig+0x298>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	4977      	ldr	r1, [pc, #476]	; (8003410 <HAL_RCC_ClockConfig+0x298>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b75      	ldr	r3, [pc, #468]	; (8003410 <HAL_RCC_ClockConfig+0x298>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e184      	b.n	8003556 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8085 	beq.w	8003364 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d00c      	beq.n	800327c <HAL_RCC_ClockConfig+0x104>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d008      	beq.n	800327c <HAL_RCC_ClockConfig+0x104>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d004      	beq.n	800327c <HAL_RCC_ClockConfig+0x104>
 8003272:	f240 3122 	movw	r1, #802	; 0x322
 8003276:	4865      	ldr	r0, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x294>)
 8003278:	f7fd f98b 	bl	8000592 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d129      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003284:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e160      	b.n	8003556 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003294:	f000 f9d2 	bl	800363c <RCC_GetSysClockFreqFromPLLSource>
 8003298:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_RCC_ClockConfig+0x2a0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d93f      	bls.n	8003322 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032a2:	4b5c      	ldr	r3, [pc, #368]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d033      	beq.n	8003322 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12f      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032c2:	4b54      	ldr	r3, [pc, #336]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ca:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 80032cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e024      	b.n	8003322 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e0:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e132      	b.n	8003556 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f0:	4b48      	ldr	r3, [pc, #288]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e12a      	b.n	8003556 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003300:	f000 f93a 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8003304:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4a43      	ldr	r2, [pc, #268]	; (8003418 <HAL_RCC_ClockConfig+0x2a0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d909      	bls.n	8003322 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003316:	4a3f      	ldr	r2, [pc, #252]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4939      	ldr	r1, [pc, #228]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fd fb02 	bl	800093c <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fd fafe 	bl	800093c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e101      	b.n	8003556 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d055      	beq.n	800341c <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a24      	ldr	r2, [pc, #144]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003386:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 800339e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d024      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b80      	cmp	r3, #128	; 0x80
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b90      	cmp	r3, #144	; 0x90
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2ba0      	cmp	r3, #160	; 0xa0
 80033c2:	d018      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2bb0      	cmp	r3, #176	; 0xb0
 80033ca:	d014      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2bc0      	cmp	r3, #192	; 0xc0
 80033d2:	d010      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2bd0      	cmp	r3, #208	; 0xd0
 80033da:	d00c      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2be0      	cmp	r3, #224	; 0xe0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2bf0      	cmp	r3, #240	; 0xf0
 80033ea:	d004      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x27e>
 80033ec:	f240 3179 	movw	r1, #889	; 0x379
 80033f0:	4806      	ldr	r0, [pc, #24]	; (800340c <HAL_RCC_ClockConfig+0x294>)
 80033f2:	f7fd f8ce 	bl	8000592 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4904      	ldr	r1, [pc, #16]	; (8003414 <HAL_RCC_ClockConfig+0x29c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]
 8003408:	e011      	b.n	800342e <HAL_RCC_ClockConfig+0x2b6>
 800340a:	bf00      	nop
 800340c:	080095e4 	.word	0x080095e4
 8003410:	40022000 	.word	0x40022000
 8003414:	40021000 	.word	0x40021000
 8003418:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d105      	bne.n	800342e <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003422:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_RCC_ClockConfig+0x3e8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_RCC_ClockConfig+0x3e8>)
 8003428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800342c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800342e:	4b4d      	ldr	r3, [pc, #308]	; (8003564 <HAL_RCC_ClockConfig+0x3ec>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d21d      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343c:	4b49      	ldr	r3, [pc, #292]	; (8003564 <HAL_RCC_ClockConfig+0x3ec>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 020f 	bic.w	r2, r3, #15
 8003444:	4947      	ldr	r1, [pc, #284]	; (8003564 <HAL_RCC_ClockConfig+0x3ec>)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800344c:	f7fd fa76 	bl	800093c <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	e00a      	b.n	800346a <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003454:	f7fd fa72 	bl	800093c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e075      	b.n	8003556 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b3e      	ldr	r3, [pc, #248]	; (8003564 <HAL_RCC_ClockConfig+0x3ec>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d1ed      	bne.n	8003454 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d025      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d018      	beq.n	80034be <HAL_RCC_ClockConfig+0x346>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003494:	d013      	beq.n	80034be <HAL_RCC_ClockConfig+0x346>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800349e:	d00e      	beq.n	80034be <HAL_RCC_ClockConfig+0x346>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034a8:	d009      	beq.n	80034be <HAL_RCC_ClockConfig+0x346>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b2:	d004      	beq.n	80034be <HAL_RCC_ClockConfig+0x346>
 80034b4:	f240 319b 	movw	r1, #923	; 0x39b
 80034b8:	482b      	ldr	r0, [pc, #172]	; (8003568 <HAL_RCC_ClockConfig+0x3f0>)
 80034ba:	f7fd f86a 	bl	8000592 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_RCC_ClockConfig+0x3e8>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4925      	ldr	r1, [pc, #148]	; (8003560 <HAL_RCC_ClockConfig+0x3e8>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d026      	beq.n	800352a <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d018      	beq.n	8003516 <HAL_RCC_ClockConfig+0x39e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d013      	beq.n	8003516 <HAL_RCC_ClockConfig+0x39e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80034f6:	d00e      	beq.n	8003516 <HAL_RCC_ClockConfig+0x39e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x39e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800350a:	d004      	beq.n	8003516 <HAL_RCC_ClockConfig+0x39e>
 800350c:	f240 31a2 	movw	r1, #930	; 0x3a2
 8003510:	4815      	ldr	r0, [pc, #84]	; (8003568 <HAL_RCC_ClockConfig+0x3f0>)
 8003512:	f7fd f83e 	bl	8000592 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x3e8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x3e8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352a:	f000 f825 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x3e8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <HAL_RCC_ClockConfig+0x3f4>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	fa21 f303 	lsr.w	r3, r1, r3
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x3f8>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x3fc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd f9a8 	bl	80008a4 <HAL_InitTick>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	40022000 	.word	0x40022000
 8003568:	080095e4 	.word	0x080095e4
 800356c:	0800978c 	.word	0x0800978c
 8003570:	20000000 	.word	0x20000000
 8003574:	20000004 	.word	0x20000004

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d102      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_RCC_GetSysClockFreq+0xbc>)
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e047      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d102      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e03e      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d136      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3301      	adds	r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d10c      	bne.n	80035e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d6:	68d2      	ldr	r2, [r2, #12]
 80035d8:	0a12      	lsrs	r2, r2, #8
 80035da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e00c      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e6:	4a13      	ldr	r2, [pc, #76]	; (8003634 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	4a10      	ldr	r2, [pc, #64]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	0a12      	lsrs	r2, r2, #8
 80035f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	0e5b      	lsrs	r3, r3, #25
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	3301      	adds	r3, #1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e001      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003620:	693b      	ldr	r3, [r7, #16]
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	00f42400 	.word	0x00f42400
 8003638:	007a1200 	.word	0x007a1200

0800363c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d10c      	bne.n	800367a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003660:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800366a:	68d2      	ldr	r2, [r2, #12]
 800366c:	0a12      	lsrs	r2, r2, #8
 800366e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
    break;
 8003678:	e00c      	b.n	8003694 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	0a12      	lsrs	r2, r2, #8
 8003688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    break;
 8003692:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0e5b      	lsrs	r3, r3, #25
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036ae:	687b      	ldr	r3, [r7, #4]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40021000 	.word	0x40021000
 80036c0:	007a1200 	.word	0x007a1200
 80036c4:	00f42400 	.word	0x00f42400

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d0:	2300      	movs	r3, #0
 80036d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d175      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d16f      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d169      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d163      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d15d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d157      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d151      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d14b      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d145      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d13f      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003758:	2b00      	cmp	r3, #0
 800375a:	d139      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d133      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003770:	2b00      	cmp	r3, #0
 8003772:	d12d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d127      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d121      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11b      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d115      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10f      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80037c8:	2185      	movs	r1, #133	; 0x85
 80037ca:	4855      	ldr	r0, [pc, #340]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037cc:	f7fc fee1 	bl	8000592 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80b2 	beq.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d00d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d003      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003808:	218d      	movs	r1, #141	; 0x8d
 800380a:	4845      	ldr	r0, [pc, #276]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800380c:	f7fc fec1 	bl	8000592 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003810:	4b44      	ldr	r3, [pc, #272]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10d      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	4a40      	ldr	r2, [pc, #256]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003826:	6593      	str	r3, [r2, #88]	; 0x58
 8003828:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003834:	2301      	movs	r3, #1
 8003836:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3a      	ldr	r2, [pc, #232]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003844:	f7fd f87a 	bl	800093c <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384a:	e009      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fd f876 	bl	800093c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d902      	bls.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	74fb      	strb	r3, [r7, #19]
        break;
 800385e:	e005      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ef      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d15c      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387c:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01e      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	429a      	cmp	r2, r3
 800388c:	d019      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389a:	4b22      	ldr	r3, [pc, #136]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ba:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d016      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd f836 	bl	800093c <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d2:	e00b      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fd f832 	bl	800093c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d902      	bls.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	74fb      	strb	r3, [r7, #19]
            break;
 80038ea:	e006      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ec      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	4905      	ldr	r1, [pc, #20]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003916:	e00b      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	74bb      	strb	r3, [r7, #18]
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800391e:	bf00      	nop
 8003920:	0800961c 	.word	0x0800961c
 8003924:	40021000 	.word	0x40021000
 8003928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003930:	7c7b      	ldrb	r3, [r7, #17]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003936:	4ba7      	ldr	r3, [pc, #668]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4aa6      	ldr	r2, [pc, #664]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800393c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01e      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00f      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d00b      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d007      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d003      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800396e:	21e2      	movs	r1, #226	; 0xe2
 8003970:	4899      	ldr	r0, [pc, #612]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003972:	f7fc fe0e 	bl	8000592 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003976:	4b97      	ldr	r3, [pc, #604]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f023 0203 	bic.w	r2, r3, #3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4993      	ldr	r1, [pc, #588]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01e      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d00b      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d007      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d003      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80039b8:	21ec      	movs	r1, #236	; 0xec
 80039ba:	4887      	ldr	r0, [pc, #540]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80039bc:	f7fc fde9 	bl	8000592 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c0:	4b84      	ldr	r3, [pc, #528]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 020c 	bic.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4981      	ldr	r1, [pc, #516]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01e      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00f      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d00b      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b30      	cmp	r3, #48	; 0x30
 80039f8:	d007      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d003      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a02:	21f6      	movs	r1, #246	; 0xf6
 8003a04:	4874      	ldr	r0, [pc, #464]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003a06:	f7fc fdc4 	bl	8000592 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a0a:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	496e      	ldr	r1, [pc, #440]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d00c      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2bc0      	cmp	r3, #192	; 0xc0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003a4c:	f240 1101 	movw	r1, #257	; 0x101
 8003a50:	4861      	ldr	r0, [pc, #388]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003a52:	f7fc fd9e 	bl	8000592 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a56:	4b5f      	ldr	r3, [pc, #380]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	495b      	ldr	r1, [pc, #364]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d022      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a88:	d00e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d004      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a9e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003aa2:	484d      	ldr	r0, [pc, #308]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003aa4:	f7fc fd75 	bl	8000592 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aa8:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4947      	ldr	r1, [pc, #284]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d022      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x448>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d013      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d00e      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae4:	d009      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aee:	d004      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003af0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003af4:	4838      	ldr	r0, [pc, #224]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003af6:	f7fc fd4c 	bl	8000592 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	4932      	ldr	r1, [pc, #200]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01d      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00e      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b36:	d004      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003b38:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003b3c:	4826      	ldr	r0, [pc, #152]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003b3e:	f7fc fd28 	bl	8000592 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4920      	ldr	r1, [pc, #128]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01d      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b74:	d009      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7e:	d004      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b80:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003b84:	4814      	ldr	r0, [pc, #80]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003b86:	f7fc fd04 	bl	8000592 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	490e      	ldr	r1, [pc, #56]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d022      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d00e      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc6:	d009      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bc8:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003bce:	f7fc fce0 	bl	8000592 <assert_failed>
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	0800961c 	.word	0x0800961c

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bdc:	4ba0      	ldr	r3, [pc, #640]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	499d      	ldr	r1, [pc, #628]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x558>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d008      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x558>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d004      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x558>
 8003c16:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003c1a:	4892      	ldr	r0, [pc, #584]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003c1c:	f7fc fcb9 	bl	8000592 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c20:	4b8f      	ldr	r3, [pc, #572]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	498c      	ldr	r1, [pc, #560]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d022      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d013      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c52:	d00e      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c5c:	d009      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c66:	d004      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c68:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003c6c:	487d      	ldr	r0, [pc, #500]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003c6e:	f7fc fc90 	bl	8000592 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c72:	4b7b      	ldr	r3, [pc, #492]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4977      	ldr	r1, [pc, #476]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cae:	d009      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cb8:	d004      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003cba:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003cbe:	4869      	ldr	r0, [pc, #420]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003cc0:	f7fc fc67 	bl	8000592 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc4:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4963      	ldr	r1, [pc, #396]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce4:	4b5e      	ldr	r3, [pc, #376]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a5d      	ldr	r2, [pc, #372]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d02d      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0c:	d00e      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d16:	d009      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d20:	d004      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003d22:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003d26:	484f      	ldr	r0, [pc, #316]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003d28:	f7fc fc33 	bl	8000592 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	4949      	ldr	r1, [pc, #292]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4c:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a43      	ldr	r2, [pc, #268]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d028      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d74:	d009      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d7e:	d004      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003d80:	f240 117b 	movw	r1, #379	; 0x17b
 8003d84:	4837      	ldr	r0, [pc, #220]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003d86:	f7fc fc04 	bl	8000592 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d8a:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	4931      	ldr	r1, [pc, #196]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da8:	d105      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003daa:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d023      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x742>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x716>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd2:	d004      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x716>
 8003dd4:	f240 118d 	movw	r1, #397	; 0x18d
 8003dd8:	4822      	ldr	r0, [pc, #136]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003dda:	f7fc fbda 	bl	8000592 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	491c      	ldr	r1, [pc, #112]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x742>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e08:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d028      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e26:	d004      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8003e28:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003e2c:	480d      	ldr	r0, [pc, #52]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003e2e:	f7fc fbb0 	bl	8000592 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	4907      	ldr	r1, [pc, #28]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e50:	d10a      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e52:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4a02      	ldr	r2, [pc, #8]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e5c:	60d3      	str	r3, [r2, #12]
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8003e60:	40021000 	.word	0x40021000
 8003e64:	0800961c 	.word	0x0800961c
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d028      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e84:	d009      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8e:	d004      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003e94:	483d      	ldr	r0, [pc, #244]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003e96:	f7fc fb7c 	bl	8000592 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e9a:	4b3d      	ldr	r3, [pc, #244]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	4939      	ldr	r1, [pc, #228]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003eba:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d028      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x85c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d009      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eec:	d004      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8003eee:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003ef2:	4826      	ldr	r0, [pc, #152]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003ef4:	f7fc fb4d 	bl	8000592 <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	4922      	ldr	r1, [pc, #136]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d028      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f38:	d00d      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f4a:	d004      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003f4c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8003f50:	480e      	ldr	r0, [pc, #56]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003f52:	f7fc fb1e 	bl	8000592 <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f64:	490a      	ldr	r1, [pc, #40]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f74:	d105      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f80:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	0800961c 	.word	0x0800961c
 8003f90:	40021000 	.word	0x40021000

08003f94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fa4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003fa8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003fce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	f107 0014 	add.w	r0, r7, #20
 8004006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	b004      	add	sp, #16
 8004038:	4770      	bx	lr
	...

0800403c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800403c:	b480      	push	{r7}
 800403e:	b09b      	sub	sp, #108	; 0x6c
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	78db      	ldrb	r3, [r3, #3]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d81f      	bhi.n	80040ae <USB_ActivateEndpoint+0x72>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <USB_ActivateEndpoint+0x38>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004085 	.word	0x08004085
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040b7 	.word	0x080040b7
 8004080:	08004093 	.word	0x08004093
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004084:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800408c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004090:	e012      	b.n	80040b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004092:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004096:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800409a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800409e:	e00b      	b.n	80040b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040ac:	e004      	b.n	80040b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80040b4:	e000      	b.n	80040b8 <USB_ActivateEndpoint+0x7c>
      break;
 80040b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	b21a      	sxth	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b21b      	sxth	r3, r3
 80040fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	441a      	add	r2, r3
 800410c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004120:	b29b      	uxth	r3, r3
 8004122:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	7b1b      	ldrb	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 8149 	bne.w	80043c0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8084 	beq.w	8004240 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	00da      	lsls	r2, r3, #3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	88db      	ldrh	r3, [r3, #6]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	b29b      	uxth	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	81fb      	strh	r3, [r7, #14]
 800417a:	89fb      	ldrh	r3, [r7, #14]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01b      	beq.n	80041bc <USB_ActivateEndpoint+0x180>
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	81bb      	strh	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	441a      	add	r2, r3
 80041a6:	89bb      	ldrh	r3, [r7, #12]
 80041a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	78db      	ldrb	r3, [r3, #3]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d020      	beq.n	8004206 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041da:	813b      	strh	r3, [r7, #8]
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	f083 0320 	eor.w	r3, r3, #32
 80041e2:	813b      	strh	r3, [r7, #8]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	893b      	ldrh	r3, [r7, #8]
 80041f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]
 8004204:	e27f      	b.n	8004706 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421c:	817b      	strh	r3, [r7, #10]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	897b      	ldrh	r3, [r7, #10]
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
 800423e:	e262      	b.n	8004706 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	4413      	add	r3, r2
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	00da      	lsls	r2, r3, #3
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	4413      	add	r3, r2
 800425e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	88db      	ldrh	r3, [r3, #6]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	4413      	add	r3, r2
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	00da      	lsls	r2, r3, #3
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	4413      	add	r3, r2
 8004292:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d112      	bne.n	80042c6 <USB_ActivateEndpoint+0x28a>
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042be:	b29a      	uxth	r2, r3
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	e02f      	b.n	8004326 <USB_ActivateEndpoint+0x2ea>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b3e      	cmp	r3, #62	; 0x3e
 80042cc:	d813      	bhi.n	80042f6 <USB_ActivateEndpoint+0x2ba>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	663b      	str	r3, [r7, #96]	; 0x60
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <USB_ActivateEndpoint+0x2ac>
 80042e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e4:	3301      	adds	r3, #1
 80042e6:	663b      	str	r3, [r7, #96]	; 0x60
 80042e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	e017      	b.n	8004326 <USB_ActivateEndpoint+0x2ea>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <USB_ActivateEndpoint+0x2d4>
 800430a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800430c:	3b01      	subs	r3, #1
 800430e:	663b      	str	r3, [r7, #96]	; 0x60
 8004310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004312:	b29b      	uxth	r3, r3
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	b29b      	uxth	r3, r3
 8004318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800431c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004320:	b29a      	uxth	r2, r3
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	83fb      	strh	r3, [r7, #30]
 8004334:	8bfb      	ldrh	r3, [r7, #30]
 8004336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01b      	beq.n	8004376 <USB_ActivateEndpoint+0x33a>
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004354:	83bb      	strh	r3, [r7, #28]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	441a      	add	r2, r3
 8004360:	8bbb      	ldrh	r3, [r7, #28]
 8004362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800436e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004372:	b29b      	uxth	r3, r3
 8004374:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	837b      	strh	r3, [r7, #26]
 800438e:	8b7b      	ldrh	r3, [r7, #26]
 8004390:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004394:	837b      	strh	r3, [r7, #26]
 8004396:	8b7b      	ldrh	r3, [r7, #26]
 8004398:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800439c:	837b      	strh	r3, [r7, #26]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	8b7b      	ldrh	r3, [r7, #26]
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]
 80043be:	e1a2      	b.n	8004706 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	441a      	add	r2, r3
 80043e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80043e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004406:	b29b      	uxth	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800440c:	4413      	add	r3, r2
 800440e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	00da      	lsls	r2, r3, #3
 8004416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004418:	4413      	add	r3, r2
 800441a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800441e:	657b      	str	r3, [r7, #84]	; 0x54
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	891b      	ldrh	r3, [r3, #8]
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	b29b      	uxth	r3, r3
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	653b      	str	r3, [r7, #80]	; 0x50
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443a:	b29b      	uxth	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004440:	4413      	add	r3, r2
 8004442:	653b      	str	r3, [r7, #80]	; 0x50
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	00da      	lsls	r2, r3, #3
 800444a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444c:	4413      	add	r3, r2
 800444e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	895b      	ldrh	r3, [r3, #10]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f040 8091 	bne.w	8004590 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800447c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800447e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01b      	beq.n	80044be <USB_ActivateEndpoint+0x482>
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	441a      	add	r2, r3
 80044a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80044aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80044cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01b      	beq.n	800450e <USB_ActivateEndpoint+0x4d2>
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	441a      	add	r2, r3
 80044f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800450a:	b29b      	uxth	r3, r3
 800450c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004526:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004528:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800452c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800452e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004530:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004534:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456c:	867b      	strh	r3, [r7, #50]	; 0x32
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
 800458e:	e0ba      	b.n	8004706 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80045a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01d      	beq.n	80045e8 <USB_ActivateEndpoint+0x5ac>
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	441a      	add	r2, r3
 80045d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80045f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01d      	beq.n	8004640 <USB_ActivateEndpoint+0x604>
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	78db      	ldrb	r3, [r3, #3]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d024      	beq.n	8004692 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004662:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004666:	f083 0320 	eor.w	r3, r3, #32
 800466a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
 8004690:	e01d      	b.n	80046ce <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80046ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80046f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004702:	b29b      	uxth	r3, r3
 8004704:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004706:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800470a:	4618      	mov	r0, r3
 800470c:	376c      	adds	r7, #108	; 0x6c
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004718:	b480      	push	{r7}
 800471a:	b08d      	sub	sp, #52	; 0x34
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	7b1b      	ldrb	r3, [r3, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 808e 	bne.w	8004848 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d044      	beq.n	80047be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	81bb      	strh	r3, [r7, #12]
 8004742:	89bb      	ldrh	r3, [r7, #12]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01b      	beq.n	8004784 <USB_DeactivateEndpoint+0x6c>
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	817b      	strh	r3, [r7, #10]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479a:	813b      	strh	r3, [r7, #8]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	893b      	ldrh	r3, [r7, #8]
 80047a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]
 80047bc:	e192      	b.n	8004ae4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	827b      	strh	r3, [r7, #18]
 80047cc:	8a7b      	ldrh	r3, [r7, #18]
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01b      	beq.n	800480e <USB_DeactivateEndpoint+0xf6>
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ec:	823b      	strh	r3, [r7, #16]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	8a3b      	ldrh	r3, [r7, #16]
 80047fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480a:	b29b      	uxth	r3, r3
 800480c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004824:	81fb      	strh	r3, [r7, #14]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	441a      	add	r2, r3
 8004830:	89fb      	ldrh	r3, [r7, #14]
 8004832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004842:	b29b      	uxth	r3, r3
 8004844:	8013      	strh	r3, [r2, #0]
 8004846:	e14d      	b.n	8004ae4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 80a5 	bne.w	800499c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	843b      	strh	r3, [r7, #32]
 8004860:	8c3b      	ldrh	r3, [r7, #32]
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01b      	beq.n	80048a2 <USB_DeactivateEndpoint+0x18a>
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	83fb      	strh	r3, [r7, #30]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	8bfb      	ldrh	r3, [r7, #30]
 800488e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	83bb      	strh	r3, [r7, #28]
 80048b0:	8bbb      	ldrh	r3, [r7, #28]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01b      	beq.n	80048f2 <USB_DeactivateEndpoint+0x1da>
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	837b      	strh	r3, [r7, #26]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	8b7b      	ldrh	r3, [r7, #26]
 80048de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004908:	833b      	strh	r3, [r7, #24]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	8b3b      	ldrh	r3, [r7, #24]
 8004916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004940:	82fb      	strh	r3, [r7, #22]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8afb      	ldrh	r3, [r7, #22]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004978:	82bb      	strh	r3, [r7, #20]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	8abb      	ldrh	r3, [r7, #20]
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
 800499a:	e0a3      	b.n	8004ae4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <USB_DeactivateEndpoint+0x2d4>
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80049fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01b      	beq.n	8004a3c <USB_DeactivateEndpoint+0x324>
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3734      	adds	r7, #52	; 0x34
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b0c4      	sub	sp, #272	; 0x110
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	6018      	str	r0, [r3, #0]
 8004afc:	463b      	mov	r3, r7
 8004afe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b00:	463b      	mov	r3, r7
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	f040 8566 	bne.w	80055d8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	463b      	mov	r3, r7
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d905      	bls.n	8004b28 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004b1c:	463b      	mov	r3, r7
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004b26:	e004      	b.n	8004b32 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004b28:	463b      	mov	r3, r7
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b32:	463b      	mov	r3, r7
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	7b1b      	ldrb	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d12c      	bne.n	8004b96 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6959      	ldr	r1, [r3, #20]
 8004b42:	463b      	mov	r3, r7
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	88da      	ldrh	r2, [r3, #6]
 8004b48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	1d38      	adds	r0, r7, #4
 8004b50:	6800      	ldr	r0, [r0, #0]
 8004b52:	f001 fa43 	bl	8005fdc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	00da      	lsls	r2, r3, #3
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004b7e:	f107 0310 	add.w	r3, r7, #16
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	f107 0310 	add.w	r3, r7, #16
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	f000 bcec 	b.w	800556e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b96:	463b      	mov	r3, r7
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	78db      	ldrb	r3, [r3, #3]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	f040 8356 	bne.w	800524e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	463b      	mov	r3, r7
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	f240 82fa 	bls.w	80051a8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	463b      	mov	r3, r7
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c02:	463b      	mov	r3, r7
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c0c:	1ad2      	subs	r2, r2, r3
 8004c0e:	463b      	mov	r3, r7
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c14:	1d3b      	adds	r3, r7, #4
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	463b      	mov	r3, r7
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 815e 	beq.w	8004eec <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
 8004c36:	463b      	mov	r3, r7
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d164      	bne.n	8004d0a <USB_EPStartXfer+0x218>
 8004c40:	1d3b      	adds	r3, r7, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	4413      	add	r3, r2
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c58:	463b      	mov	r3, r7
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	4413      	add	r3, r2
 8004c64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d112      	bne.n	8004c98 <USB_EPStartXfer+0x1a6>
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	801a      	strh	r2, [r3, #0]
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	e054      	b.n	8004d42 <USB_EPStartXfer+0x250>
 8004c98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c9e:	d817      	bhi.n	8004cd0 <USB_EPStartXfer+0x1de>
 8004ca0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004caa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <USB_EPStartXfer+0x1ce>
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	029b      	lsls	r3, r3, #10
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e038      	b.n	8004d42 <USB_EPStartXfer+0x250>
 8004cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <USB_EPStartXfer+0x1fe>
 8004ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e01b      	b.n	8004d42 <USB_EPStartXfer+0x250>
 8004d0a:	463b      	mov	r3, r7
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d116      	bne.n	8004d42 <USB_EPStartXfer+0x250>
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	4413      	add	r3, r2
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	00da      	lsls	r2, r3, #3
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	4413      	add	r3, r2
 8004d32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d36:	633b      	str	r3, [r7, #48]	; 0x30
 8004d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d42:	463b      	mov	r3, r7
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	895b      	ldrh	r3, [r3, #10]
 8004d48:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6959      	ldr	r1, [r3, #20]
 8004d52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004d5c:	1d38      	adds	r0, r7, #4
 8004d5e:	6800      	ldr	r0, [r0, #0]
 8004d60:	f001 f93c 	bl	8005fdc <USB_WritePMA>
            ep->xfer_buff += len;
 8004d64:	463b      	mov	r3, r7
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d6e:	441a      	add	r2, r3
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d76:	463b      	mov	r3, r7
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d90e      	bls.n	8004da4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8004d86:	463b      	mov	r3, r7
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8004d90:	463b      	mov	r3, r7
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d9a:	1ad2      	subs	r2, r2, r3
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	621a      	str	r2, [r3, #32]
 8004da2:	e008      	b.n	8004db6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004da4:	463b      	mov	r3, r7
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8004dae:	463b      	mov	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004db6:	463b      	mov	r3, r7
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d164      	bne.n	8004e8a <USB_EPStartXfer+0x398>
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	463b      	mov	r3, r7
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	00da      	lsls	r2, r3, #3
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d112      	bne.n	8004e18 <USB_EPStartXfer+0x326>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	e057      	b.n	8004ec8 <USB_EPStartXfer+0x3d6>
 8004e18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e1e:	d817      	bhi.n	8004e50 <USB_EPStartXfer+0x35e>
 8004e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <USB_EPStartXfer+0x34e>
 8004e36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	029b      	lsls	r3, r3, #10
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	e03b      	b.n	8004ec8 <USB_EPStartXfer+0x3d6>
 8004e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <USB_EPStartXfer+0x37e>
 8004e66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	029b      	lsls	r3, r3, #10
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e01e      	b.n	8004ec8 <USB_EPStartXfer+0x3d6>
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d119      	bne.n	8004ec8 <USB_EPStartXfer+0x3d6>
 8004e94:	1d3b      	adds	r3, r7, #4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	4413      	add	r3, r2
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	00da      	lsls	r2, r3, #3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ebc:	623b      	str	r3, [r7, #32]
 8004ebe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ec8:	463b      	mov	r3, r7
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	891b      	ldrh	r3, [r3, #8]
 8004ece:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6959      	ldr	r1, [r3, #20]
 8004ed8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004ee2:	1d38      	adds	r0, r7, #4
 8004ee4:	6800      	ldr	r0, [r0, #0]
 8004ee6:	f001 f879 	bl	8005fdc <USB_WritePMA>
 8004eea:	e340      	b.n	800556e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d164      	bne.n	8004fc0 <USB_EPStartXfer+0x4ce>
 8004ef6:	1d3b      	adds	r3, r7, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efc:	1d3b      	adds	r3, r7, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	4413      	add	r3, r2
 8004f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0e:	463b      	mov	r3, r7
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	00da      	lsls	r2, r3, #3
 8004f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f18:	4413      	add	r3, r2
 8004f1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d112      	bne.n	8004f4e <USB_EPStartXfer+0x45c>
 8004f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e057      	b.n	8004ffe <USB_EPStartXfer+0x50c>
 8004f4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f52:	2b3e      	cmp	r3, #62	; 0x3e
 8004f54:	d817      	bhi.n	8004f86 <USB_EPStartXfer+0x494>
 8004f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <USB_EPStartXfer+0x484>
 8004f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f70:	3301      	adds	r3, #1
 8004f72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	029b      	lsls	r3, r3, #10
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	e03b      	b.n	8004ffe <USB_EPStartXfer+0x50c>
 8004f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <USB_EPStartXfer+0x4b4>
 8004f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	029b      	lsls	r3, r3, #10
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e01e      	b.n	8004ffe <USB_EPStartXfer+0x50c>
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d119      	bne.n	8004ffe <USB_EPStartXfer+0x50c>
 8004fca:	1d3b      	adds	r3, r7, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	657b      	str	r3, [r7, #84]	; 0x54
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fde:	4413      	add	r3, r2
 8004fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	00da      	lsls	r2, r3, #3
 8004fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fec:	4413      	add	r3, r2
 8004fee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ffe:	463b      	mov	r3, r7
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	891b      	ldrh	r3, [r3, #8]
 8005004:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005008:	463b      	mov	r3, r7
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6959      	ldr	r1, [r3, #20]
 800500e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005012:	b29b      	uxth	r3, r3
 8005014:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005018:	1d38      	adds	r0, r7, #4
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	f000 ffde 	bl	8005fdc <USB_WritePMA>
            ep->xfer_buff += len;
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800502a:	441a      	add	r2, r3
 800502c:	463b      	mov	r3, r7
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005032:	463b      	mov	r3, r7
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	463b      	mov	r3, r7
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d90e      	bls.n	8005060 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800504c:	463b      	mov	r3, r7
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	621a      	str	r2, [r3, #32]
 800505e:	e008      	b.n	8005072 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	647b      	str	r3, [r7, #68]	; 0x44
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d164      	bne.n	800514c <USB_EPStartXfer+0x65a>
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005090:	b29b      	uxth	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005096:	4413      	add	r3, r2
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	00da      	lsls	r2, r3, #3
 80050a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a4:	4413      	add	r3, r2
 80050a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d112      	bne.n	80050da <USB_EPStartXfer+0x5e8>
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050be:	b29a      	uxth	r2, r3
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	e054      	b.n	8005184 <USB_EPStartXfer+0x692>
 80050da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050de:	2b3e      	cmp	r3, #62	; 0x3e
 80050e0:	d817      	bhi.n	8005112 <USB_EPStartXfer+0x620>
 80050e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <USB_EPStartXfer+0x610>
 80050f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050fc:	3301      	adds	r3, #1
 80050fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005106:	b29b      	uxth	r3, r3
 8005108:	029b      	lsls	r3, r3, #10
 800510a:	b29a      	uxth	r2, r3
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e038      	b.n	8005184 <USB_EPStartXfer+0x692>
 8005112:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800511c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <USB_EPStartXfer+0x640>
 8005128:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800512c:	3b01      	subs	r3, #1
 800512e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005136:	b29b      	uxth	r3, r3
 8005138:	029b      	lsls	r3, r3, #10
 800513a:	b29b      	uxth	r3, r3
 800513c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005144:	b29a      	uxth	r2, r3
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e01b      	b.n	8005184 <USB_EPStartXfer+0x692>
 800514c:	463b      	mov	r3, r7
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d116      	bne.n	8005184 <USB_EPStartXfer+0x692>
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005164:	4413      	add	r3, r2
 8005166:	647b      	str	r3, [r7, #68]	; 0x44
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	00da      	lsls	r2, r3, #3
 8005170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005172:	4413      	add	r3, r2
 8005174:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
 800517a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800517e:	b29a      	uxth	r2, r3
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	895b      	ldrh	r3, [r3, #10]
 800518a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6959      	ldr	r1, [r3, #20]
 8005194:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005198:	b29b      	uxth	r3, r3
 800519a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800519e:	1d38      	adds	r0, r7, #4
 80051a0:	6800      	ldr	r0, [r0, #0]
 80051a2:	f000 ff1b 	bl	8005fdc <USB_WritePMA>
 80051a6:	e1e2      	b.n	800556e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80051a8:	463b      	mov	r3, r7
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	463b      	mov	r3, r7
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80051e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	663b      	str	r3, [r7, #96]	; 0x60
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800520a:	4413      	add	r3, r2
 800520c:	663b      	str	r3, [r7, #96]	; 0x60
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	00da      	lsls	r2, r3, #3
 8005216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005218:	4413      	add	r3, r2
 800521a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800521e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005220:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005224:	b29a      	uxth	r2, r3
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800522a:	463b      	mov	r3, r7
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	891b      	ldrh	r3, [r3, #8]
 8005230:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6959      	ldr	r1, [r3, #20]
 800523a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800523e:	b29b      	uxth	r3, r3
 8005240:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005244:	1d38      	adds	r0, r7, #4
 8005246:	6800      	ldr	r0, [r0, #0]
 8005248:	f000 fec8 	bl	8005fdc <USB_WritePMA>
 800524c:	e18f      	b.n	800556e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800524e:	1d3b      	adds	r3, r7, #4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	463b      	mov	r3, r7
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 808f 	beq.w	8005388 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800526a:	1d3b      	adds	r3, r7, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d164      	bne.n	8005344 <USB_EPStartXfer+0x852>
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	673b      	str	r3, [r7, #112]	; 0x70
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005288:	b29b      	uxth	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800528e:	4413      	add	r3, r2
 8005290:	673b      	str	r3, [r7, #112]	; 0x70
 8005292:	463b      	mov	r3, r7
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	00da      	lsls	r2, r3, #3
 800529a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529c:	4413      	add	r3, r2
 800529e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d112      	bne.n	80052d2 <USB_EPStartXfer+0x7e0>
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	e054      	b.n	800537c <USB_EPStartXfer+0x88a>
 80052d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052d6:	2b3e      	cmp	r3, #62	; 0x3e
 80052d8:	d817      	bhi.n	800530a <USB_EPStartXfer+0x818>
 80052da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <USB_EPStartXfer+0x808>
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	3301      	adds	r3, #1
 80052f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	b29b      	uxth	r3, r3
 8005300:	029b      	lsls	r3, r3, #10
 8005302:	b29a      	uxth	r2, r3
 8005304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	e038      	b.n	800537c <USB_EPStartXfer+0x88a>
 800530a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005314:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <USB_EPStartXfer+0x838>
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	3b01      	subs	r3, #1
 8005326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	b29b      	uxth	r3, r3
 8005330:	029b      	lsls	r3, r3, #10
 8005332:	b29b      	uxth	r3, r3
 8005334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533c:	b29a      	uxth	r2, r3
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	e01b      	b.n	800537c <USB_EPStartXfer+0x88a>
 8005344:	463b      	mov	r3, r7
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d116      	bne.n	800537c <USB_EPStartXfer+0x88a>
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535c:	4413      	add	r3, r2
 800535e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005360:	463b      	mov	r3, r7
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	00da      	lsls	r2, r3, #3
 8005368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536a:	4413      	add	r3, r2
 800536c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005370:	677b      	str	r3, [r7, #116]	; 0x74
 8005372:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005376:	b29a      	uxth	r2, r3
 8005378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800537c:	463b      	mov	r3, r7
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	895b      	ldrh	r3, [r3, #10]
 8005382:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005386:	e097      	b.n	80054b8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d168      	bne.n	8005464 <USB_EPStartXfer+0x972>
 8005392:	1d3b      	adds	r3, r7, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800539a:	1d3b      	adds	r3, r7, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053aa:	4413      	add	r3, r2
 80053ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053b0:	463b      	mov	r3, r7
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	00da      	lsls	r2, r3, #3
 80053b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053bc:	4413      	add	r3, r2
 80053be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d112      	bne.n	80053f2 <USB_EPStartXfer+0x900>
 80053cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e05d      	b.n	80054ae <USB_EPStartXfer+0x9bc>
 80053f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053f6:	2b3e      	cmp	r3, #62	; 0x3e
 80053f8:	d817      	bhi.n	800542a <USB_EPStartXfer+0x938>
 80053fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <USB_EPStartXfer+0x928>
 8005410:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005414:	3301      	adds	r3, #1
 8005416:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800541a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29a      	uxth	r2, r3
 8005424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e041      	b.n	80054ae <USB_EPStartXfer+0x9bc>
 800542a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005434:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <USB_EPStartXfer+0x958>
 8005440:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005444:	3b01      	subs	r3, #1
 8005446:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800544a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800544e:	b29b      	uxth	r3, r3
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	b29b      	uxth	r3, r3
 8005454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545c:	b29a      	uxth	r2, r3
 800545e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e024      	b.n	80054ae <USB_EPStartXfer+0x9bc>
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d11f      	bne.n	80054ae <USB_EPStartXfer+0x9bc>
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005486:	4413      	add	r3, r2
 8005488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	00da      	lsls	r2, r3, #3
 8005494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005498:	4413      	add	r3, r2
 800549a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800549e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	891b      	ldrh	r3, [r3, #8]
 80054b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6959      	ldr	r1, [r3, #20]
 80054be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80054c8:	1d38      	adds	r0, r7, #4
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	f000 fd86 	bl	8005fdc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d122      	bne.n	8005520 <USB_EPStartXfer+0xa2e>
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	463b      	mov	r3, r7
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80054f8:	1d3b      	adds	r3, r7, #4
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	463b      	mov	r3, r7
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]
 800551e:	e026      	b.n	800556e <USB_EPStartXfer+0xa7c>
 8005520:	463b      	mov	r3, r7
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d121      	bne.n	800556e <USB_EPStartXfer+0xa7c>
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	463b      	mov	r3, r7
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	463b      	mov	r3, r7
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800555a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556a:	b29b      	uxth	r3, r3
 800556c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800556e:	1d3b      	adds	r3, r7, #4
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f107 020e 	add.w	r2, r7, #14
 8005584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	8013      	strh	r3, [r2, #0]
 800558e:	f107 030e 	add.w	r3, r7, #14
 8005592:	f107 020e 	add.w	r2, r7, #14
 8005596:	8812      	ldrh	r2, [r2, #0]
 8005598:	f082 0210 	eor.w	r2, r2, #16
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	f107 030e 	add.w	r3, r7, #14
 80055a2:	f107 020e 	add.w	r2, r7, #14
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	f082 0220 	eor.w	r2, r2, #32
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	463b      	mov	r3, r7
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	f107 030e 	add.w	r3, r7, #14
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]
 80055d6:	e3b5      	b.n	8005d44 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	7b1b      	ldrb	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 8090 	bne.w	8005704 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d90e      	bls.n	8005612 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005608:	1ad2      	subs	r2, r2, r3
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	619a      	str	r2, [r3, #24]
 8005610:	e008      	b.n	8005624 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8005612:	463b      	mov	r3, r7
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2200      	movs	r2, #0
 8005622:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800563c:	4413      	add	r3, r2
 800563e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	00da      	lsls	r2, r3, #3
 800564a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800564e:	4413      	add	r3, r2
 8005650:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005654:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005658:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800565c:	2b00      	cmp	r3, #0
 800565e:	d116      	bne.n	800568e <USB_EPStartXfer+0xb9c>
 8005660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800566c:	b29a      	uxth	r2, r3
 800566e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e32c      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
 800568e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005692:	2b3e      	cmp	r3, #62	; 0x3e
 8005694:	d818      	bhi.n	80056c8 <USB_EPStartXfer+0xbd6>
 8005696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <USB_EPStartXfer+0xbc4>
 80056ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056b0:	3301      	adds	r3, #1
 80056b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	029b      	lsls	r3, r3, #10
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e30f      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
 80056c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <USB_EPStartXfer+0xbf6>
 80056de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e2f1      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	78db      	ldrb	r3, [r3, #3]
 800570a:	2b02      	cmp	r3, #2
 800570c:	f040 818f 	bne.w	8005a2e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005710:	463b      	mov	r3, r7
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d175      	bne.n	8005806 <USB_EPStartXfer+0xd14>
 800571a:	1d3b      	adds	r3, r7, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572a:	b29b      	uxth	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005732:	4413      	add	r3, r2
 8005734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	00da      	lsls	r2, r3, #3
 8005740:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005744:	4413      	add	r3, r2
 8005746:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800574a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <USB_EPStartXfer+0xc94>
 8005758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005764:	b29a      	uxth	r2, r3
 8005766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577c:	b29a      	uxth	r2, r3
 800577e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	e065      	b.n	8005852 <USB_EPStartXfer+0xd60>
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b3e      	cmp	r3, #62	; 0x3e
 800578e:	d81a      	bhi.n	80057c6 <USB_EPStartXfer+0xcd4>
 8005790:	463b      	mov	r3, r7
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <USB_EPStartXfer+0xcc2>
 80057aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057ae:	3301      	adds	r3, #1
 80057b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	e045      	b.n	8005852 <USB_EPStartXfer+0xd60>
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <USB_EPStartXfer+0xcf8>
 80057e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057e4:	3b01      	subs	r3, #1
 80057e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	029b      	lsls	r3, r3, #10
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e025      	b.n	8005852 <USB_EPStartXfer+0xd60>
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d120      	bne.n	8005852 <USB_EPStartXfer+0xd60>
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005820:	b29b      	uxth	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005828:	4413      	add	r3, r2
 800582a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	00da      	lsls	r2, r3, #3
 8005836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800583a:	4413      	add	r3, r2
 800583c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	b29a      	uxth	r2, r3
 800584c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d175      	bne.n	8005950 <USB_EPStartXfer+0xe5e>
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800586c:	1d3b      	adds	r3, r7, #4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800587c:	4413      	add	r3, r2
 800587e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	00da      	lsls	r2, r3, #3
 800588a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800588e:	4413      	add	r3, r2
 8005890:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005898:	463b      	mov	r3, r7
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d116      	bne.n	80058d0 <USB_EPStartXfer+0xdde>
 80058a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e061      	b.n	8005994 <USB_EPStartXfer+0xea2>
 80058d0:	463b      	mov	r3, r7
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b3e      	cmp	r3, #62	; 0x3e
 80058d8:	d81a      	bhi.n	8005910 <USB_EPStartXfer+0xe1e>
 80058da:	463b      	mov	r3, r7
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <USB_EPStartXfer+0xe0c>
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	b29b      	uxth	r3, r3
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	b29a      	uxth	r2, r3
 8005908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e041      	b.n	8005994 <USB_EPStartXfer+0xea2>
 8005910:	463b      	mov	r3, r7
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <USB_EPStartXfer+0xe42>
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	3b01      	subs	r3, #1
 8005930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	b29b      	uxth	r3, r3
 800593a:	029b      	lsls	r3, r3, #10
 800593c:	b29b      	uxth	r3, r3
 800593e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005946:	b29a      	uxth	r2, r3
 8005948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	e021      	b.n	8005994 <USB_EPStartXfer+0xea2>
 8005950:	463b      	mov	r3, r7
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d11c      	bne.n	8005994 <USB_EPStartXfer+0xea2>
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800596a:	4413      	add	r3, r2
 800596c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	00da      	lsls	r2, r3, #3
 8005978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800597c:	4413      	add	r3, r2
 800597e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	b29a      	uxth	r2, r3
 800598e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005992:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 81a4 	beq.w	8005ce8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	463b      	mov	r3, r7
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <USB_EPStartXfer+0xeda>
 80059c0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10d      	bne.n	80059e8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059cc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f040 8187 	bne.w	8005ce8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 8180 	bne.w	8005ce8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005a06:	1d3b      	adds	r3, r7, #4
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
 8005a2c:	e15c      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	78db      	ldrb	r3, [r3, #3]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	f040 8155 	bne.w	8005ce4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d90e      	bls.n	8005a68 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	619a      	str	r2, [r3, #24]
 8005a66:	e008      	b.n	8005a7a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d16f      	bne.n	8005b64 <USB_EPStartXfer+0x1072>
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	00da      	lsls	r2, r3, #3
 8005aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005aae:	4413      	add	r3, r2
 8005ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ab8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d116      	bne.n	8005aee <USB_EPStartXfer+0xffc>
 8005ac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e05f      	b.n	8005bae <USB_EPStartXfer+0x10bc>
 8005aee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005af2:	2b3e      	cmp	r3, #62	; 0x3e
 8005af4:	d818      	bhi.n	8005b28 <USB_EPStartXfer+0x1036>
 8005af6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <USB_EPStartXfer+0x1024>
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b10:	3301      	adds	r3, #1
 8005b12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e042      	b.n	8005bae <USB_EPStartXfer+0x10bc>
 8005b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <USB_EPStartXfer+0x1056>
 8005b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b42:	3b01      	subs	r3, #1
 8005b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	029b      	lsls	r3, r3, #10
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	e024      	b.n	8005bae <USB_EPStartXfer+0x10bc>
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d11f      	bne.n	8005bae <USB_EPStartXfer+0x10bc>
 8005b6e:	1d3b      	adds	r3, r7, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b86:	4413      	add	r3, r2
 8005b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	00da      	lsls	r2, r3, #3
 8005b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ba2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d16f      	bne.n	8005ca0 <USB_EPStartXfer+0x11ae>
 8005bc0:	1d3b      	adds	r3, r7, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bd8:	4413      	add	r3, r2
 8005bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bde:	463b      	mov	r3, r7
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	00da      	lsls	r2, r3, #3
 8005be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bea:	4413      	add	r3, r2
 8005bec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d116      	bne.n	8005c2a <USB_EPStartXfer+0x1138>
 8005bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e05e      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
 8005c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c30:	d818      	bhi.n	8005c64 <USB_EPStartXfer+0x1172>
 8005c32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <USB_EPStartXfer+0x1160>
 8005c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e041      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
 8005c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <USB_EPStartXfer+0x1192>
 8005c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	029b      	lsls	r3, r3, #10
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e023      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d11e      	bne.n	8005ce8 <USB_EPStartXfer+0x11f6>
 8005caa:	1d3b      	adds	r3, r7, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cba:	4413      	add	r3, r2
 8005cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	00da      	lsls	r2, r3, #3
 8005cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ccc:	4413      	add	r3, r2
 8005cce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	e001      	b.n	8005ce8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e02e      	b.n	8005d46 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d1a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d1e:	1d3b      	adds	r3, r7, #4
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d020      	beq.n	8005da4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d78:	81bb      	strh	r3, [r7, #12]
 8005d7a:	89bb      	ldrh	r3, [r7, #12]
 8005d7c:	f083 0310 	eor.w	r3, r3, #16
 8005d80:	81bb      	strh	r3, [r7, #12]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	441a      	add	r2, r3
 8005d8c:	89bb      	ldrh	r3, [r7, #12]
 8005d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8013      	strh	r3, [r2, #0]
 8005da2:	e01f      	b.n	8005de4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	81fb      	strh	r3, [r7, #14]
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dc2:	81fb      	strh	r3, [r7, #14]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	89fb      	ldrh	r3, [r7, #14]
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	7b1b      	ldrb	r3, [r3, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f040 809d 	bne.w	8005f40 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04c      	beq.n	8005ea8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	823b      	strh	r3, [r7, #16]
 8005e1c:	8a3b      	ldrh	r3, [r7, #16]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01b      	beq.n	8005e5e <USB_EPClearStall+0x6c>
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	81fb      	strh	r3, [r7, #14]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	441a      	add	r2, r3
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	78db      	ldrb	r3, [r3, #3]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d06c      	beq.n	8005f40 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	81bb      	strh	r3, [r7, #12]
 8005e7e:	89bb      	ldrh	r3, [r7, #12]
 8005e80:	f083 0320 	eor.w	r3, r3, #32
 8005e84:	81bb      	strh	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	89bb      	ldrh	r3, [r7, #12]
 8005e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]
 8005ea6:	e04b      	b.n	8005f40 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	82fb      	strh	r3, [r7, #22]
 8005eb6:	8afb      	ldrh	r3, [r7, #22]
 8005eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <USB_EPClearStall+0x106>
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	82bb      	strh	r3, [r7, #20]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	441a      	add	r2, r3
 8005ee2:	8abb      	ldrh	r3, [r7, #20]
 8005ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	827b      	strh	r3, [r7, #18]
 8005f10:	8a7b      	ldrh	r3, [r7, #18]
 8005f12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f16:	827b      	strh	r3, [r7, #18]
 8005f18:	8a7b      	ldrh	r3, [r7, #18]
 8005f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f1e:	827b      	strh	r3, [r7, #18]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	441a      	add	r2, r3
 8005f2a:	8a7b      	ldrh	r3, [r7, #18]
 8005f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d103      	bne.n	8005f68 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b08d      	sub	sp, #52	; 0x34
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	460b      	mov	r3, r1
 8005fec:	80fb      	strh	r3, [r7, #6]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ff2:	88bb      	ldrh	r3, [r7, #4]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006012:	e01b      	b.n	800604c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	3301      	adds	r3, #1
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	b29a      	uxth	r2, r3
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	3302      	adds	r3, #2
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	3301      	adds	r3, #1
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	3b01      	subs	r3, #1
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e0      	bne.n	8006014 <USB_WritePMA+0x38>
  }
}
 8006052:	bf00      	nop
 8006054:	3734      	adds	r7, #52	; 0x34
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800605e:	b480      	push	{r7}
 8006060:	b08b      	sub	sp, #44	; 0x2c
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	4611      	mov	r1, r2
 800606a:	461a      	mov	r2, r3
 800606c:	460b      	mov	r3, r1
 800606e:	80fb      	strh	r3, [r7, #6]
 8006070:	4613      	mov	r3, r2
 8006072:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006074:	88bb      	ldrh	r3, [r7, #4]
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	b29b      	uxth	r3, r3
 800607a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
 8006094:	e018      	b.n	80060c8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	3302      	adds	r3, #2
 80060a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	3301      	adds	r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	0a1b      	lsrs	r3, r3, #8
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3301      	adds	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	3b01      	subs	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e3      	bne.n	8006096 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80060ce:	88bb      	ldrh	r3, [r7, #4]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	701a      	strb	r2, [r3, #0]
  }
}
 80060ea:	bf00      	nop
 80060ec:	372c      	adds	r7, #44	; 0x2c
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006102:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006106:	f002 f9d1 	bl	80084ac <USBD_static_malloc>
 800610a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d105      	bne.n	800611e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800611a:	2302      	movs	r3, #2
 800611c:	e066      	b.n	80061ec <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	7c1b      	ldrb	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d119      	bne.n	8006162 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800612e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006132:	2202      	movs	r2, #2
 8006134:	2181      	movs	r1, #129	; 0x81
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f002 f85d 	bl	80081f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006146:	2202      	movs	r2, #2
 8006148:	2101      	movs	r1, #1
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f002 f853 	bl	80081f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2210      	movs	r2, #16
 800615c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006160:	e016      	b.n	8006190 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	2202      	movs	r2, #2
 8006166:	2181      	movs	r1, #129	; 0x81
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f002 f844 	bl	80081f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	2202      	movs	r2, #2
 8006178:	2101      	movs	r1, #1
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f002 f83b 	bl	80081f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2210      	movs	r2, #16
 800618c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006190:	2308      	movs	r3, #8
 8006192:	2203      	movs	r2, #3
 8006194:	2182      	movs	r1, #130	; 0x82
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f002 f82d 	bl	80081f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7c1b      	ldrb	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061d0:	2101      	movs	r1, #1
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f002 f8ff 	bl	80083d6 <USBD_LL_PrepareReceive>
 80061d8:	e007      	b.n	80061ea <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e0:	2340      	movs	r3, #64	; 0x40
 80061e2:	2101      	movs	r1, #1
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f002 f8f6 	bl	80083d6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006200:	2181      	movs	r1, #129	; 0x81
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f002 f81d 	bl	8008242 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800620e:	2101      	movs	r1, #1
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f002 f816 	bl	8008242 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800621e:	2182      	movs	r1, #130	; 0x82
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f002 f80e 	bl	8008242 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00e      	beq.n	800625e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006250:	4618      	mov	r0, r3
 8006252:	f002 f939 	bl	80084c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006278:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800628e:	2b00      	cmp	r3, #0
 8006290:	d03a      	beq.n	8006308 <USBD_CDC_Setup+0xa0>
 8006292:	2b20      	cmp	r3, #32
 8006294:	f040 8097 	bne.w	80063c6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	88db      	ldrh	r3, [r3, #6]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d029      	beq.n	80062f4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da11      	bge.n	80062ce <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80062b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	88d2      	ldrh	r2, [r2, #6]
 80062bc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80062be:	6939      	ldr	r1, [r7, #16]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	88db      	ldrh	r3, [r3, #6]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fa8d 	bl	80077e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80062cc:	e082      	b.n	80063d4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	785a      	ldrb	r2, [r3, #1]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80062e4:	6939      	ldr	r1, [r7, #16]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	88db      	ldrh	r3, [r3, #6]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 faa6 	bl	800783e <USBD_CtlPrepareRx>
      break;
 80062f2:	e06f      	b.n	80063d4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	7850      	ldrb	r0, [r2, #1]
 8006300:	2200      	movs	r2, #0
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	4798      	blx	r3
      break;
 8006306:	e065      	b.n	80063d4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b0b      	cmp	r3, #11
 800630e:	d84f      	bhi.n	80063b0 <USBD_CDC_Setup+0x148>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <USBD_CDC_Setup+0xb0>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	08006349 	.word	0x08006349
 800631c:	080063bf 	.word	0x080063bf
 8006320:	080063b1 	.word	0x080063b1
 8006324:	080063b1 	.word	0x080063b1
 8006328:	080063b1 	.word	0x080063b1
 800632c:	080063b1 	.word	0x080063b1
 8006330:	080063b1 	.word	0x080063b1
 8006334:	080063b1 	.word	0x080063b1
 8006338:	080063b1 	.word	0x080063b1
 800633c:	080063b1 	.word	0x080063b1
 8006340:	08006371 	.word	0x08006371
 8006344:	08006399 	.word	0x08006399
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634e:	2b03      	cmp	r3, #3
 8006350:	d107      	bne.n	8006362 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006352:	f107 030c 	add.w	r3, r7, #12
 8006356:	2202      	movs	r2, #2
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fa43 	bl	80077e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006360:	e030      	b.n	80063c4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f9cd 	bl	8007704 <USBD_CtlError>
            ret = USBD_FAIL;
 800636a:	2303      	movs	r3, #3
 800636c:	75fb      	strb	r3, [r7, #23]
          break;
 800636e:	e029      	b.n	80063c4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006376:	2b03      	cmp	r3, #3
 8006378:	d107      	bne.n	800638a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800637a:	f107 030f 	add.w	r3, r7, #15
 800637e:	2201      	movs	r2, #1
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fa2f 	bl	80077e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006388:	e01c      	b.n	80063c4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f9b9 	bl	8007704 <USBD_CtlError>
            ret = USBD_FAIL;
 8006392:	2303      	movs	r3, #3
 8006394:	75fb      	strb	r3, [r7, #23]
          break;
 8006396:	e015      	b.n	80063c4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d00f      	beq.n	80063c2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f9ad 	bl	8007704 <USBD_CtlError>
            ret = USBD_FAIL;
 80063aa:	2303      	movs	r3, #3
 80063ac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063ae:	e008      	b.n	80063c2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f9a6 	bl	8007704 <USBD_CtlError>
          ret = USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	75fb      	strb	r3, [r7, #23]
          break;
 80063bc:	e002      	b.n	80063c4 <USBD_CDC_Setup+0x15c>
          break;
 80063be:	bf00      	nop
 80063c0:	e008      	b.n	80063d4 <USBD_CDC_Setup+0x16c>
          break;
 80063c2:	bf00      	nop
      }
      break;
 80063c4:	e006      	b.n	80063d4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f99b 	bl	8007704 <USBD_CtlError>
      ret = USBD_FAIL;
 80063ce:	2303      	movs	r3, #3
 80063d0:	75fb      	strb	r3, [r7, #23]
      break;
 80063d2:	bf00      	nop
  }

  return (uint8_t)ret;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop

080063e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063fe:	2303      	movs	r3, #3
 8006400:	e04f      	b.n	80064a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006408:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3318      	adds	r3, #24
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d029      	beq.n	8006474 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	3318      	adds	r3, #24
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	78f9      	ldrb	r1, [r7, #3]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	460b      	mov	r3, r1
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4403      	add	r3, r0
 8006440:	3338      	adds	r3, #56	; 0x38
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	fbb2 f1f3 	udiv	r1, r2, r3
 8006448:	fb03 f301 	mul.w	r3, r3, r1
 800644c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800644e:	2b00      	cmp	r3, #0
 8006450:	d110      	bne.n	8006474 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	3318      	adds	r3, #24
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006466:	78f9      	ldrb	r1, [r7, #3]
 8006468:	2300      	movs	r3, #0
 800646a:	2200      	movs	r2, #0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 ff91 	bl	8008394 <USBD_LL_Transmit>
 8006472:	e015      	b.n	80064a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800649c:	78fa      	ldrb	r2, [r7, #3]
 800649e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e015      	b.n	80064f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 ffa1 	bl	8008418 <USBD_LL_GetRxDataSize>
 80064d6:	4602      	mov	r2, r0
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064f2:	4611      	mov	r1, r2
 80064f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800650e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d015      	beq.n	8006546 <USBD_CDC_EP0_RxReady+0x46>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006520:	2bff      	cmp	r3, #255	; 0xff
 8006522:	d010      	beq.n	8006546 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006532:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800653a:	b292      	uxth	r2, r2
 800653c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	; 0xff
 8006542:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2243      	movs	r2, #67	; 0x43
 800655c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800655e:	4b03      	ldr	r3, [pc, #12]	; (800656c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000094 	.word	0x20000094

08006570 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2243      	movs	r2, #67	; 0x43
 800657c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800657e:	4b03      	ldr	r3, [pc, #12]	; (800658c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20000050 	.word	0x20000050

08006590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2243      	movs	r2, #67	; 0x43
 800659c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800659e:	4b03      	ldr	r3, [pc, #12]	; (80065ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	200000d8 	.word	0x200000d8

080065b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	220a      	movs	r2, #10
 80065bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065be:	4b03      	ldr	r3, [pc, #12]	; (80065cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	2000000c 	.word	0x2000000c

080065d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e004      	b.n	80065ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006662:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006672:	2303      	movs	r3, #3
 8006674:	e01a      	b.n	80066ac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800667c:	2b00      	cmp	r3, #0
 800667e:	d114      	bne.n	80066aa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2201      	movs	r2, #1
 8006684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800669e:	2181      	movs	r1, #129	; 0x81
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 fe77 	bl	8008394 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e016      	b.n	8006700 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7c1b      	ldrb	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066e4:	2101      	movs	r1, #1
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 fe75 	bl	80083d6 <USBD_LL_PrepareReceive>
 80066ec:	e007      	b.n	80066fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066f4:	2340      	movs	r3, #64	; 0x40
 80066f6:	2101      	movs	r1, #1
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fe6c 	bl	80083d6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800671c:	2303      	movs	r3, #3
 800671e:	e01f      	b.n	8006760 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	79fa      	ldrb	r2, [r7, #7]
 8006752:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 fcd3 	bl	8008100 <USBD_LL_Init>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800677c:	2303      	movs	r3, #3
 800677e:	e016      	b.n	80067ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	f107 020e 	add.w	r2, r7, #14
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
 80067a4:	4602      	mov	r2, r0
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fcfe 	bl	80081c0 <USBD_LL_Start>
 80067c4:	4603      	mov	r3, r0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	4611      	mov	r1, r2
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	4611      	mov	r1, r2
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
  }

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 ff16 	bl	8007690 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	2b01      	cmp	r3, #1
 8006886:	d00e      	beq.n	80068a6 <USBD_LL_SetupStage+0x5a>
 8006888:	2b01      	cmp	r3, #1
 800688a:	d302      	bcc.n	8006892 <USBD_LL_SetupStage+0x46>
 800688c:	2b02      	cmp	r3, #2
 800688e:	d014      	beq.n	80068ba <USBD_LL_SetupStage+0x6e>
 8006890:	e01d      	b.n	80068ce <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9d6 	bl	8006c4c <USBD_StdDevReq>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
      break;
 80068a4:	e020      	b.n	80068e8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa3a 	bl	8006d28 <USBD_StdItfReq>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
      break;
 80068b8:	e016      	b.n	80068e8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fa76 	bl	8006db4 <USBD_StdEPReq>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
      break;
 80068cc:	e00c      	b.n	80068e8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fccf 	bl	8008280 <USBD_LL_StallEP>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73fb      	strb	r3, [r7, #15]
      break;
 80068e6:	bf00      	nop
  }

  return ret;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	460b      	mov	r3, r1
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006900:	7afb      	ldrb	r3, [r7, #11]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d137      	bne.n	8006976 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800690c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006914:	2b03      	cmp	r3, #3
 8006916:	d14a      	bne.n	80069ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	429a      	cmp	r2, r3
 8006922:	d913      	bls.n	800694c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	1ad2      	subs	r2, r2, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	4293      	cmp	r3, r2
 800693c:	bf28      	it	cs
 800693e:	4613      	movcs	r3, r2
 8006940:	461a      	mov	r2, r3
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 ff97 	bl	8007878 <USBD_CtlContinueRx>
 800694a:	e030      	b.n	80069ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800695e:	2b03      	cmp	r3, #3
 8006960:	d105      	bne.n	800696e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 ff93 	bl	800789a <USBD_CtlSendStatus>
 8006974:	e01b      	b.n	80069ae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d013      	beq.n	80069aa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006988:	2b03      	cmp	r3, #3
 800698a:	d10e      	bne.n	80069aa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	7afa      	ldrb	r2, [r7, #11]
 8006996:	4611      	mov	r1, r2
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	4798      	blx	r3
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	e002      	b.n	80069b0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e000      	b.n	80069b0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	460b      	mov	r3, r1
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d16a      	bne.n	8006aa2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3314      	adds	r3, #20
 80069d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d155      	bne.n	8006a88 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d914      	bls.n	8006a12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 ff0c 	bl	800781c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a04:	2300      	movs	r3, #0
 8006a06:	2200      	movs	r2, #0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f001 fce3 	bl	80083d6 <USBD_LL_PrepareReceive>
 8006a10:	e03a      	b.n	8006a88 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d11c      	bne.n	8006a58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d316      	bcc.n	8006a58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d20f      	bcs.n	8006a58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 feed 	bl	800781c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2100      	movs	r1, #0
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f001 fcc0 	bl	80083d6 <USBD_LL_PrepareReceive>
 8006a56:	e017      	b.n	8006a88 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d105      	bne.n	8006a7a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f001 fbff 	bl	8008280 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 ff1c 	bl	80078c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d123      	bne.n	8006ada <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fe9b 	bl	80067ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006aa0:	e01b      	b.n	8006ada <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d013      	beq.n	8006ad6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d10e      	bne.n	8006ad6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	7afa      	ldrb	r2, [r7, #11]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	4798      	blx	r3
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	e002      	b.n	8006adc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e000      	b.n	8006adc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6852      	ldr	r2, [r2, #4]
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	4611      	mov	r1, r2
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fb61 	bl	80081f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2240      	movs	r2, #64	; 0x40
 8006b40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	2200      	movs	r2, #0
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fb53 	bl	80081f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	78fa      	ldrb	r2, [r7, #3]
 8006b76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d105      	bne.n	8006bce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d10b      	bne.n	8006c06 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	3301      	adds	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c2e:	8a3b      	ldrh	r3, [r7, #16]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	b21a      	sxth	r2, r3
 8006c34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	b21b      	sxth	r3, r3
 8006c3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d004      	beq.n	8006c70 <USBD_StdDevReq+0x24>
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d002      	beq.n	8006c70 <USBD_StdDevReq+0x24>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <USBD_StdDevReq+0x38>
 8006c6e:	e050      	b.n	8006d12 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]
    break;
 8006c82:	e04b      	b.n	8006d1c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d83c      	bhi.n	8006d06 <USBD_StdDevReq+0xba>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <USBD_StdDevReq+0x48>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006cfd 	.word	0x08006cfd
 8006c9c:	08006d07 	.word	0x08006d07
 8006ca0:	08006cf3 	.word	0x08006cf3
 8006ca4:	08006d07 	.word	0x08006d07
 8006ca8:	08006cc7 	.word	0x08006cc7
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006d07 	.word	0x08006d07
 8006cb4:	08006cdf 	.word	0x08006cdf
 8006cb8:	08006cd1 	.word	0x08006cd1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9d0 	bl	8007064 <USBD_GetDescriptor>
      break;
 8006cc4:	e024      	b.n	8006d10 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fb5f 	bl	800738c <USBD_SetAddress>
      break;
 8006cce:	e01f      	b.n	8006d10 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fb9c 	bl	8007410 <USBD_SetConfig>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73fb      	strb	r3, [r7, #15]
      break;
 8006cdc:	e018      	b.n	8006d10 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fc39 	bl	8007558 <USBD_GetConfig>
      break;
 8006ce6:	e013      	b.n	8006d10 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fc68 	bl	80075c0 <USBD_GetStatus>
      break;
 8006cf0:	e00e      	b.n	8006d10 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fc96 	bl	8007626 <USBD_SetFeature>
      break;
 8006cfa:	e009      	b.n	8006d10 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fca5 	bl	800764e <USBD_ClrFeature>
      break;
 8006d04:	e004      	b.n	8006d10 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fcfb 	bl	8007704 <USBD_CtlError>
      break;
 8006d0e:	bf00      	nop
    }
    break;
 8006d10:	e004      	b.n	8006d1c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fcf5 	bl	8007704 <USBD_CtlError>
    break;
 8006d1a:	bf00      	nop
  }

  return ret;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop

08006d28 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d003      	beq.n	8006d4a <USBD_StdItfReq+0x22>
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d001      	beq.n	8006d4a <USBD_StdItfReq+0x22>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d12a      	bne.n	8006da0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d50:	3b01      	subs	r3, #1
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d81d      	bhi.n	8006d92 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	889b      	ldrh	r3, [r3, #4]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d813      	bhi.n	8006d88 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	88db      	ldrh	r3, [r3, #6]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d110      	bne.n	8006d9c <USBD_StdItfReq+0x74>
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10d      	bne.n	8006d9c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fd8a 	bl	800789a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006d86:	e009      	b.n	8006d9c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fcba 	bl	8007704 <USBD_CtlError>
      break;
 8006d90:	e004      	b.n	8006d9c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fcb5 	bl	8007704 <USBD_CtlError>
      break;
 8006d9a:	e000      	b.n	8006d9e <USBD_StdItfReq+0x76>
      break;
 8006d9c:	bf00      	nop
    }
    break;
 8006d9e:	e004      	b.n	8006daa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fcae 	bl	8007704 <USBD_CtlError>
    break;
 8006da8:	bf00      	nop
  }

  return ret;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	889b      	ldrh	r3, [r3, #4]
 8006dc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dd0:	2b20      	cmp	r3, #32
 8006dd2:	d004      	beq.n	8006dde <USBD_StdEPReq+0x2a>
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d002      	beq.n	8006dde <USBD_StdEPReq+0x2a>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <USBD_StdEPReq+0x3e>
 8006ddc:	e137      	b.n	800704e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
    break;
 8006df0:	e132      	b.n	8007058 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d03e      	beq.n	8006e78 <USBD_StdEPReq+0xc4>
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d002      	beq.n	8006e04 <USBD_StdEPReq+0x50>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d079      	beq.n	8006ef6 <USBD_StdEPReq+0x142>
 8006e02:	e11e      	b.n	8007042 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d002      	beq.n	8006e14 <USBD_StdEPReq+0x60>
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d015      	beq.n	8006e3e <USBD_StdEPReq+0x8a>
 8006e12:	e02b      	b.n	8006e6c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00c      	beq.n	8006e34 <USBD_StdEPReq+0x80>
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d009      	beq.n	8006e34 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fa2b 	bl	8008280 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 fa27 	bl	8008280 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e32:	e020      	b.n	8006e76 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fc64 	bl	8007704 <USBD_CtlError>
        break;
 8006e3c:	e01b      	b.n	8006e76 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	885b      	ldrh	r3, [r3, #2]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10e      	bne.n	8006e64 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <USBD_StdEPReq+0xb0>
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d008      	beq.n	8006e64 <USBD_StdEPReq+0xb0>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	88db      	ldrh	r3, [r3, #6]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d104      	bne.n	8006e64 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fa0e 	bl	8008280 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fd18 	bl	800789a <USBD_CtlSendStatus>

        break;
 8006e6a:	e004      	b.n	8006e76 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fc48 	bl	8007704 <USBD_CtlError>
        break;
 8006e74:	bf00      	nop
      }
      break;
 8006e76:	e0e9      	b.n	800704c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d002      	beq.n	8006e88 <USBD_StdEPReq+0xd4>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d015      	beq.n	8006eb2 <USBD_StdEPReq+0xfe>
 8006e86:	e02f      	b.n	8006ee8 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <USBD_StdEPReq+0xf4>
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d009      	beq.n	8006ea8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f9f1 	bl	8008280 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e9e:	2180      	movs	r1, #128	; 0x80
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 f9ed 	bl	8008280 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006ea6:	e025      	b.n	8006ef4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fc2a 	bl	8007704 <USBD_CtlError>
        break;
 8006eb0:	e020      	b.n	8006ef4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	885b      	ldrh	r3, [r3, #2]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d11b      	bne.n	8006ef2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 f9f8 	bl	80082be <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fce3 	bl	800789a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ee6:	e004      	b.n	8006ef2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fc0a 	bl	8007704 <USBD_CtlError>
        break;
 8006ef0:	e000      	b.n	8006ef4 <USBD_StdEPReq+0x140>
        break;
 8006ef2:	bf00      	nop
      }
      break;
 8006ef4:	e0aa      	b.n	800704c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d002      	beq.n	8006f06 <USBD_StdEPReq+0x152>
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d032      	beq.n	8006f6a <USBD_StdEPReq+0x1b6>
 8006f04:	e097      	b.n	8007036 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <USBD_StdEPReq+0x168>
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b80      	cmp	r3, #128	; 0x80
 8006f10:	d004      	beq.n	8006f1c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fbf5 	bl	8007704 <USBD_CtlError>
          break;
 8006f1a:	e091      	b.n	8007040 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	da0b      	bge.n	8006f3c <USBD_StdEPReq+0x188>
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	3310      	adds	r3, #16
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	e00b      	b.n	8006f54 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4413      	add	r3, r2
 8006f52:	3304      	adds	r3, #4
 8006f54:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fc3f 	bl	80077e6 <USBD_CtlSendData>
        break;
 8006f68:	e06a      	b.n	8007040 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da11      	bge.n	8006f96 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	3324      	adds	r3, #36	; 0x24
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d117      	bne.n	8006fbc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fbb8 	bl	8007704 <USBD_CtlError>
            break;
 8006f94:	e054      	b.n	8007040 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fba5 	bl	8007704 <USBD_CtlError>
            break;
 8006fba:	e041      	b.n	8007040 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da0b      	bge.n	8006fdc <USBD_StdEPReq+0x228>
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	3310      	adds	r3, #16
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3304      	adds	r3, #4
 8006fda:	e00b      	b.n	8006ff4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <USBD_StdEPReq+0x24e>
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	2b80      	cmp	r3, #128	; 0x80
 8007000:	d103      	bne.n	800700a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	e00e      	b.n	8007028 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f974 	bl	80082fc <USBD_LL_IsStallEP>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2201      	movs	r2, #1
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e002      	b.n	8007028 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2202      	movs	r2, #2
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fbd9 	bl	80077e6 <USBD_CtlSendData>
          break;
 8007034:	e004      	b.n	8007040 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb63 	bl	8007704 <USBD_CtlError>
        break;
 800703e:	bf00      	nop
      }
      break;
 8007040:	e004      	b.n	800704c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fb5d 	bl	8007704 <USBD_CtlError>
      break;
 800704a:	bf00      	nop
    }
    break;
 800704c:	e004      	b.n	8007058 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fb57 	bl	8007704 <USBD_CtlError>
    break;
 8007056:	bf00      	nop
  }

  return ret;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	0a1b      	lsrs	r3, r3, #8
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b01      	subs	r3, #1
 8007084:	2b0e      	cmp	r3, #14
 8007086:	f200 8152 	bhi.w	800732e <USBD_GetDescriptor+0x2ca>
 800708a:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <USBD_GetDescriptor+0x2c>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	08007101 	.word	0x08007101
 8007094:	08007119 	.word	0x08007119
 8007098:	08007159 	.word	0x08007159
 800709c:	0800732f 	.word	0x0800732f
 80070a0:	0800732f 	.word	0x0800732f
 80070a4:	080072cf 	.word	0x080072cf
 80070a8:	080072fb 	.word	0x080072fb
 80070ac:	0800732f 	.word	0x0800732f
 80070b0:	0800732f 	.word	0x0800732f
 80070b4:	0800732f 	.word	0x0800732f
 80070b8:	0800732f 	.word	0x0800732f
 80070bc:	0800732f 	.word	0x0800732f
 80070c0:	0800732f 	.word	0x0800732f
 80070c4:	0800732f 	.word	0x0800732f
 80070c8:	080070cd 	.word	0x080070cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7c12      	ldrb	r2, [r2, #16]
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80070ee:	e126      	b.n	800733e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fb06 	bl	8007704 <USBD_CtlError>
      err++;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	3301      	adds	r3, #1
 80070fc:	72fb      	strb	r3, [r7, #11]
    break;
 80070fe:	e11e      	b.n	800733e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	7c12      	ldrb	r2, [r2, #16]
 800710c:	f107 0108 	add.w	r1, r7, #8
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
 8007114:	60f8      	str	r0, [r7, #12]
    break;
 8007116:	e112      	b.n	800733e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7c1b      	ldrb	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	f107 0208 	add.w	r2, r7, #8
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
 8007130:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	2202      	movs	r2, #2
 8007138:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800713a:	e100      	b.n	800733e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	f107 0208 	add.w	r2, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	2202      	movs	r2, #2
 8007154:	701a      	strb	r2, [r3, #0]
    break;
 8007156:	e0f2      	b.n	800733e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	885b      	ldrh	r3, [r3, #2]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b05      	cmp	r3, #5
 8007160:	f200 80ac 	bhi.w	80072bc <USBD_GetDescriptor+0x258>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <USBD_GetDescriptor+0x108>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	08007185 	.word	0x08007185
 8007170:	080071b9 	.word	0x080071b9
 8007174:	080071ed 	.word	0x080071ed
 8007178:	08007221 	.word	0x08007221
 800717c:	08007255 	.word	0x08007255
 8007180:	08007289 	.word	0x08007289
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7c12      	ldrb	r2, [r2, #16]
 800719c:	f107 0108 	add.w	r1, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071a6:	e091      	b.n	80072cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 faaa 	bl	8007704 <USBD_CtlError>
        err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
      break;
 80071b6:	e089      	b.n	80072cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071da:	e077      	b.n	80072cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa90 	bl	8007704 <USBD_CtlError>
        err++;
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	3301      	adds	r3, #1
 80071e8:	72fb      	strb	r3, [r7, #11]
      break;
 80071ea:	e06f      	b.n	80072cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 0108 	add.w	r1, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800720e:	e05d      	b.n	80072cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa76 	bl	8007704 <USBD_CtlError>
        err++;
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	3301      	adds	r3, #1
 800721c:	72fb      	strb	r3, [r7, #11]
      break;
 800721e:	e055      	b.n	80072cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	7c12      	ldrb	r2, [r2, #16]
 8007238:	f107 0108 	add.w	r1, r7, #8
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007242:	e043      	b.n	80072cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa5c 	bl	8007704 <USBD_CtlError>
        err++;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	3301      	adds	r3, #1
 8007250:	72fb      	strb	r3, [r7, #11]
      break;
 8007252:	e03b      	b.n	80072cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7c12      	ldrb	r2, [r2, #16]
 800726c:	f107 0108 	add.w	r1, r7, #8
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007276:	e029      	b.n	80072cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa42 	bl	8007704 <USBD_CtlError>
        err++;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	3301      	adds	r3, #1
 8007284:	72fb      	strb	r3, [r7, #11]
      break;
 8007286:	e021      	b.n	80072cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	7c12      	ldrb	r2, [r2, #16]
 80072a0:	f107 0108 	add.w	r1, r7, #8
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
 80072a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072aa:	e00f      	b.n	80072cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa28 	bl	8007704 <USBD_CtlError>
        err++;
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	3301      	adds	r3, #1
 80072b8:	72fb      	strb	r3, [r7, #11]
      break;
 80072ba:	e007      	b.n	80072cc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa20 	bl	8007704 <USBD_CtlError>
      err++;
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	3301      	adds	r3, #1
 80072c8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80072ca:	bf00      	nop
    }
    break;
 80072cc:	e037      	b.n	800733e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7c1b      	ldrb	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072de:	f107 0208 	add.w	r2, r7, #8
 80072e2:	4610      	mov	r0, r2
 80072e4:	4798      	blx	r3
 80072e6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072e8:	e029      	b.n	800733e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa09 	bl	8007704 <USBD_CtlError>
      err++;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	3301      	adds	r3, #1
 80072f6:	72fb      	strb	r3, [r7, #11]
    break;
 80072f8:	e021      	b.n	800733e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7c1b      	ldrb	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10d      	bne.n	800731e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	f107 0208 	add.w	r2, r7, #8
 800730e:	4610      	mov	r0, r2
 8007310:	4798      	blx	r3
 8007312:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	2207      	movs	r2, #7
 800731a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800731c:	e00f      	b.n	800733e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9ef 	bl	8007704 <USBD_CtlError>
      err++;
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	3301      	adds	r3, #1
 800732a:	72fb      	strb	r3, [r7, #11]
    break;
 800732c:	e007      	b.n	800733e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f9e7 	bl	8007704 <USBD_CtlError>
    err++;
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	3301      	adds	r3, #1
 800733a:	72fb      	strb	r3, [r7, #11]
    break;
 800733c:	bf00      	nop
  }

  if (err != 0U)
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d11e      	bne.n	8007382 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	88db      	ldrh	r3, [r3, #6]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d016      	beq.n	800737a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800734c:	893b      	ldrh	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00e      	beq.n	8007370 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88da      	ldrh	r2, [r3, #6]
 8007356:	893b      	ldrh	r3, [r7, #8]
 8007358:	4293      	cmp	r3, r2
 800735a:	bf28      	it	cs
 800735c:	4613      	movcs	r3, r2
 800735e:	b29b      	uxth	r3, r3
 8007360:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007362:	893b      	ldrh	r3, [r7, #8]
 8007364:	461a      	mov	r2, r3
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa3c 	bl	80077e6 <USBD_CtlSendData>
 800736e:	e009      	b.n	8007384 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9c6 	bl	8007704 <USBD_CtlError>
 8007378:	e004      	b.n	8007384 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa8d 	bl	800789a <USBD_CtlSendStatus>
 8007380:	e000      	b.n	8007384 <USBD_GetDescriptor+0x320>
    return;
 8007382:	bf00      	nop
    }
  }
}
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop

0800738c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	889b      	ldrh	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d130      	bne.n	8007400 <USBD_SetAddress+0x74>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88db      	ldrh	r3, [r3, #6]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d12c      	bne.n	8007400 <USBD_SetAddress+0x74>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	2b7f      	cmp	r3, #127	; 0x7f
 80073ac:	d828      	bhi.n	8007400 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	885b      	ldrh	r3, [r3, #2]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d104      	bne.n	80073ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f99c 	bl	8007704 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073cc:	e01c      	b.n	8007408 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7bfa      	ldrb	r2, [r7, #15]
 80073d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 ffbb 	bl	8008356 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa5a 	bl	800789a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f4:	e008      	b.n	8007408 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	e003      	b.n	8007408 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f97e 	bl	8007704 <USBD_CtlError>
  }
}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	885b      	ldrh	r3, [r3, #2]
 8007422:	b2da      	uxtb	r2, r3
 8007424:	4b4b      	ldr	r3, [pc, #300]	; (8007554 <USBD_SetConfig+0x144>)
 8007426:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007428:	4b4a      	ldr	r3, [pc, #296]	; (8007554 <USBD_SetConfig+0x144>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d905      	bls.n	800743c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f966 	bl	8007704 <USBD_CtlError>
    return USBD_FAIL;
 8007438:	2303      	movs	r3, #3
 800743a:	e087      	b.n	800754c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007442:	2b02      	cmp	r3, #2
 8007444:	d002      	beq.n	800744c <USBD_SetConfig+0x3c>
 8007446:	2b03      	cmp	r3, #3
 8007448:	d025      	beq.n	8007496 <USBD_SetConfig+0x86>
 800744a:	e071      	b.n	8007530 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800744c:	4b41      	ldr	r3, [pc, #260]	; (8007554 <USBD_SetConfig+0x144>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01c      	beq.n	800748e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007454:	4b3f      	ldr	r3, [pc, #252]	; (8007554 <USBD_SetConfig+0x144>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800745e:	4b3d      	ldr	r3, [pc, #244]	; (8007554 <USBD_SetConfig+0x144>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff f9bd 	bl	80067e4 <USBD_SetClassConfig>
 800746a:	4603      	mov	r3, r0
 800746c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f944 	bl	8007704 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800747c:	e065      	b.n	800754a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa0b 	bl	800789a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2203      	movs	r2, #3
 8007488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800748c:	e05d      	b.n	800754a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa03 	bl	800789a <USBD_CtlSendStatus>
    break;
 8007494:	e059      	b.n	800754a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007496:	4b2f      	ldr	r3, [pc, #188]	; (8007554 <USBD_SetConfig+0x144>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d112      	bne.n	80074c4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80074a6:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <USBD_SetConfig+0x144>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <USBD_SetConfig+0x144>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff f9b0 	bl	800681c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f9ec 	bl	800789a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80074c2:	e042      	b.n	800754a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80074c4:	4b23      	ldr	r3, [pc, #140]	; (8007554 <USBD_SetConfig+0x144>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d02a      	beq.n	8007528 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff f99e 	bl	800681c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80074e0:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <USBD_SetConfig+0x144>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80074ea:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <USBD_SetConfig+0x144>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff f977 	bl	80067e4 <USBD_SetClassConfig>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00f      	beq.n	8007520 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f8fe 	bl	8007704 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff f983 	bl	800681c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800751e:	e014      	b.n	800754a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f9ba 	bl	800789a <USBD_CtlSendStatus>
    break;
 8007526:	e010      	b.n	800754a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9b6 	bl	800789a <USBD_CtlSendStatus>
    break;
 800752e:	e00c      	b.n	800754a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8e6 	bl	8007704 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <USBD_SetConfig+0x144>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff f96c 	bl	800681c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	73fb      	strb	r3, [r7, #15]
    break;
 8007548:	bf00      	nop
  }

  return ret;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20000374 	.word	0x20000374

08007558 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	88db      	ldrh	r3, [r3, #6]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d004      	beq.n	8007574 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f8c9 	bl	8007704 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007572:	e021      	b.n	80075b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757a:	2b01      	cmp	r3, #1
 800757c:	db17      	blt.n	80075ae <USBD_GetConfig+0x56>
 800757e:	2b02      	cmp	r3, #2
 8007580:	dd02      	ble.n	8007588 <USBD_GetConfig+0x30>
 8007582:	2b03      	cmp	r3, #3
 8007584:	d00b      	beq.n	800759e <USBD_GetConfig+0x46>
 8007586:	e012      	b.n	80075ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3308      	adds	r3, #8
 8007592:	2201      	movs	r2, #1
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f925 	bl	80077e6 <USBD_CtlSendData>
      break;
 800759c:	e00c      	b.n	80075b8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	2201      	movs	r2, #1
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f91d 	bl	80077e6 <USBD_CtlSendData>
      break;
 80075ac:	e004      	b.n	80075b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8a7 	bl	8007704 <USBD_CtlError>
      break;
 80075b6:	bf00      	nop
}
 80075b8:	bf00      	nop
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	3b01      	subs	r3, #1
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d81e      	bhi.n	8007614 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	88db      	ldrh	r3, [r3, #6]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d004      	beq.n	80075e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f88f 	bl	8007704 <USBD_CtlError>
      break;
 80075e6:	e01a      	b.n	800761e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f043 0202 	orr.w	r2, r3, #2
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	330c      	adds	r3, #12
 8007608:	2202      	movs	r2, #2
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8ea 	bl	80077e6 <USBD_CtlSendData>
    break;
 8007612:	e004      	b.n	800761e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f874 	bl	8007704 <USBD_CtlError>
    break;
 800761c:	bf00      	nop
  }
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d106      	bne.n	8007646 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f92a 	bl	800789a <USBD_CtlSendStatus>
  }
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765e:	3b01      	subs	r3, #1
 8007660:	2b02      	cmp	r3, #2
 8007662:	d80b      	bhi.n	800767c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d10c      	bne.n	8007686 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f910 	bl	800789a <USBD_CtlSendStatus>
      }
      break;
 800767a:	e004      	b.n	8007686 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f840 	bl	8007704 <USBD_CtlError>
      break;
 8007684:	e000      	b.n	8007688 <USBD_ClrFeature+0x3a>
      break;
 8007686:	bf00      	nop
  }
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff faa8 	bl	8006c10 <SWAPBYTE>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fa9b 	bl	8006c10 <SWAPBYTE>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff fa8e 	bl	8006c10 <SWAPBYTE>
 80076f4:	4603      	mov	r3, r0
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	80da      	strh	r2, [r3, #6]
}
 80076fc:	bf00      	nop
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800770e:	2180      	movs	r1, #128	; 0x80
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fdb5 	bl	8008280 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007716:	2100      	movs	r1, #0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fdb1 	bl	8008280 <USBD_LL_StallEP>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d036      	beq.n	80077aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007740:	6938      	ldr	r0, [r7, #16]
 8007742:	f000 f836 	bl	80077b2 <USBD_GetLen>
 8007746:	4603      	mov	r3, r0
 8007748:	3301      	adds	r3, #1
 800774a:	b29b      	uxth	r3, r3
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	3301      	adds	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	4413      	add	r3, r2
 800776c:	2203      	movs	r2, #3
 800776e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	3301      	adds	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007776:	e013      	b.n	80077a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	4413      	add	r3, r2
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3301      	adds	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
    idx++;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	3301      	adds	r3, #1
 800778e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	4413      	add	r3, r2
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
    idx++;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	3301      	adds	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e7      	bne.n	8007778 <USBD_GetString+0x52>
 80077a8:	e000      	b.n	80077ac <USBD_GetString+0x86>
    return;
 80077aa:	bf00      	nop
  }
}
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077c2:	e005      	b.n	80077d0 <USBD_GetLen+0x1e>
  {
    len++;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	3301      	adds	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1f5      	bne.n	80077c4 <USBD_GetLen+0x12>
  }

  return len;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2202      	movs	r2, #2
 80077f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	2100      	movs	r1, #0
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fdc1 	bl	8008394 <USBD_LL_Transmit>

  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	2100      	movs	r1, #0
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 fdb0 	bl	8008394 <USBD_LL_Transmit>

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2203      	movs	r2, #3
 800784e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	2100      	movs	r1, #0
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fdb4 	bl	80083d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	2100      	movs	r1, #0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fda3 	bl	80083d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2204      	movs	r2, #4
 80078a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078aa:	2300      	movs	r3, #0
 80078ac:	2200      	movs	r2, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fd6f 	bl	8008394 <USBD_LL_Transmit>

  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2205      	movs	r2, #5
 80078cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fd7d 	bl	80083d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80078ec:	2200      	movs	r2, #0
 80078ee:	4912      	ldr	r1, [pc, #72]	; (8007938 <MX_USB_Device_Init+0x50>)
 80078f0:	4812      	ldr	r0, [pc, #72]	; (800793c <MX_USB_Device_Init+0x54>)
 80078f2:	f7fe ff09 	bl	8006708 <USBD_Init>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80078fc:	f7f8 fe42 	bl	8000584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007900:	490f      	ldr	r1, [pc, #60]	; (8007940 <MX_USB_Device_Init+0x58>)
 8007902:	480e      	ldr	r0, [pc, #56]	; (800793c <MX_USB_Device_Init+0x54>)
 8007904:	f7fe ff30 	bl	8006768 <USBD_RegisterClass>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800790e:	f7f8 fe39 	bl	8000584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007912:	490c      	ldr	r1, [pc, #48]	; (8007944 <MX_USB_Device_Init+0x5c>)
 8007914:	4809      	ldr	r0, [pc, #36]	; (800793c <MX_USB_Device_Init+0x54>)
 8007916:	f7fe fe5b 	bl	80065d0 <USBD_CDC_RegisterInterface>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007920:	f7f8 fe30 	bl	8000584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007924:	4805      	ldr	r0, [pc, #20]	; (800793c <MX_USB_Device_Init+0x54>)
 8007926:	f7fe ff46 	bl	80067b6 <USBD_Start>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007930:	f7f8 fe28 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007934:	bf00      	nop
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20000130 	.word	0x20000130
 800793c:	200005ac 	.word	0x200005ac
 8007940:	20000018 	.word	0x20000018
 8007944:	2000011c 	.word	0x2000011c

08007948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  uint16_t i;

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800794e:	2200      	movs	r2, #0
 8007950:	490f      	ldr	r1, [pc, #60]	; (8007990 <CDC_Init_FS+0x48>)
 8007952:	4810      	ldr	r0, [pc, #64]	; (8007994 <CDC_Init_FS+0x4c>)
 8007954:	f7fe fe51 	bl	80065fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007958:	490f      	ldr	r1, [pc, #60]	; (8007998 <CDC_Init_FS+0x50>)
 800795a:	480e      	ldr	r0, [pc, #56]	; (8007994 <CDC_Init_FS+0x4c>)
 800795c:	f7fe fe66 	bl	800662c <USBD_CDC_SetRxBuffer>

  // Initialize USB TX and RX buffer management
  g_RX_buf_in = 0;
 8007960:	4b0e      	ldr	r3, [pc, #56]	; (800799c <CDC_Init_FS+0x54>)
 8007962:	2200      	movs	r2, #0
 8007964:	701a      	strb	r2, [r3, #0]
  g_RX_buf_out = 0;
 8007966:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <CDC_Init_FS+0x58>)
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]

  for (i=0; i < kRX_BUF_SIZE; i++)
 800796c:	2300      	movs	r3, #0
 800796e:	80fb      	strh	r3, [r7, #6]
 8007970:	e006      	b.n	8007980 <CDC_Init_FS+0x38>
  {
    g_RX_buf[i] = 0;
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	4a0b      	ldr	r2, [pc, #44]	; (80079a4 <CDC_Init_FS+0x5c>)
 8007976:	2100      	movs	r1, #0
 8007978:	54d1      	strb	r1, [r2, r3]
  for (i=0; i < kRX_BUF_SIZE; i++)
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	3301      	adds	r3, #1
 800797e:	80fb      	strh	r3, [r7, #6]
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	2bfe      	cmp	r3, #254	; 0xfe
 8007984:	d9f5      	bls.n	8007972 <CDC_Init_FS+0x2a>
  }

  return (USBD_OK);
 8007986:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	2000117c 	.word	0x2000117c
 8007994:	200005ac 	.word	0x200005ac
 8007998:	2000097c 	.word	0x2000097c
 800799c:	2000197d 	.word	0x2000197d
 80079a0:	2000197c 	.word	0x2000197c
 80079a4:	2000087c 	.word	0x2000087c

080079a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	6039      	str	r1, [r7, #0]
 80079c2:	71fb      	strb	r3, [r7, #7]
 80079c4:	4613      	mov	r3, r2
 80079c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	2b23      	cmp	r3, #35	; 0x23
 80079cc:	d84a      	bhi.n	8007a64 <CDC_Control_FS+0xac>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <CDC_Control_FS+0x1c>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	08007a65 	.word	0x08007a65
 80079d8:	08007a65 	.word	0x08007a65
 80079dc:	08007a65 	.word	0x08007a65
 80079e0:	08007a65 	.word	0x08007a65
 80079e4:	08007a65 	.word	0x08007a65
 80079e8:	08007a65 	.word	0x08007a65
 80079ec:	08007a65 	.word	0x08007a65
 80079f0:	08007a65 	.word	0x08007a65
 80079f4:	08007a65 	.word	0x08007a65
 80079f8:	08007a65 	.word	0x08007a65
 80079fc:	08007a65 	.word	0x08007a65
 8007a00:	08007a65 	.word	0x08007a65
 8007a04:	08007a65 	.word	0x08007a65
 8007a08:	08007a65 	.word	0x08007a65
 8007a0c:	08007a65 	.word	0x08007a65
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	08007a65 	.word	0x08007a65
 8007a18:	08007a65 	.word	0x08007a65
 8007a1c:	08007a65 	.word	0x08007a65
 8007a20:	08007a65 	.word	0x08007a65
 8007a24:	08007a65 	.word	0x08007a65
 8007a28:	08007a65 	.word	0x08007a65
 8007a2c:	08007a65 	.word	0x08007a65
 8007a30:	08007a65 	.word	0x08007a65
 8007a34:	08007a65 	.word	0x08007a65
 8007a38:	08007a65 	.word	0x08007a65
 8007a3c:	08007a65 	.word	0x08007a65
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a65 	.word	0x08007a65
 8007a48:	08007a65 	.word	0x08007a65
 8007a4c:	08007a65 	.word	0x08007a65
 8007a50:	08007a65 	.word	0x08007a65
 8007a54:	08007a65 	.word	0x08007a65
 8007a58:	08007a65 	.word	0x08007a65
 8007a5c:	08007a65 	.word	0x08007a65
 8007a60:	08007a65 	.word	0x08007a65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a64:	bf00      	nop
  }

  return (USBD_OK);
 8007a66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  static bool in_esc = false;
  static uint8_t esc_sequence[3] = {0};
  uint8_t byte_cnt;
  uint8_t tst_char;

  if (*Len > 0)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 80ad 	beq.w	8007be2 <CDC_Receive_FS+0x16e>
  {
    for(byte_cnt = 0; byte_cnt < *Len; byte_cnt++)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
 8007a8c:	e0a3      	b.n	8007bd6 <CDC_Receive_FS+0x162>
    {
      tst_char = Buf[byte_cnt];
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	73bb      	strb	r3, [r7, #14]

      // Check to see if we are in a CR/LF situation
      if (
        !in_cr
 8007a98:	4b7a      	ldr	r3, [pc, #488]	; (8007c84 <CDC_Receive_FS+0x210>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f083 0301 	eor.w	r3, r3, #1
 8007aa0:	b2db      	uxtb	r3, r3
      if (
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d01d      	beq.n	8007ae2 <CDC_Receive_FS+0x6e>
        &&
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b0d      	cmp	r3, #13
 8007aaa:	d002      	beq.n	8007ab2 <CDC_Receive_FS+0x3e>
        (
          kCR == tst_char
          ||
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b0a      	cmp	r3, #10
 8007ab0:	d117      	bne.n	8007ae2 <CDC_Receive_FS+0x6e>
          kLF == tst_char
        )
      )
      {
        in_cr = true;
 8007ab2:	4b74      	ldr	r3, [pc, #464]	; (8007c84 <CDC_Receive_FS+0x210>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	701a      	strb	r2, [r3, #0]
        g_RX_buf[g_RX_buf_in] = kCR;
 8007ab8:	4b73      	ldr	r3, [pc, #460]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	4b73      	ldr	r3, [pc, #460]	; (8007c8c <CDC_Receive_FS+0x218>)
 8007ac0:	210d      	movs	r1, #13
 8007ac2:	5499      	strb	r1, [r3, r2]
        g_RX_buf_in++;
 8007ac4:	4b70      	ldr	r3, [pc, #448]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4b6e      	ldr	r3, [pc, #440]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007ace:	701a      	strb	r2, [r3, #0]
        // of information from the PC to parse

        // Now, if we've gotten a full command (user send <CR>) then
        // go call the code that deals with that command, and then
        // keep parsing. (This allows multiple small commands per packet)
        parsePacket();
 8007ad0:	f7f8 fc00 	bl	80002d4 <parsePacket>

        g_RX_buf_in = 0;
 8007ad4:	4b6c      	ldr	r3, [pc, #432]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
        g_RX_buf_out = 0;
 8007ada:	4b6d      	ldr	r3, [pc, #436]	; (8007c90 <CDC_Receive_FS+0x21c>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	e065      	b.n	8007bae <CDC_Receive_FS+0x13a>
      }
      else if (tst_char == 27 && in_esc == false)
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	2b1b      	cmp	r3, #27
 8007ae6:	d113      	bne.n	8007b10 <CDC_Receive_FS+0x9c>
 8007ae8:	4b6a      	ldr	r3, [pc, #424]	; (8007c94 <CDC_Receive_FS+0x220>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f083 0301 	eor.w	r3, r3, #1
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <CDC_Receive_FS+0x9c>
      {
        in_esc = true;
 8007af6:	4b67      	ldr	r3, [pc, #412]	; (8007c94 <CDC_Receive_FS+0x220>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
        esc_sequence[0] = 27;
 8007afc:	4b66      	ldr	r3, [pc, #408]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007afe:	221b      	movs	r2, #27
 8007b00:	701a      	strb	r2, [r3, #0]
        esc_sequence[1] = 0;
 8007b02:	4b65      	ldr	r3, [pc, #404]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	705a      	strb	r2, [r3, #1]
        esc_sequence[2] = 0;
 8007b08:	4b63      	ldr	r3, [pc, #396]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	709a      	strb	r2, [r3, #2]
 8007b0e:	e04e      	b.n	8007bae <CDC_Receive_FS+0x13a>
      }
      else if (
        in_esc == true
 8007b10:	4b60      	ldr	r3, [pc, #384]	; (8007c94 <CDC_Receive_FS+0x220>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
      else if (
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <CDC_Receive_FS+0xc2>
        &&
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b5b      	cmp	r3, #91	; 0x5b
 8007b1c:	d10b      	bne.n	8007b36 <CDC_Receive_FS+0xc2>
        tst_char == 91
        &&
        esc_sequence[0] == 27
 8007b1e:	4b5e      	ldr	r3, [pc, #376]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
        &&
 8007b22:	2b1b      	cmp	r3, #27
 8007b24:	d107      	bne.n	8007b36 <CDC_Receive_FS+0xc2>
        &&
        esc_sequence[1] == 0
 8007b26:	4b5c      	ldr	r3, [pc, #368]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b28:	785b      	ldrb	r3, [r3, #1]
        &&
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <CDC_Receive_FS+0xc2>
      )
      {
        /// TODO: What is this for?
        esc_sequence[1] = 91;
 8007b2e:	4b5a      	ldr	r3, [pc, #360]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b30:	225b      	movs	r2, #91	; 0x5b
 8007b32:	705a      	strb	r2, [r3, #1]
 8007b34:	e03b      	b.n	8007bae <CDC_Receive_FS+0x13a>
      }
      else if (tst_char == 8 && g_RX_buf_in > 0)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d114      	bne.n	8007b66 <CDC_Receive_FS+0xf2>
 8007b3c:	4b52      	ldr	r3, [pc, #328]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d010      	beq.n	8007b66 <CDC_Receive_FS+0xf2>
      {
        // Handle the backspace thing
        g_RX_buf_in--;
 8007b44:	4b50      	ldr	r3, [pc, #320]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	4b4e      	ldr	r3, [pc, #312]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007b4e:	701a      	strb	r2, [r3, #0]
        g_RX_buf[g_RX_buf_in] = 0x00;
 8007b50:	4b4d      	ldr	r3, [pc, #308]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b4d      	ldr	r3, [pc, #308]	; (8007c8c <CDC_Receive_FS+0x218>)
 8007b58:	2100      	movs	r1, #0
 8007b5a:	5499      	strb	r1, [r3, r2]
        CDC_Transmit_FS((uint8_t*)" \b", 2);
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	484f      	ldr	r0, [pc, #316]	; (8007c9c <CDC_Receive_FS+0x228>)
 8007b60:	f000 f8b0 	bl	8007cc4 <CDC_Transmit_FS>
 8007b64:	e023      	b.n	8007bae <CDC_Receive_FS+0x13a>
      }
      else if (
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b0d      	cmp	r3, #13
 8007b6a:	d020      	beq.n	8007bae <CDC_Receive_FS+0x13a>
        tst_char != kCR
        &&
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b0a      	cmp	r3, #10
 8007b70:	d01d      	beq.n	8007bae <CDC_Receive_FS+0x13a>
        tst_char != kLF
        &&
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b1f      	cmp	r3, #31
 8007b76:	d91a      	bls.n	8007bae <CDC_Receive_FS+0x13a>
        tst_char >= 32
      )
      {
        esc_sequence[0] = 0;
 8007b78:	4b47      	ldr	r3, [pc, #284]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
        esc_sequence[1] = 0;
 8007b7e:	4b46      	ldr	r3, [pc, #280]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
        esc_sequence[2] = 0;
 8007b84:	4b44      	ldr	r3, [pc, #272]	; (8007c98 <CDC_Receive_FS+0x224>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	709a      	strb	r2, [r3, #2]
        in_esc = false;
 8007b8a:	4b42      	ldr	r3, [pc, #264]	; (8007c94 <CDC_Receive_FS+0x220>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]

        // Only add a byte if it is not a CR or LF
        g_RX_buf[g_RX_buf_in] = tst_char;
 8007b90:	4b3d      	ldr	r3, [pc, #244]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	4619      	mov	r1, r3
 8007b96:	4a3d      	ldr	r2, [pc, #244]	; (8007c8c <CDC_Receive_FS+0x218>)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	5453      	strb	r3, [r2, r1]
        in_cr = false;
 8007b9c:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <CDC_Receive_FS+0x210>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	701a      	strb	r2, [r3, #0]
        g_RX_buf_in++;
 8007ba2:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007bac:	701a      	strb	r2, [r3, #0]
      }
      // Check for buffer wraparound
      if (kRX_BUF_SIZE == g_RX_buf_in)
 8007bae:	4b36      	ldr	r3, [pc, #216]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2bff      	cmp	r3, #255	; 0xff
 8007bb4:	d10c      	bne.n	8007bd0 <CDC_Receive_FS+0x15c>
      {
        bitset (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN);
 8007bb6:	4b3a      	ldr	r3, [pc, #232]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	f043 0308 	orr.w	r3, r3, #8
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	4b37      	ldr	r3, [pc, #220]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007bc2:	701a      	strb	r2, [r3, #0]
        g_RX_buf_in = 0;
 8007bc4:	4b30      	ldr	r3, [pc, #192]	; (8007c88 <CDC_Receive_FS+0x214>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
        g_RX_buf_out = 0;
 8007bca:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <CDC_Receive_FS+0x21c>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
    for(byte_cnt = 0; byte_cnt < *Len; byte_cnt++)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]
 8007bd6:	7bfa      	ldrb	r2, [r7, #15]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	f4ff af56 	bcc.w	8007a8e <CDC_Receive_FS+0x1a>
    }
  }

/// TODO: Make this into a function
  // Check for any errors logged in error_byte that need to be sent out
  if (error_byte)
 8007be2:	4b2f      	ldr	r3, [pc, #188]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d040      	beq.n	8007c6c <CDC_Receive_FS+0x1f8>
  {
    if (bittst (error_byte, 0))
 8007bea:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <CDC_Receive_FS+0x188>
    {
      // Unused as of yet
      printf ((char *)"!0 \r\n");
 8007bf6:	482b      	ldr	r0, [pc, #172]	; (8007ca4 <CDC_Receive_FS+0x230>)
 8007bf8:	f000 fd68 	bl	80086cc <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_STEPS_TO_FAST))
 8007bfc:	4b28      	ldr	r3, [pc, #160]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <CDC_Receive_FS+0x19a>
    {
      // Unused as of yet
      printf ((char *)"!1 Err: Can't step that fast\r\n");
 8007c08:	4827      	ldr	r0, [pc, #156]	; (8007ca8 <CDC_Receive_FS+0x234>)
 8007c0a:	f000 fd5f 	bl	80086cc <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_TX_BUF_OVERRUN))
 8007c0e:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <CDC_Receive_FS+0x1ac>
    {
      printf ((char *)"!2 Err: TX Buffer overrun\r\n");
 8007c1a:	4824      	ldr	r0, [pc, #144]	; (8007cac <CDC_Receive_FS+0x238>)
 8007c1c:	f000 fd56 	bl	80086cc <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN))
 8007c20:	4b1f      	ldr	r3, [pc, #124]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <CDC_Receive_FS+0x1be>
    {
      printf ((char *)"!3 Err: RX Buffer overrun\r\n");
 8007c2c:	4820      	ldr	r0, [pc, #128]	; (8007cb0 <CDC_Receive_FS+0x23c>)
 8007c2e:	f000 fd4d 	bl	80086cc <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_MISSING_PARAMETER))
 8007c32:	4b1b      	ldr	r3, [pc, #108]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <CDC_Receive_FS+0x1d0>
    {
      printf ((char *)"!4 Err: Missing parameter(s)\r\n");
 8007c3e:	481d      	ldr	r0, [pc, #116]	; (8007cb4 <CDC_Receive_FS+0x240>)
 8007c40:	f000 fd44 	bl	80086cc <puts>
    if (bittst (error_byte, kERROR_BYTE_PRINTED_ERROR))
    {
      // We don't need to do anything since something has already been printed out
      //printf ((rom char *)"!5\r\n");
    }
    if (bittst (error_byte, kERROR_BYTE_PARAMETER_OUTSIDE_LIMIT))
 8007c44:	4b16      	ldr	r3, [pc, #88]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <CDC_Receive_FS+0x1e2>
    {
      printf ((char *)"!6 Err: Invalid paramter value\r\n");
 8007c50:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <CDC_Receive_FS+0x244>)
 8007c52:	f000 fd3b 	bl	80086cc <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_EXTRA_CHARACTERS))
 8007c56:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	b25b      	sxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da02      	bge.n	8007c66 <CDC_Receive_FS+0x1f2>
    {
      printf ((char *)"!7 Err: Extra parmater\r\n");
 8007c60:	4816      	ldr	r0, [pc, #88]	; (8007cbc <CDC_Receive_FS+0x248>)
 8007c62:	f000 fd33 	bl	80086cc <puts>
    }
    error_byte = 0;
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <CDC_Receive_FS+0x22c>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	701a      	strb	r2, [r3, #0]
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4814      	ldr	r0, [pc, #80]	; (8007cc0 <CDC_Receive_FS+0x24c>)
 8007c70:	f7fe fcdc 	bl	800662c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c74:	4812      	ldr	r0, [pc, #72]	; (8007cc0 <CDC_Receive_FS+0x24c>)
 8007c76:	f7fe fd1d 	bl	80066b4 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007c7a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	20000375 	.word	0x20000375
 8007c88:	2000197d 	.word	0x2000197d
 8007c8c:	2000087c 	.word	0x2000087c
 8007c90:	2000197c 	.word	0x2000197c
 8007c94:	20000376 	.word	0x20000376
 8007c98:	20000378 	.word	0x20000378
 8007c9c:	08009658 	.word	0x08009658
 8007ca0:	200005a4 	.word	0x200005a4
 8007ca4:	0800965c 	.word	0x0800965c
 8007ca8:	08009664 	.word	0x08009664
 8007cac:	08009684 	.word	0x08009684
 8007cb0:	080096a0 	.word	0x080096a0
 8007cb4:	080096bc 	.word	0x080096bc
 8007cb8:	080096dc 	.word	0x080096dc
 8007cbc:	080096fc 	.word	0x080096fc
 8007cc0:	200005ac 	.word	0x200005ac

08007cc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007cd4:	4b10      	ldr	r3, [pc, #64]	; (8007d18 <CDC_Transmit_FS+0x54>)
 8007cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d008      	beq.n	8007cf8 <CDC_Transmit_FS+0x34>
  {
    bitset (error_byte, kERROR_BYTE_TX_BUF_OVERRUN);
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <CDC_Transmit_FS+0x58>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f043 0304 	orr.w	r3, r3, #4
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <CDC_Transmit_FS+0x58>)
 8007cf2:	701a      	strb	r2, [r3, #0]
    return USBD_BUSY;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e00b      	b.n	8007d10 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4806      	ldr	r0, [pc, #24]	; (8007d18 <CDC_Transmit_FS+0x54>)
 8007d00:	f7fe fc7b 	bl	80065fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d04:	4804      	ldr	r0, [pc, #16]	; (8007d18 <CDC_Transmit_FS+0x54>)
 8007d06:	f7fe fca5 	bl	8006654 <USBD_CDC_TransmitPacket>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	200005ac 	.word	0x200005ac
 8007d1c:	200005a4 	.word	0x200005a4

08007d20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2212      	movs	r2, #18
 8007d54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20000150 	.word	0x20000150

08007d68 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	6039      	str	r1, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2204      	movs	r2, #4
 8007d78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d7a:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000164 	.word	0x20000164

08007d8c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	6039      	str	r1, [r7, #0]
 8007d96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d105      	bne.n	8007daa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	4907      	ldr	r1, [pc, #28]	; (8007dc0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007da2:	4808      	ldr	r0, [pc, #32]	; (8007dc4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007da4:	f7ff fcbf 	bl	8007726 <USBD_GetString>
 8007da8:	e004      	b.n	8007db4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	4904      	ldr	r1, [pc, #16]	; (8007dc0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007dae:	4805      	ldr	r0, [pc, #20]	; (8007dc4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007db0:	f7ff fcb9 	bl	8007726 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007db4:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20001980 	.word	0x20001980
 8007dc4:	08009714 	.word	0x08009714

08007dc8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	6039      	str	r1, [r7, #0]
 8007dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	4904      	ldr	r1, [pc, #16]	; (8007de8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8007dd8:	4804      	ldr	r0, [pc, #16]	; (8007dec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8007dda:	f7ff fca4 	bl	8007726 <USBD_GetString>
  return USBD_StrDesc;
 8007dde:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20001980 	.word	0x20001980
 8007dec:	0800972c 	.word	0x0800972c

08007df0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	221a      	movs	r2, #26
 8007e00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e02:	f000 f843 	bl	8007e8c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007e06:	4b02      	ldr	r3, [pc, #8]	; (8007e10 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000168 	.word	0x20000168

08007e14 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d105      	bne.n	8007e32 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	4907      	ldr	r1, [pc, #28]	; (8007e48 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007e2a:	4808      	ldr	r0, [pc, #32]	; (8007e4c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007e2c:	f7ff fc7b 	bl	8007726 <USBD_GetString>
 8007e30:	e004      	b.n	8007e3c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4904      	ldr	r1, [pc, #16]	; (8007e48 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007e36:	4805      	ldr	r0, [pc, #20]	; (8007e4c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007e38:	f7ff fc75 	bl	8007726 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e3c:	4b02      	ldr	r3, [pc, #8]	; (8007e48 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20001980 	.word	0x20001980
 8007e4c:	08009740 	.word	0x08009740

08007e50 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	6039      	str	r1, [r7, #0]
 8007e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d105      	bne.n	8007e6e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4907      	ldr	r1, [pc, #28]	; (8007e84 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007e66:	4808      	ldr	r0, [pc, #32]	; (8007e88 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007e68:	f7ff fc5d 	bl	8007726 <USBD_GetString>
 8007e6c:	e004      	b.n	8007e78 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	4904      	ldr	r1, [pc, #16]	; (8007e84 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007e72:	4805      	ldr	r0, [pc, #20]	; (8007e88 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007e74:	f7ff fc57 	bl	8007726 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20001980 	.word	0x20001980
 8007e88:	0800974c 	.word	0x0800974c

08007e8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e92:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <Get_SerialNum+0x44>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <Get_SerialNum+0x48>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <Get_SerialNum+0x4c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eb2:	2208      	movs	r2, #8
 8007eb4:	4909      	ldr	r1, [pc, #36]	; (8007edc <Get_SerialNum+0x50>)
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f814 	bl	8007ee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	4908      	ldr	r1, [pc, #32]	; (8007ee0 <Get_SerialNum+0x54>)
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	f000 f80f 	bl	8007ee4 <IntToUnicode>
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	1fff7590 	.word	0x1fff7590
 8007ed4:	1fff7594 	.word	0x1fff7594
 8007ed8:	1fff7598 	.word	0x1fff7598
 8007edc:	2000016a 	.word	0x2000016a
 8007ee0:	2000017a 	.word	0x2000017a

08007ee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
 8007efa:	e027      	b.n	8007f4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	0f1b      	lsrs	r3, r3, #28
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d80b      	bhi.n	8007f1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	440b      	add	r3, r1
 8007f14:	3230      	adds	r2, #48	; 0x30
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e00a      	b.n	8007f32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0f1b      	lsrs	r3, r3, #28
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4619      	mov	r1, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3237      	adds	r2, #55	; 0x37
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	75fb      	strb	r3, [r7, #23]
 8007f4c:	7dfa      	ldrb	r2, [r7, #23]
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d3d3      	bcc.n	8007efc <IntToUnicode+0x18>
  }
}
 8007f54:	bf00      	nop
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a0d      	ldr	r2, [pc, #52]	; (8007fa4 <HAL_PCD_MspInit+0x44>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d113      	bne.n	8007f9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f72:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <HAL_PCD_MspInit+0x48>)
 8007f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f76:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <HAL_PCD_MspInit+0x48>)
 8007f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <HAL_PCD_MspInit+0x48>)
 8007f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	2014      	movs	r0, #20
 8007f90:	f7f8 fdd0 	bl	8000b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007f94:	2014      	movs	r0, #20
 8007f96:	f7f8 fdf7 	bl	8000b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40005c00 	.word	0x40005c00
 8007fa8:	40021000 	.word	0x40021000

08007fac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f7fe fc42 	bl	800684c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	440b      	add	r3, r1
 8007ff0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7fe fc7a 	bl	80068f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	440b      	add	r3, r1
 8008026:	333c      	adds	r3, #60	; 0x3c
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	4619      	mov	r1, r3
 800802e:	f7fe fcc3 	bl	80069b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fdc7 	bl	8006bdc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800805e:	2301      	movs	r3, #1
 8008060:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d001      	beq.n	800806e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800806a:	f7f8 fa8b 	bl	8000584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008074:	7bfa      	ldrb	r2, [r7, #15]
 8008076:	4611      	mov	r1, r2
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe fd74 	bl	8006b66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fd2d 	bl	8006ae4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fd6f 	bl	8006b86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080b0:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <HAL_PCD_SuspendCallback+0x30>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	4a03      	ldr	r2, [pc, #12]	; (80080c4 <HAL_PCD_SuspendCallback+0x30>)
 80080b6:	f043 0306 	orr.w	r3, r3, #6
 80080ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	e000ed00 	.word	0xe000ed00

080080c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080d8:	4b08      	ldr	r3, [pc, #32]	; (80080fc <HAL_PCD_ResumeCallback+0x34>)
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	4a07      	ldr	r2, [pc, #28]	; (80080fc <HAL_PCD_ResumeCallback+0x34>)
 80080de:	f023 0306 	bic.w	r3, r3, #6
 80080e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80080e4:	f000 f9fa 	bl	80084dc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fd5e 	bl	8006bb0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	e000ed00 	.word	0xe000ed00

08008100 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008108:	4a2b      	ldr	r2, [pc, #172]	; (80081b8 <USBD_LL_Init+0xb8>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a29      	ldr	r2, [pc, #164]	; (80081b8 <USBD_LL_Init+0xb8>)
 8008114:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008118:	4b27      	ldr	r3, [pc, #156]	; (80081b8 <USBD_LL_Init+0xb8>)
 800811a:	4a28      	ldr	r2, [pc, #160]	; (80081bc <USBD_LL_Init+0xbc>)
 800811c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800811e:	4b26      	ldr	r3, [pc, #152]	; (80081b8 <USBD_LL_Init+0xb8>)
 8008120:	2208      	movs	r2, #8
 8008122:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008124:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <USBD_LL_Init+0xb8>)
 8008126:	2202      	movs	r2, #2
 8008128:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800812a:	4b23      	ldr	r3, [pc, #140]	; (80081b8 <USBD_LL_Init+0xb8>)
 800812c:	2202      	movs	r2, #2
 800812e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008130:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <USBD_LL_Init+0xb8>)
 8008132:	2200      	movs	r2, #0
 8008134:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008136:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <USBD_LL_Init+0xb8>)
 8008138:	2200      	movs	r2, #0
 800813a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800813c:	4b1e      	ldr	r3, [pc, #120]	; (80081b8 <USBD_LL_Init+0xb8>)
 800813e:	2200      	movs	r2, #0
 8008140:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008142:	4b1d      	ldr	r3, [pc, #116]	; (80081b8 <USBD_LL_Init+0xb8>)
 8008144:	2200      	movs	r2, #0
 8008146:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008148:	481b      	ldr	r0, [pc, #108]	; (80081b8 <USBD_LL_Init+0xb8>)
 800814a:	f7f8 ffc9 	bl	80010e0 <HAL_PCD_Init>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008154:	f7f8 fa16 	bl	8000584 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800815e:	2318      	movs	r3, #24
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	f7fa fac4 	bl	80026f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800816e:	2358      	movs	r3, #88	; 0x58
 8008170:	2200      	movs	r2, #0
 8008172:	2180      	movs	r1, #128	; 0x80
 8008174:	f7fa fabc 	bl	80026f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800817e:	23c0      	movs	r3, #192	; 0xc0
 8008180:	2200      	movs	r2, #0
 8008182:	2181      	movs	r1, #129	; 0x81
 8008184:	f7fa fab4 	bl	80026f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800818e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008192:	2200      	movs	r2, #0
 8008194:	2101      	movs	r1, #1
 8008196:	f7fa faab 	bl	80026f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081a4:	2200      	movs	r2, #0
 80081a6:	2182      	movs	r1, #130	; 0x82
 80081a8:	f7fa faa2 	bl	80026f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20001b80 	.word	0x20001b80
 80081bc:	40005c00 	.word	0x40005c00

080081c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7f9 f874 	bl	80012c4 <HAL_PCD_Start>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f980 	bl	80084e8 <USBD_Get_USB_Status>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	4608      	mov	r0, r1
 8008200:	4611      	mov	r1, r2
 8008202:	461a      	mov	r2, r3
 8008204:	4603      	mov	r3, r0
 8008206:	70fb      	strb	r3, [r7, #3]
 8008208:	460b      	mov	r3, r1
 800820a:	70bb      	strb	r3, [r7, #2]
 800820c:	4613      	mov	r3, r2
 800820e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800821e:	78bb      	ldrb	r3, [r7, #2]
 8008220:	883a      	ldrh	r2, [r7, #0]
 8008222:	78f9      	ldrb	r1, [r7, #3]
 8008224:	f7f9 f9e3 	bl	80015ee <HAL_PCD_EP_Open>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 f95a 	bl	80084e8 <USBD_Get_USB_Status>
 8008234:	4603      	mov	r3, r0
 8008236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008238:	7bbb      	ldrb	r3, [r7, #14]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7f9 fa2a 	bl	80016ba <HAL_PCD_EP_Close>
 8008266:	4603      	mov	r3, r0
 8008268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f93b 	bl	80084e8 <USBD_Get_USB_Status>
 8008272:	4603      	mov	r3, r0
 8008274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008276:	7bbb      	ldrb	r3, [r7, #14]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f7f9 faeb 	bl	800187a <HAL_PCD_EP_SetStall>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f91c 	bl	80084e8 <USBD_Get_USB_Status>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f9 fb2c 	bl	800193a <HAL_PCD_EP_ClrStall>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f8fd 	bl	80084e8 <USBD_Get_USB_Status>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800830e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008314:	2b00      	cmp	r3, #0
 8008316:	da0c      	bge.n	8008332 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	440b      	add	r3, r1
 800832c:	3302      	adds	r3, #2
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	e00b      	b.n	800834a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008338:	68f9      	ldr	r1, [r7, #12]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	440b      	add	r3, r1
 8008344:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008348:	781b      	ldrb	r3, [r3, #0]
  }
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	4611      	mov	r1, r2
 8008374:	4618      	mov	r0, r3
 8008376:	f7f9 f915 	bl	80015a4 <HAL_PCD_SetAddress>
 800837a:	4603      	mov	r3, r0
 800837c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 f8b1 	bl	80084e8 <USBD_Get_USB_Status>
 8008386:	4603      	mov	r3, r0
 8008388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800838a:	7bbb      	ldrb	r3, [r7, #14]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	607a      	str	r2, [r7, #4]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	460b      	mov	r3, r1
 80083a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083b2:	7af9      	ldrb	r1, [r7, #11]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	f7f9 fa1c 	bl	80017f4 <HAL_PCD_EP_Transmit>
 80083bc:	4603      	mov	r3, r0
 80083be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f890 	bl	80084e8 <USBD_Get_USB_Status>
 80083c8:	4603      	mov	r3, r0
 80083ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b086      	sub	sp, #24
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
 80083e2:	460b      	mov	r3, r1
 80083e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083f4:	7af9      	ldrb	r1, [r7, #11]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	f7f9 f9a6 	bl	800174a <HAL_PCD_EP_Receive>
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 f86f 	bl	80084e8 <USBD_Get_USB_Status>
 800840a:	4603      	mov	r3, r0
 800840c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800840e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7f9 f9c8 	bl	80017c4 <HAL_PCD_EP_GetRxCount>
 8008434:	4603      	mov	r3, r0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <HAL_PCDEx_LPM_Callback+0x18>
 8008452:	2b01      	cmp	r3, #1
 8008454:	d013      	beq.n	800847e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008456:	e023      	b.n	80084a0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d007      	beq.n	8008470 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008460:	f000 f83c 	bl	80084dc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008464:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	4a0f      	ldr	r2, [pc, #60]	; (80084a8 <HAL_PCDEx_LPM_Callback+0x68>)
 800846a:	f023 0306 	bic.w	r3, r3, #6
 800846e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fb9a 	bl	8006bb0 <USBD_LL_Resume>
    break;
 800847c:	e010      	b.n	80084a0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe fb7e 	bl	8006b86 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d005      	beq.n	800849e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	4a04      	ldr	r2, [pc, #16]	; (80084a8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008498:	f043 0306 	orr.w	r3, r3, #6
 800849c:	6113      	str	r3, [r2, #16]
    break;
 800849e:	bf00      	nop
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed00 	.word	0xe000ed00

080084ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084b4:	4b03      	ldr	r3, [pc, #12]	; (80084c4 <USBD_static_malloc+0x18>)
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	2000037c 	.word	0x2000037c

080084c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80084e0:	f7f7 ffb5 	bl	800044e <SystemClock_Config>
}
 80084e4:	bf00      	nop
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d817      	bhi.n	800852c <USBD_Get_USB_Status+0x44>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <USBD_Get_USB_Status+0x1c>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008515 	.word	0x08008515
 8008508:	0800851b 	.word	0x0800851b
 800850c:	08008521 	.word	0x08008521
 8008510:	08008527 	.word	0x08008527
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
    break;
 8008518:	e00b      	b.n	8008532 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800851a:	2303      	movs	r3, #3
 800851c:	73fb      	strb	r3, [r7, #15]
    break;
 800851e:	e008      	b.n	8008532 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008520:	2301      	movs	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]
    break;
 8008524:	e005      	b.n	8008532 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008526:	2303      	movs	r3, #3
 8008528:	73fb      	strb	r3, [r7, #15]
    break;
 800852a:	e002      	b.n	8008532 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800852c:	2303      	movs	r3, #3
 800852e:	73fb      	strb	r3, [r7, #15]
    break;
 8008530:	bf00      	nop
  }
  return usb_status;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <__errno>:
 8008540:	4b01      	ldr	r3, [pc, #4]	; (8008548 <__errno+0x8>)
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	20000184 	.word	0x20000184

0800854c <__libc_init_array>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	4e0d      	ldr	r6, [pc, #52]	; (8008584 <__libc_init_array+0x38>)
 8008550:	4c0d      	ldr	r4, [pc, #52]	; (8008588 <__libc_init_array+0x3c>)
 8008552:	1ba4      	subs	r4, r4, r6
 8008554:	10a4      	asrs	r4, r4, #2
 8008556:	2500      	movs	r5, #0
 8008558:	42a5      	cmp	r5, r4
 800855a:	d109      	bne.n	8008570 <__libc_init_array+0x24>
 800855c:	4e0b      	ldr	r6, [pc, #44]	; (800858c <__libc_init_array+0x40>)
 800855e:	4c0c      	ldr	r4, [pc, #48]	; (8008590 <__libc_init_array+0x44>)
 8008560:	f000 ff96 	bl	8009490 <_init>
 8008564:	1ba4      	subs	r4, r4, r6
 8008566:	10a4      	asrs	r4, r4, #2
 8008568:	2500      	movs	r5, #0
 800856a:	42a5      	cmp	r5, r4
 800856c:	d105      	bne.n	800857a <__libc_init_array+0x2e>
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008574:	4798      	blx	r3
 8008576:	3501      	adds	r5, #1
 8008578:	e7ee      	b.n	8008558 <__libc_init_array+0xc>
 800857a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800857e:	4798      	blx	r3
 8008580:	3501      	adds	r5, #1
 8008582:	e7f2      	b.n	800856a <__libc_init_array+0x1e>
 8008584:	08009940 	.word	0x08009940
 8008588:	08009940 	.word	0x08009940
 800858c:	08009940 	.word	0x08009940
 8008590:	08009944 	.word	0x08009944

08008594 <__locale_ctype_ptr>:
 8008594:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <__locale_ctype_ptr+0x14>)
 8008596:	4a05      	ldr	r2, [pc, #20]	; (80085ac <__locale_ctype_ptr+0x18>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	2b00      	cmp	r3, #0
 800859e:	bf08      	it	eq
 80085a0:	4613      	moveq	r3, r2
 80085a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80085a6:	4770      	bx	lr
 80085a8:	20000184 	.word	0x20000184
 80085ac:	200001e8 	.word	0x200001e8

080085b0 <__ascii_mbtowc>:
 80085b0:	b082      	sub	sp, #8
 80085b2:	b901      	cbnz	r1, 80085b6 <__ascii_mbtowc+0x6>
 80085b4:	a901      	add	r1, sp, #4
 80085b6:	b142      	cbz	r2, 80085ca <__ascii_mbtowc+0x1a>
 80085b8:	b14b      	cbz	r3, 80085ce <__ascii_mbtowc+0x1e>
 80085ba:	7813      	ldrb	r3, [r2, #0]
 80085bc:	600b      	str	r3, [r1, #0]
 80085be:	7812      	ldrb	r2, [r2, #0]
 80085c0:	1c10      	adds	r0, r2, #0
 80085c2:	bf18      	it	ne
 80085c4:	2001      	movne	r0, #1
 80085c6:	b002      	add	sp, #8
 80085c8:	4770      	bx	lr
 80085ca:	4610      	mov	r0, r2
 80085cc:	e7fb      	b.n	80085c6 <__ascii_mbtowc+0x16>
 80085ce:	f06f 0001 	mvn.w	r0, #1
 80085d2:	e7f8      	b.n	80085c6 <__ascii_mbtowc+0x16>

080085d4 <memset>:
 80085d4:	4402      	add	r2, r0
 80085d6:	4603      	mov	r3, r0
 80085d8:	4293      	cmp	r3, r2
 80085da:	d100      	bne.n	80085de <memset+0xa>
 80085dc:	4770      	bx	lr
 80085de:	f803 1b01 	strb.w	r1, [r3], #1
 80085e2:	e7f9      	b.n	80085d8 <memset+0x4>

080085e4 <iprintf>:
 80085e4:	b40f      	push	{r0, r1, r2, r3}
 80085e6:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <iprintf+0x2c>)
 80085e8:	b513      	push	{r0, r1, r4, lr}
 80085ea:	681c      	ldr	r4, [r3, #0]
 80085ec:	b124      	cbz	r4, 80085f8 <iprintf+0x14>
 80085ee:	69a3      	ldr	r3, [r4, #24]
 80085f0:	b913      	cbnz	r3, 80085f8 <iprintf+0x14>
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 fa30 	bl	8008a58 <__sinit>
 80085f8:	ab05      	add	r3, sp, #20
 80085fa:	9a04      	ldr	r2, [sp, #16]
 80085fc:	68a1      	ldr	r1, [r4, #8]
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fbe9 	bl	8008dd8 <_vfiprintf_r>
 8008606:	b002      	add	sp, #8
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	b004      	add	sp, #16
 800860e:	4770      	bx	lr
 8008610:	20000184 	.word	0x20000184

08008614 <_puts_r>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	460e      	mov	r6, r1
 8008618:	4605      	mov	r5, r0
 800861a:	b118      	cbz	r0, 8008624 <_puts_r+0x10>
 800861c:	6983      	ldr	r3, [r0, #24]
 800861e:	b90b      	cbnz	r3, 8008624 <_puts_r+0x10>
 8008620:	f000 fa1a 	bl	8008a58 <__sinit>
 8008624:	69ab      	ldr	r3, [r5, #24]
 8008626:	68ac      	ldr	r4, [r5, #8]
 8008628:	b913      	cbnz	r3, 8008630 <_puts_r+0x1c>
 800862a:	4628      	mov	r0, r5
 800862c:	f000 fa14 	bl	8008a58 <__sinit>
 8008630:	4b23      	ldr	r3, [pc, #140]	; (80086c0 <_puts_r+0xac>)
 8008632:	429c      	cmp	r4, r3
 8008634:	d117      	bne.n	8008666 <_puts_r+0x52>
 8008636:	686c      	ldr	r4, [r5, #4]
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	071b      	lsls	r3, r3, #28
 800863c:	d51d      	bpl.n	800867a <_puts_r+0x66>
 800863e:	6923      	ldr	r3, [r4, #16]
 8008640:	b1db      	cbz	r3, 800867a <_puts_r+0x66>
 8008642:	3e01      	subs	r6, #1
 8008644:	68a3      	ldr	r3, [r4, #8]
 8008646:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800864a:	3b01      	subs	r3, #1
 800864c:	60a3      	str	r3, [r4, #8]
 800864e:	b9e9      	cbnz	r1, 800868c <_puts_r+0x78>
 8008650:	2b00      	cmp	r3, #0
 8008652:	da2e      	bge.n	80086b2 <_puts_r+0x9e>
 8008654:	4622      	mov	r2, r4
 8008656:	210a      	movs	r1, #10
 8008658:	4628      	mov	r0, r5
 800865a:	f000 f83f 	bl	80086dc <__swbuf_r>
 800865e:	3001      	adds	r0, #1
 8008660:	d011      	beq.n	8008686 <_puts_r+0x72>
 8008662:	200a      	movs	r0, #10
 8008664:	e011      	b.n	800868a <_puts_r+0x76>
 8008666:	4b17      	ldr	r3, [pc, #92]	; (80086c4 <_puts_r+0xb0>)
 8008668:	429c      	cmp	r4, r3
 800866a:	d101      	bne.n	8008670 <_puts_r+0x5c>
 800866c:	68ac      	ldr	r4, [r5, #8]
 800866e:	e7e3      	b.n	8008638 <_puts_r+0x24>
 8008670:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <_puts_r+0xb4>)
 8008672:	429c      	cmp	r4, r3
 8008674:	bf08      	it	eq
 8008676:	68ec      	ldreq	r4, [r5, #12]
 8008678:	e7de      	b.n	8008638 <_puts_r+0x24>
 800867a:	4621      	mov	r1, r4
 800867c:	4628      	mov	r0, r5
 800867e:	f000 f88d 	bl	800879c <__swsetup_r>
 8008682:	2800      	cmp	r0, #0
 8008684:	d0dd      	beq.n	8008642 <_puts_r+0x2e>
 8008686:	f04f 30ff 	mov.w	r0, #4294967295
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	2b00      	cmp	r3, #0
 800868e:	da04      	bge.n	800869a <_puts_r+0x86>
 8008690:	69a2      	ldr	r2, [r4, #24]
 8008692:	429a      	cmp	r2, r3
 8008694:	dc06      	bgt.n	80086a4 <_puts_r+0x90>
 8008696:	290a      	cmp	r1, #10
 8008698:	d004      	beq.n	80086a4 <_puts_r+0x90>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	7019      	strb	r1, [r3, #0]
 80086a2:	e7cf      	b.n	8008644 <_puts_r+0x30>
 80086a4:	4622      	mov	r2, r4
 80086a6:	4628      	mov	r0, r5
 80086a8:	f000 f818 	bl	80086dc <__swbuf_r>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d1c9      	bne.n	8008644 <_puts_r+0x30>
 80086b0:	e7e9      	b.n	8008686 <_puts_r+0x72>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	200a      	movs	r0, #10
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	6022      	str	r2, [r4, #0]
 80086ba:	7018      	strb	r0, [r3, #0]
 80086bc:	e7e5      	b.n	800868a <_puts_r+0x76>
 80086be:	bf00      	nop
 80086c0:	080098cc 	.word	0x080098cc
 80086c4:	080098ec 	.word	0x080098ec
 80086c8:	080098ac 	.word	0x080098ac

080086cc <puts>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <puts+0xc>)
 80086ce:	4601      	mov	r1, r0
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f7ff bf9f 	b.w	8008614 <_puts_r>
 80086d6:	bf00      	nop
 80086d8:	20000184 	.word	0x20000184

080086dc <__swbuf_r>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	460e      	mov	r6, r1
 80086e0:	4614      	mov	r4, r2
 80086e2:	4605      	mov	r5, r0
 80086e4:	b118      	cbz	r0, 80086ee <__swbuf_r+0x12>
 80086e6:	6983      	ldr	r3, [r0, #24]
 80086e8:	b90b      	cbnz	r3, 80086ee <__swbuf_r+0x12>
 80086ea:	f000 f9b5 	bl	8008a58 <__sinit>
 80086ee:	4b21      	ldr	r3, [pc, #132]	; (8008774 <__swbuf_r+0x98>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	d12a      	bne.n	800874a <__swbuf_r+0x6e>
 80086f4:	686c      	ldr	r4, [r5, #4]
 80086f6:	69a3      	ldr	r3, [r4, #24]
 80086f8:	60a3      	str	r3, [r4, #8]
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	071a      	lsls	r2, r3, #28
 80086fe:	d52e      	bpl.n	800875e <__swbuf_r+0x82>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	b363      	cbz	r3, 800875e <__swbuf_r+0x82>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	6820      	ldr	r0, [r4, #0]
 8008708:	1ac0      	subs	r0, r0, r3
 800870a:	6963      	ldr	r3, [r4, #20]
 800870c:	b2f6      	uxtb	r6, r6
 800870e:	4283      	cmp	r3, r0
 8008710:	4637      	mov	r7, r6
 8008712:	dc04      	bgt.n	800871e <__swbuf_r+0x42>
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	f000 f934 	bl	8008984 <_fflush_r>
 800871c:	bb28      	cbnz	r0, 800876a <__swbuf_r+0x8e>
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	3b01      	subs	r3, #1
 8008722:	60a3      	str	r3, [r4, #8]
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	6022      	str	r2, [r4, #0]
 800872a:	701e      	strb	r6, [r3, #0]
 800872c:	6963      	ldr	r3, [r4, #20]
 800872e:	3001      	adds	r0, #1
 8008730:	4283      	cmp	r3, r0
 8008732:	d004      	beq.n	800873e <__swbuf_r+0x62>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	07db      	lsls	r3, r3, #31
 8008738:	d519      	bpl.n	800876e <__swbuf_r+0x92>
 800873a:	2e0a      	cmp	r6, #10
 800873c:	d117      	bne.n	800876e <__swbuf_r+0x92>
 800873e:	4621      	mov	r1, r4
 8008740:	4628      	mov	r0, r5
 8008742:	f000 f91f 	bl	8008984 <_fflush_r>
 8008746:	b190      	cbz	r0, 800876e <__swbuf_r+0x92>
 8008748:	e00f      	b.n	800876a <__swbuf_r+0x8e>
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <__swbuf_r+0x9c>)
 800874c:	429c      	cmp	r4, r3
 800874e:	d101      	bne.n	8008754 <__swbuf_r+0x78>
 8008750:	68ac      	ldr	r4, [r5, #8]
 8008752:	e7d0      	b.n	80086f6 <__swbuf_r+0x1a>
 8008754:	4b09      	ldr	r3, [pc, #36]	; (800877c <__swbuf_r+0xa0>)
 8008756:	429c      	cmp	r4, r3
 8008758:	bf08      	it	eq
 800875a:	68ec      	ldreq	r4, [r5, #12]
 800875c:	e7cb      	b.n	80086f6 <__swbuf_r+0x1a>
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f81b 	bl	800879c <__swsetup_r>
 8008766:	2800      	cmp	r0, #0
 8008768:	d0cc      	beq.n	8008704 <__swbuf_r+0x28>
 800876a:	f04f 37ff 	mov.w	r7, #4294967295
 800876e:	4638      	mov	r0, r7
 8008770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008772:	bf00      	nop
 8008774:	080098cc 	.word	0x080098cc
 8008778:	080098ec 	.word	0x080098ec
 800877c:	080098ac 	.word	0x080098ac

08008780 <__ascii_wctomb>:
 8008780:	b149      	cbz	r1, 8008796 <__ascii_wctomb+0x16>
 8008782:	2aff      	cmp	r2, #255	; 0xff
 8008784:	bf85      	ittet	hi
 8008786:	238a      	movhi	r3, #138	; 0x8a
 8008788:	6003      	strhi	r3, [r0, #0]
 800878a:	700a      	strbls	r2, [r1, #0]
 800878c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008790:	bf98      	it	ls
 8008792:	2001      	movls	r0, #1
 8008794:	4770      	bx	lr
 8008796:	4608      	mov	r0, r1
 8008798:	4770      	bx	lr
	...

0800879c <__swsetup_r>:
 800879c:	4b32      	ldr	r3, [pc, #200]	; (8008868 <__swsetup_r+0xcc>)
 800879e:	b570      	push	{r4, r5, r6, lr}
 80087a0:	681d      	ldr	r5, [r3, #0]
 80087a2:	4606      	mov	r6, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	b125      	cbz	r5, 80087b2 <__swsetup_r+0x16>
 80087a8:	69ab      	ldr	r3, [r5, #24]
 80087aa:	b913      	cbnz	r3, 80087b2 <__swsetup_r+0x16>
 80087ac:	4628      	mov	r0, r5
 80087ae:	f000 f953 	bl	8008a58 <__sinit>
 80087b2:	4b2e      	ldr	r3, [pc, #184]	; (800886c <__swsetup_r+0xd0>)
 80087b4:	429c      	cmp	r4, r3
 80087b6:	d10f      	bne.n	80087d8 <__swsetup_r+0x3c>
 80087b8:	686c      	ldr	r4, [r5, #4]
 80087ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	0715      	lsls	r5, r2, #28
 80087c2:	d42c      	bmi.n	800881e <__swsetup_r+0x82>
 80087c4:	06d0      	lsls	r0, r2, #27
 80087c6:	d411      	bmi.n	80087ec <__swsetup_r+0x50>
 80087c8:	2209      	movs	r2, #9
 80087ca:	6032      	str	r2, [r6, #0]
 80087cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	f04f 30ff 	mov.w	r0, #4294967295
 80087d6:	e03e      	b.n	8008856 <__swsetup_r+0xba>
 80087d8:	4b25      	ldr	r3, [pc, #148]	; (8008870 <__swsetup_r+0xd4>)
 80087da:	429c      	cmp	r4, r3
 80087dc:	d101      	bne.n	80087e2 <__swsetup_r+0x46>
 80087de:	68ac      	ldr	r4, [r5, #8]
 80087e0:	e7eb      	b.n	80087ba <__swsetup_r+0x1e>
 80087e2:	4b24      	ldr	r3, [pc, #144]	; (8008874 <__swsetup_r+0xd8>)
 80087e4:	429c      	cmp	r4, r3
 80087e6:	bf08      	it	eq
 80087e8:	68ec      	ldreq	r4, [r5, #12]
 80087ea:	e7e6      	b.n	80087ba <__swsetup_r+0x1e>
 80087ec:	0751      	lsls	r1, r2, #29
 80087ee:	d512      	bpl.n	8008816 <__swsetup_r+0x7a>
 80087f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087f2:	b141      	cbz	r1, 8008806 <__swsetup_r+0x6a>
 80087f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087f8:	4299      	cmp	r1, r3
 80087fa:	d002      	beq.n	8008802 <__swsetup_r+0x66>
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 fa19 	bl	8008c34 <_free_r>
 8008802:	2300      	movs	r3, #0
 8008804:	6363      	str	r3, [r4, #52]	; 0x34
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	2300      	movs	r3, #0
 8008810:	6063      	str	r3, [r4, #4]
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f043 0308 	orr.w	r3, r3, #8
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	b94b      	cbnz	r3, 8008836 <__swsetup_r+0x9a>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882c:	d003      	beq.n	8008836 <__swsetup_r+0x9a>
 800882e:	4621      	mov	r1, r4
 8008830:	4630      	mov	r0, r6
 8008832:	f000 f9bf 	bl	8008bb4 <__smakebuf_r>
 8008836:	89a2      	ldrh	r2, [r4, #12]
 8008838:	f012 0301 	ands.w	r3, r2, #1
 800883c:	d00c      	beq.n	8008858 <__swsetup_r+0xbc>
 800883e:	2300      	movs	r3, #0
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	6963      	ldr	r3, [r4, #20]
 8008844:	425b      	negs	r3, r3
 8008846:	61a3      	str	r3, [r4, #24]
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	b953      	cbnz	r3, 8008862 <__swsetup_r+0xc6>
 800884c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008850:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008854:	d1ba      	bne.n	80087cc <__swsetup_r+0x30>
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	0792      	lsls	r2, r2, #30
 800885a:	bf58      	it	pl
 800885c:	6963      	ldrpl	r3, [r4, #20]
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	e7f2      	b.n	8008848 <__swsetup_r+0xac>
 8008862:	2000      	movs	r0, #0
 8008864:	e7f7      	b.n	8008856 <__swsetup_r+0xba>
 8008866:	bf00      	nop
 8008868:	20000184 	.word	0x20000184
 800886c:	080098cc 	.word	0x080098cc
 8008870:	080098ec 	.word	0x080098ec
 8008874:	080098ac 	.word	0x080098ac

08008878 <__sflush_r>:
 8008878:	898a      	ldrh	r2, [r1, #12]
 800887a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887e:	4605      	mov	r5, r0
 8008880:	0710      	lsls	r0, r2, #28
 8008882:	460c      	mov	r4, r1
 8008884:	d458      	bmi.n	8008938 <__sflush_r+0xc0>
 8008886:	684b      	ldr	r3, [r1, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	dc05      	bgt.n	8008898 <__sflush_r+0x20>
 800888c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800888e:	2b00      	cmp	r3, #0
 8008890:	dc02      	bgt.n	8008898 <__sflush_r+0x20>
 8008892:	2000      	movs	r0, #0
 8008894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800889a:	2e00      	cmp	r6, #0
 800889c:	d0f9      	beq.n	8008892 <__sflush_r+0x1a>
 800889e:	2300      	movs	r3, #0
 80088a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088a4:	682f      	ldr	r7, [r5, #0]
 80088a6:	6a21      	ldr	r1, [r4, #32]
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	d032      	beq.n	8008912 <__sflush_r+0x9a>
 80088ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	075a      	lsls	r2, r3, #29
 80088b2:	d505      	bpl.n	80088c0 <__sflush_r+0x48>
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	1ac0      	subs	r0, r0, r3
 80088b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ba:	b10b      	cbz	r3, 80088c0 <__sflush_r+0x48>
 80088bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088be:	1ac0      	subs	r0, r0, r3
 80088c0:	2300      	movs	r3, #0
 80088c2:	4602      	mov	r2, r0
 80088c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c6:	6a21      	ldr	r1, [r4, #32]
 80088c8:	4628      	mov	r0, r5
 80088ca:	47b0      	blx	r6
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	d106      	bne.n	80088e0 <__sflush_r+0x68>
 80088d2:	6829      	ldr	r1, [r5, #0]
 80088d4:	291d      	cmp	r1, #29
 80088d6:	d848      	bhi.n	800896a <__sflush_r+0xf2>
 80088d8:	4a29      	ldr	r2, [pc, #164]	; (8008980 <__sflush_r+0x108>)
 80088da:	40ca      	lsrs	r2, r1
 80088dc:	07d6      	lsls	r6, r2, #31
 80088de:	d544      	bpl.n	800896a <__sflush_r+0xf2>
 80088e0:	2200      	movs	r2, #0
 80088e2:	6062      	str	r2, [r4, #4]
 80088e4:	04d9      	lsls	r1, r3, #19
 80088e6:	6922      	ldr	r2, [r4, #16]
 80088e8:	6022      	str	r2, [r4, #0]
 80088ea:	d504      	bpl.n	80088f6 <__sflush_r+0x7e>
 80088ec:	1c42      	adds	r2, r0, #1
 80088ee:	d101      	bne.n	80088f4 <__sflush_r+0x7c>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b903      	cbnz	r3, 80088f6 <__sflush_r+0x7e>
 80088f4:	6560      	str	r0, [r4, #84]	; 0x54
 80088f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f8:	602f      	str	r7, [r5, #0]
 80088fa:	2900      	cmp	r1, #0
 80088fc:	d0c9      	beq.n	8008892 <__sflush_r+0x1a>
 80088fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008902:	4299      	cmp	r1, r3
 8008904:	d002      	beq.n	800890c <__sflush_r+0x94>
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f994 	bl	8008c34 <_free_r>
 800890c:	2000      	movs	r0, #0
 800890e:	6360      	str	r0, [r4, #52]	; 0x34
 8008910:	e7c0      	b.n	8008894 <__sflush_r+0x1c>
 8008912:	2301      	movs	r3, #1
 8008914:	4628      	mov	r0, r5
 8008916:	47b0      	blx	r6
 8008918:	1c41      	adds	r1, r0, #1
 800891a:	d1c8      	bne.n	80088ae <__sflush_r+0x36>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0c5      	beq.n	80088ae <__sflush_r+0x36>
 8008922:	2b1d      	cmp	r3, #29
 8008924:	d001      	beq.n	800892a <__sflush_r+0xb2>
 8008926:	2b16      	cmp	r3, #22
 8008928:	d101      	bne.n	800892e <__sflush_r+0xb6>
 800892a:	602f      	str	r7, [r5, #0]
 800892c:	e7b1      	b.n	8008892 <__sflush_r+0x1a>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	e7ad      	b.n	8008894 <__sflush_r+0x1c>
 8008938:	690f      	ldr	r7, [r1, #16]
 800893a:	2f00      	cmp	r7, #0
 800893c:	d0a9      	beq.n	8008892 <__sflush_r+0x1a>
 800893e:	0793      	lsls	r3, r2, #30
 8008940:	680e      	ldr	r6, [r1, #0]
 8008942:	bf08      	it	eq
 8008944:	694b      	ldreq	r3, [r1, #20]
 8008946:	600f      	str	r7, [r1, #0]
 8008948:	bf18      	it	ne
 800894a:	2300      	movne	r3, #0
 800894c:	eba6 0807 	sub.w	r8, r6, r7
 8008950:	608b      	str	r3, [r1, #8]
 8008952:	f1b8 0f00 	cmp.w	r8, #0
 8008956:	dd9c      	ble.n	8008892 <__sflush_r+0x1a>
 8008958:	4643      	mov	r3, r8
 800895a:	463a      	mov	r2, r7
 800895c:	6a21      	ldr	r1, [r4, #32]
 800895e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008960:	4628      	mov	r0, r5
 8008962:	47b0      	blx	r6
 8008964:	2800      	cmp	r0, #0
 8008966:	dc06      	bgt.n	8008976 <__sflush_r+0xfe>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	e78e      	b.n	8008894 <__sflush_r+0x1c>
 8008976:	4407      	add	r7, r0
 8008978:	eba8 0800 	sub.w	r8, r8, r0
 800897c:	e7e9      	b.n	8008952 <__sflush_r+0xda>
 800897e:	bf00      	nop
 8008980:	20400001 	.word	0x20400001

08008984 <_fflush_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	4605      	mov	r5, r0
 800898a:	460c      	mov	r4, r1
 800898c:	b1db      	cbz	r3, 80089c6 <_fflush_r+0x42>
 800898e:	b118      	cbz	r0, 8008998 <_fflush_r+0x14>
 8008990:	6983      	ldr	r3, [r0, #24]
 8008992:	b90b      	cbnz	r3, 8008998 <_fflush_r+0x14>
 8008994:	f000 f860 	bl	8008a58 <__sinit>
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <_fflush_r+0x48>)
 800899a:	429c      	cmp	r4, r3
 800899c:	d109      	bne.n	80089b2 <_fflush_r+0x2e>
 800899e:	686c      	ldr	r4, [r5, #4]
 80089a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a4:	b17b      	cbz	r3, 80089c6 <_fflush_r+0x42>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ae:	f7ff bf63 	b.w	8008878 <__sflush_r>
 80089b2:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <_fflush_r+0x4c>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	d101      	bne.n	80089bc <_fflush_r+0x38>
 80089b8:	68ac      	ldr	r4, [r5, #8]
 80089ba:	e7f1      	b.n	80089a0 <_fflush_r+0x1c>
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <_fflush_r+0x50>)
 80089be:	429c      	cmp	r4, r3
 80089c0:	bf08      	it	eq
 80089c2:	68ec      	ldreq	r4, [r5, #12]
 80089c4:	e7ec      	b.n	80089a0 <_fflush_r+0x1c>
 80089c6:	2000      	movs	r0, #0
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	080098cc 	.word	0x080098cc
 80089d0:	080098ec 	.word	0x080098ec
 80089d4:	080098ac 	.word	0x080098ac

080089d8 <std>:
 80089d8:	2300      	movs	r3, #0
 80089da:	b510      	push	{r4, lr}
 80089dc:	4604      	mov	r4, r0
 80089de:	e9c0 3300 	strd	r3, r3, [r0]
 80089e2:	6083      	str	r3, [r0, #8]
 80089e4:	8181      	strh	r1, [r0, #12]
 80089e6:	6643      	str	r3, [r0, #100]	; 0x64
 80089e8:	81c2      	strh	r2, [r0, #14]
 80089ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ee:	6183      	str	r3, [r0, #24]
 80089f0:	4619      	mov	r1, r3
 80089f2:	2208      	movs	r2, #8
 80089f4:	305c      	adds	r0, #92	; 0x5c
 80089f6:	f7ff fded 	bl	80085d4 <memset>
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <std+0x38>)
 80089fc:	6263      	str	r3, [r4, #36]	; 0x24
 80089fe:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <std+0x3c>)
 8008a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a02:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <std+0x40>)
 8008a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <std+0x44>)
 8008a08:	6224      	str	r4, [r4, #32]
 8008a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a0c:	bd10      	pop	{r4, pc}
 8008a0e:	bf00      	nop
 8008a10:	08009335 	.word	0x08009335
 8008a14:	08009357 	.word	0x08009357
 8008a18:	0800938f 	.word	0x0800938f
 8008a1c:	080093b3 	.word	0x080093b3

08008a20 <_cleanup_r>:
 8008a20:	4901      	ldr	r1, [pc, #4]	; (8008a28 <_cleanup_r+0x8>)
 8008a22:	f000 b885 	b.w	8008b30 <_fwalk_reent>
 8008a26:	bf00      	nop
 8008a28:	08008985 	.word	0x08008985

08008a2c <__sfmoreglue>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	1e4a      	subs	r2, r1, #1
 8008a30:	2568      	movs	r5, #104	; 0x68
 8008a32:	4355      	muls	r5, r2
 8008a34:	460e      	mov	r6, r1
 8008a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a3a:	f000 f949 	bl	8008cd0 <_malloc_r>
 8008a3e:	4604      	mov	r4, r0
 8008a40:	b140      	cbz	r0, 8008a54 <__sfmoreglue+0x28>
 8008a42:	2100      	movs	r1, #0
 8008a44:	e9c0 1600 	strd	r1, r6, [r0]
 8008a48:	300c      	adds	r0, #12
 8008a4a:	60a0      	str	r0, [r4, #8]
 8008a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a50:	f7ff fdc0 	bl	80085d4 <memset>
 8008a54:	4620      	mov	r0, r4
 8008a56:	bd70      	pop	{r4, r5, r6, pc}

08008a58 <__sinit>:
 8008a58:	6983      	ldr	r3, [r0, #24]
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	bb33      	cbnz	r3, 8008aae <__sinit+0x56>
 8008a60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008a64:	6503      	str	r3, [r0, #80]	; 0x50
 8008a66:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <__sinit+0x58>)
 8008a68:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <__sinit+0x5c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6282      	str	r2, [r0, #40]	; 0x28
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	bf04      	itt	eq
 8008a72:	2301      	moveq	r3, #1
 8008a74:	6183      	streq	r3, [r0, #24]
 8008a76:	f000 f81f 	bl	8008ab8 <__sfp>
 8008a7a:	6060      	str	r0, [r4, #4]
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 f81b 	bl	8008ab8 <__sfp>
 8008a82:	60a0      	str	r0, [r4, #8]
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 f817 	bl	8008ab8 <__sfp>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	60e0      	str	r0, [r4, #12]
 8008a8e:	2104      	movs	r1, #4
 8008a90:	6860      	ldr	r0, [r4, #4]
 8008a92:	f7ff ffa1 	bl	80089d8 <std>
 8008a96:	2201      	movs	r2, #1
 8008a98:	2109      	movs	r1, #9
 8008a9a:	68a0      	ldr	r0, [r4, #8]
 8008a9c:	f7ff ff9c 	bl	80089d8 <std>
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	2112      	movs	r1, #18
 8008aa4:	68e0      	ldr	r0, [r4, #12]
 8008aa6:	f7ff ff97 	bl	80089d8 <std>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61a3      	str	r3, [r4, #24]
 8008aae:	bd10      	pop	{r4, pc}
 8008ab0:	0800979c 	.word	0x0800979c
 8008ab4:	08008a21 	.word	0x08008a21

08008ab8 <__sfp>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <__sfp+0x70>)
 8008abc:	681e      	ldr	r6, [r3, #0]
 8008abe:	69b3      	ldr	r3, [r6, #24]
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	b913      	cbnz	r3, 8008aca <__sfp+0x12>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ffc7 	bl	8008a58 <__sinit>
 8008aca:	3648      	adds	r6, #72	; 0x48
 8008acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	d503      	bpl.n	8008adc <__sfp+0x24>
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	b133      	cbz	r3, 8008ae6 <__sfp+0x2e>
 8008ad8:	6836      	ldr	r6, [r6, #0]
 8008ada:	e7f7      	b.n	8008acc <__sfp+0x14>
 8008adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ae0:	b16d      	cbz	r5, 8008afe <__sfp+0x46>
 8008ae2:	3468      	adds	r4, #104	; 0x68
 8008ae4:	e7f4      	b.n	8008ad0 <__sfp+0x18>
 8008ae6:	2104      	movs	r1, #4
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7ff ff9f 	bl	8008a2c <__sfmoreglue>
 8008aee:	6030      	str	r0, [r6, #0]
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d1f1      	bne.n	8008ad8 <__sfp+0x20>
 8008af4:	230c      	movs	r3, #12
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	4604      	mov	r4, r0
 8008afa:	4620      	mov	r0, r4
 8008afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <__sfp+0x74>)
 8008b00:	6665      	str	r5, [r4, #100]	; 0x64
 8008b02:	e9c4 5500 	strd	r5, r5, [r4]
 8008b06:	60a5      	str	r5, [r4, #8]
 8008b08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b10:	2208      	movs	r2, #8
 8008b12:	4629      	mov	r1, r5
 8008b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b18:	f7ff fd5c 	bl	80085d4 <memset>
 8008b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b24:	e7e9      	b.n	8008afa <__sfp+0x42>
 8008b26:	bf00      	nop
 8008b28:	0800979c 	.word	0x0800979c
 8008b2c:	ffff0001 	.word	0xffff0001

08008b30 <_fwalk_reent>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	b914      	cbnz	r4, 8008b46 <_fwalk_reent+0x16>
 8008b40:	4630      	mov	r0, r6
 8008b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008b4a:	3f01      	subs	r7, #1
 8008b4c:	d501      	bpl.n	8008b52 <_fwalk_reent+0x22>
 8008b4e:	6824      	ldr	r4, [r4, #0]
 8008b50:	e7f5      	b.n	8008b3e <_fwalk_reent+0xe>
 8008b52:	89ab      	ldrh	r3, [r5, #12]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d907      	bls.n	8008b68 <_fwalk_reent+0x38>
 8008b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	d003      	beq.n	8008b68 <_fwalk_reent+0x38>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4640      	mov	r0, r8
 8008b64:	47c8      	blx	r9
 8008b66:	4306      	orrs	r6, r0
 8008b68:	3568      	adds	r5, #104	; 0x68
 8008b6a:	e7ee      	b.n	8008b4a <_fwalk_reent+0x1a>

08008b6c <__swhatbuf_r>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	460e      	mov	r6, r1
 8008b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b74:	2900      	cmp	r1, #0
 8008b76:	b096      	sub	sp, #88	; 0x58
 8008b78:	4614      	mov	r4, r2
 8008b7a:	461d      	mov	r5, r3
 8008b7c:	da07      	bge.n	8008b8e <__swhatbuf_r+0x22>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	89b3      	ldrh	r3, [r6, #12]
 8008b84:	061a      	lsls	r2, r3, #24
 8008b86:	d410      	bmi.n	8008baa <__swhatbuf_r+0x3e>
 8008b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8c:	e00e      	b.n	8008bac <__swhatbuf_r+0x40>
 8008b8e:	466a      	mov	r2, sp
 8008b90:	f000 fc36 	bl	8009400 <_fstat_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dbf2      	blt.n	8008b7e <__swhatbuf_r+0x12>
 8008b98:	9a01      	ldr	r2, [sp, #4]
 8008b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ba2:	425a      	negs	r2, r3
 8008ba4:	415a      	adcs	r2, r3
 8008ba6:	602a      	str	r2, [r5, #0]
 8008ba8:	e7ee      	b.n	8008b88 <__swhatbuf_r+0x1c>
 8008baa:	2340      	movs	r3, #64	; 0x40
 8008bac:	2000      	movs	r0, #0
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	b016      	add	sp, #88	; 0x58
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}

08008bb4 <__smakebuf_r>:
 8008bb4:	898b      	ldrh	r3, [r1, #12]
 8008bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb8:	079d      	lsls	r5, r3, #30
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	d507      	bpl.n	8008bd0 <__smakebuf_r+0x1c>
 8008bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	6123      	str	r3, [r4, #16]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	6163      	str	r3, [r4, #20]
 8008bcc:	b002      	add	sp, #8
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	ab01      	add	r3, sp, #4
 8008bd2:	466a      	mov	r2, sp
 8008bd4:	f7ff ffca 	bl	8008b6c <__swhatbuf_r>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	4605      	mov	r5, r0
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f000 f877 	bl	8008cd0 <_malloc_r>
 8008be2:	b948      	cbnz	r0, 8008bf8 <__smakebuf_r+0x44>
 8008be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be8:	059a      	lsls	r2, r3, #22
 8008bea:	d4ef      	bmi.n	8008bcc <__smakebuf_r+0x18>
 8008bec:	f023 0303 	bic.w	r3, r3, #3
 8008bf0:	f043 0302 	orr.w	r3, r3, #2
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	e7e3      	b.n	8008bc0 <__smakebuf_r+0xc>
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <__smakebuf_r+0x7c>)
 8008bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	6020      	str	r0, [r4, #0]
 8008c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	6163      	str	r3, [r4, #20]
 8008c0a:	9b01      	ldr	r3, [sp, #4]
 8008c0c:	6120      	str	r0, [r4, #16]
 8008c0e:	b15b      	cbz	r3, 8008c28 <__smakebuf_r+0x74>
 8008c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 fc05 	bl	8009424 <_isatty_r>
 8008c1a:	b128      	cbz	r0, 8008c28 <__smakebuf_r+0x74>
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f023 0303 	bic.w	r3, r3, #3
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	431d      	orrs	r5, r3
 8008c2c:	81a5      	strh	r5, [r4, #12]
 8008c2e:	e7cd      	b.n	8008bcc <__smakebuf_r+0x18>
 8008c30:	08008a21 	.word	0x08008a21

08008c34 <_free_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4605      	mov	r5, r0
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d045      	beq.n	8008cc8 <_free_r+0x94>
 8008c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c40:	1f0c      	subs	r4, r1, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfb8      	it	lt
 8008c46:	18e4      	addlt	r4, r4, r3
 8008c48:	f000 fc0e 	bl	8009468 <__malloc_lock>
 8008c4c:	4a1f      	ldr	r2, [pc, #124]	; (8008ccc <_free_r+0x98>)
 8008c4e:	6813      	ldr	r3, [r2, #0]
 8008c50:	4610      	mov	r0, r2
 8008c52:	b933      	cbnz	r3, 8008c62 <_free_r+0x2e>
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	6014      	str	r4, [r2, #0]
 8008c58:	4628      	mov	r0, r5
 8008c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c5e:	f000 bc04 	b.w	800946a <__malloc_unlock>
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	d90c      	bls.n	8008c80 <_free_r+0x4c>
 8008c66:	6821      	ldr	r1, [r4, #0]
 8008c68:	1862      	adds	r2, r4, r1
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bf04      	itt	eq
 8008c6e:	681a      	ldreq	r2, [r3, #0]
 8008c70:	685b      	ldreq	r3, [r3, #4]
 8008c72:	6063      	str	r3, [r4, #4]
 8008c74:	bf04      	itt	eq
 8008c76:	1852      	addeq	r2, r2, r1
 8008c78:	6022      	streq	r2, [r4, #0]
 8008c7a:	6004      	str	r4, [r0, #0]
 8008c7c:	e7ec      	b.n	8008c58 <_free_r+0x24>
 8008c7e:	4613      	mov	r3, r2
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	b10a      	cbz	r2, 8008c88 <_free_r+0x54>
 8008c84:	42a2      	cmp	r2, r4
 8008c86:	d9fa      	bls.n	8008c7e <_free_r+0x4a>
 8008c88:	6819      	ldr	r1, [r3, #0]
 8008c8a:	1858      	adds	r0, r3, r1
 8008c8c:	42a0      	cmp	r0, r4
 8008c8e:	d10b      	bne.n	8008ca8 <_free_r+0x74>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	4401      	add	r1, r0
 8008c94:	1858      	adds	r0, r3, r1
 8008c96:	4282      	cmp	r2, r0
 8008c98:	6019      	str	r1, [r3, #0]
 8008c9a:	d1dd      	bne.n	8008c58 <_free_r+0x24>
 8008c9c:	6810      	ldr	r0, [r2, #0]
 8008c9e:	6852      	ldr	r2, [r2, #4]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	4401      	add	r1, r0
 8008ca4:	6019      	str	r1, [r3, #0]
 8008ca6:	e7d7      	b.n	8008c58 <_free_r+0x24>
 8008ca8:	d902      	bls.n	8008cb0 <_free_r+0x7c>
 8008caa:	230c      	movs	r3, #12
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	e7d3      	b.n	8008c58 <_free_r+0x24>
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	1821      	adds	r1, r4, r0
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	bf04      	itt	eq
 8008cb8:	6811      	ldreq	r1, [r2, #0]
 8008cba:	6852      	ldreq	r2, [r2, #4]
 8008cbc:	6062      	str	r2, [r4, #4]
 8008cbe:	bf04      	itt	eq
 8008cc0:	1809      	addeq	r1, r1, r0
 8008cc2:	6021      	streq	r1, [r4, #0]
 8008cc4:	605c      	str	r4, [r3, #4]
 8008cc6:	e7c7      	b.n	8008c58 <_free_r+0x24>
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
 8008cca:	bf00      	nop
 8008ccc:	2000059c 	.word	0x2000059c

08008cd0 <_malloc_r>:
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	1ccd      	adds	r5, r1, #3
 8008cd4:	f025 0503 	bic.w	r5, r5, #3
 8008cd8:	3508      	adds	r5, #8
 8008cda:	2d0c      	cmp	r5, #12
 8008cdc:	bf38      	it	cc
 8008cde:	250c      	movcc	r5, #12
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	db01      	blt.n	8008cea <_malloc_r+0x1a>
 8008ce6:	42a9      	cmp	r1, r5
 8008ce8:	d903      	bls.n	8008cf2 <_malloc_r+0x22>
 8008cea:	230c      	movs	r3, #12
 8008cec:	6033      	str	r3, [r6, #0]
 8008cee:	2000      	movs	r0, #0
 8008cf0:	bd70      	pop	{r4, r5, r6, pc}
 8008cf2:	f000 fbb9 	bl	8009468 <__malloc_lock>
 8008cf6:	4a21      	ldr	r2, [pc, #132]	; (8008d7c <_malloc_r+0xac>)
 8008cf8:	6814      	ldr	r4, [r2, #0]
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	b991      	cbnz	r1, 8008d24 <_malloc_r+0x54>
 8008cfe:	4c20      	ldr	r4, [pc, #128]	; (8008d80 <_malloc_r+0xb0>)
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	b91b      	cbnz	r3, 8008d0c <_malloc_r+0x3c>
 8008d04:	4630      	mov	r0, r6
 8008d06:	f000 fb05 	bl	8009314 <_sbrk_r>
 8008d0a:	6020      	str	r0, [r4, #0]
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f000 fb00 	bl	8009314 <_sbrk_r>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d124      	bne.n	8008d62 <_malloc_r+0x92>
 8008d18:	230c      	movs	r3, #12
 8008d1a:	6033      	str	r3, [r6, #0]
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f000 fba4 	bl	800946a <__malloc_unlock>
 8008d22:	e7e4      	b.n	8008cee <_malloc_r+0x1e>
 8008d24:	680b      	ldr	r3, [r1, #0]
 8008d26:	1b5b      	subs	r3, r3, r5
 8008d28:	d418      	bmi.n	8008d5c <_malloc_r+0x8c>
 8008d2a:	2b0b      	cmp	r3, #11
 8008d2c:	d90f      	bls.n	8008d4e <_malloc_r+0x7e>
 8008d2e:	600b      	str	r3, [r1, #0]
 8008d30:	50cd      	str	r5, [r1, r3]
 8008d32:	18cc      	adds	r4, r1, r3
 8008d34:	4630      	mov	r0, r6
 8008d36:	f000 fb98 	bl	800946a <__malloc_unlock>
 8008d3a:	f104 000b 	add.w	r0, r4, #11
 8008d3e:	1d23      	adds	r3, r4, #4
 8008d40:	f020 0007 	bic.w	r0, r0, #7
 8008d44:	1ac3      	subs	r3, r0, r3
 8008d46:	d0d3      	beq.n	8008cf0 <_malloc_r+0x20>
 8008d48:	425a      	negs	r2, r3
 8008d4a:	50e2      	str	r2, [r4, r3]
 8008d4c:	e7d0      	b.n	8008cf0 <_malloc_r+0x20>
 8008d4e:	428c      	cmp	r4, r1
 8008d50:	684b      	ldr	r3, [r1, #4]
 8008d52:	bf16      	itet	ne
 8008d54:	6063      	strne	r3, [r4, #4]
 8008d56:	6013      	streq	r3, [r2, #0]
 8008d58:	460c      	movne	r4, r1
 8008d5a:	e7eb      	b.n	8008d34 <_malloc_r+0x64>
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	6849      	ldr	r1, [r1, #4]
 8008d60:	e7cc      	b.n	8008cfc <_malloc_r+0x2c>
 8008d62:	1cc4      	adds	r4, r0, #3
 8008d64:	f024 0403 	bic.w	r4, r4, #3
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d005      	beq.n	8008d78 <_malloc_r+0xa8>
 8008d6c:	1a21      	subs	r1, r4, r0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 fad0 	bl	8009314 <_sbrk_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d0cf      	beq.n	8008d18 <_malloc_r+0x48>
 8008d78:	6025      	str	r5, [r4, #0]
 8008d7a:	e7db      	b.n	8008d34 <_malloc_r+0x64>
 8008d7c:	2000059c 	.word	0x2000059c
 8008d80:	200005a0 	.word	0x200005a0

08008d84 <__sfputc_r>:
 8008d84:	6893      	ldr	r3, [r2, #8]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	b410      	push	{r4}
 8008d8c:	6093      	str	r3, [r2, #8]
 8008d8e:	da08      	bge.n	8008da2 <__sfputc_r+0x1e>
 8008d90:	6994      	ldr	r4, [r2, #24]
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	db01      	blt.n	8008d9a <__sfputc_r+0x16>
 8008d96:	290a      	cmp	r1, #10
 8008d98:	d103      	bne.n	8008da2 <__sfputc_r+0x1e>
 8008d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9e:	f7ff bc9d 	b.w	80086dc <__swbuf_r>
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	1c58      	adds	r0, r3, #1
 8008da6:	6010      	str	r0, [r2, #0]
 8008da8:	7019      	strb	r1, [r3, #0]
 8008daa:	4608      	mov	r0, r1
 8008dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <__sfputs_r>:
 8008db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	18d5      	adds	r5, r2, r3
 8008dbc:	42ac      	cmp	r4, r5
 8008dbe:	d101      	bne.n	8008dc4 <__sfputs_r+0x12>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e007      	b.n	8008dd4 <__sfputs_r+0x22>
 8008dc4:	463a      	mov	r2, r7
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7ff ffda 	bl	8008d84 <__sfputc_r>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d1f3      	bne.n	8008dbc <__sfputs_r+0xa>
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dd8 <_vfiprintf_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	b09d      	sub	sp, #116	; 0x74
 8008de0:	4617      	mov	r7, r2
 8008de2:	461d      	mov	r5, r3
 8008de4:	4606      	mov	r6, r0
 8008de6:	b118      	cbz	r0, 8008df0 <_vfiprintf_r+0x18>
 8008de8:	6983      	ldr	r3, [r0, #24]
 8008dea:	b90b      	cbnz	r3, 8008df0 <_vfiprintf_r+0x18>
 8008dec:	f7ff fe34 	bl	8008a58 <__sinit>
 8008df0:	4b7c      	ldr	r3, [pc, #496]	; (8008fe4 <_vfiprintf_r+0x20c>)
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d158      	bne.n	8008ea8 <_vfiprintf_r+0xd0>
 8008df6:	6874      	ldr	r4, [r6, #4]
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	0718      	lsls	r0, r3, #28
 8008dfc:	d55e      	bpl.n	8008ebc <_vfiprintf_r+0xe4>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d05b      	beq.n	8008ebc <_vfiprintf_r+0xe4>
 8008e04:	2300      	movs	r3, #0
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e0e:	2330      	movs	r3, #48	; 0x30
 8008e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e14:	9503      	str	r5, [sp, #12]
 8008e16:	f04f 0b01 	mov.w	fp, #1
 8008e1a:	46b8      	mov	r8, r7
 8008e1c:	4645      	mov	r5, r8
 8008e1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e22:	b10b      	cbz	r3, 8008e28 <_vfiprintf_r+0x50>
 8008e24:	2b25      	cmp	r3, #37	; 0x25
 8008e26:	d154      	bne.n	8008ed2 <_vfiprintf_r+0xfa>
 8008e28:	ebb8 0a07 	subs.w	sl, r8, r7
 8008e2c:	d00b      	beq.n	8008e46 <_vfiprintf_r+0x6e>
 8008e2e:	4653      	mov	r3, sl
 8008e30:	463a      	mov	r2, r7
 8008e32:	4621      	mov	r1, r4
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff ffbc 	bl	8008db2 <__sfputs_r>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f000 80c2 	beq.w	8008fc4 <_vfiprintf_r+0x1ec>
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	4453      	add	r3, sl
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	f898 3000 	ldrb.w	r3, [r8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80ba 	beq.w	8008fc4 <_vfiprintf_r+0x1ec>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f04f 32ff 	mov.w	r2, #4294967295
 8008e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e62:	931a      	str	r3, [sp, #104]	; 0x68
 8008e64:	46a8      	mov	r8, r5
 8008e66:	2205      	movs	r2, #5
 8008e68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008e6c:	485e      	ldr	r0, [pc, #376]	; (8008fe8 <_vfiprintf_r+0x210>)
 8008e6e:	f7f7 f9d7 	bl	8000220 <memchr>
 8008e72:	9b04      	ldr	r3, [sp, #16]
 8008e74:	bb78      	cbnz	r0, 8008ed6 <_vfiprintf_r+0xfe>
 8008e76:	06d9      	lsls	r1, r3, #27
 8008e78:	bf44      	itt	mi
 8008e7a:	2220      	movmi	r2, #32
 8008e7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e80:	071a      	lsls	r2, r3, #28
 8008e82:	bf44      	itt	mi
 8008e84:	222b      	movmi	r2, #43	; 0x2b
 8008e86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e8a:	782a      	ldrb	r2, [r5, #0]
 8008e8c:	2a2a      	cmp	r2, #42	; 0x2a
 8008e8e:	d02a      	beq.n	8008ee6 <_vfiprintf_r+0x10e>
 8008e90:	9a07      	ldr	r2, [sp, #28]
 8008e92:	46a8      	mov	r8, r5
 8008e94:	2000      	movs	r0, #0
 8008e96:	250a      	movs	r5, #10
 8008e98:	4641      	mov	r1, r8
 8008e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9e:	3b30      	subs	r3, #48	; 0x30
 8008ea0:	2b09      	cmp	r3, #9
 8008ea2:	d969      	bls.n	8008f78 <_vfiprintf_r+0x1a0>
 8008ea4:	b360      	cbz	r0, 8008f00 <_vfiprintf_r+0x128>
 8008ea6:	e024      	b.n	8008ef2 <_vfiprintf_r+0x11a>
 8008ea8:	4b50      	ldr	r3, [pc, #320]	; (8008fec <_vfiprintf_r+0x214>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <_vfiprintf_r+0xda>
 8008eae:	68b4      	ldr	r4, [r6, #8]
 8008eb0:	e7a2      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008eb2:	4b4f      	ldr	r3, [pc, #316]	; (8008ff0 <_vfiprintf_r+0x218>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68f4      	ldreq	r4, [r6, #12]
 8008eba:	e79d      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff fc6c 	bl	800879c <__swsetup_r>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d09d      	beq.n	8008e04 <_vfiprintf_r+0x2c>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	b01d      	add	sp, #116	; 0x74
 8008ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed2:	46a8      	mov	r8, r5
 8008ed4:	e7a2      	b.n	8008e1c <_vfiprintf_r+0x44>
 8008ed6:	4a44      	ldr	r2, [pc, #272]	; (8008fe8 <_vfiprintf_r+0x210>)
 8008ed8:	1a80      	subs	r0, r0, r2
 8008eda:	fa0b f000 	lsl.w	r0, fp, r0
 8008ede:	4318      	orrs	r0, r3
 8008ee0:	9004      	str	r0, [sp, #16]
 8008ee2:	4645      	mov	r5, r8
 8008ee4:	e7be      	b.n	8008e64 <_vfiprintf_r+0x8c>
 8008ee6:	9a03      	ldr	r2, [sp, #12]
 8008ee8:	1d11      	adds	r1, r2, #4
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	9103      	str	r1, [sp, #12]
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	db01      	blt.n	8008ef6 <_vfiprintf_r+0x11e>
 8008ef2:	9207      	str	r2, [sp, #28]
 8008ef4:	e004      	b.n	8008f00 <_vfiprintf_r+0x128>
 8008ef6:	4252      	negs	r2, r2
 8008ef8:	f043 0302 	orr.w	r3, r3, #2
 8008efc:	9207      	str	r2, [sp, #28]
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	f898 3000 	ldrb.w	r3, [r8]
 8008f04:	2b2e      	cmp	r3, #46	; 0x2e
 8008f06:	d10e      	bne.n	8008f26 <_vfiprintf_r+0x14e>
 8008f08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0e:	d138      	bne.n	8008f82 <_vfiprintf_r+0x1aa>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	1d1a      	adds	r2, r3, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	9203      	str	r2, [sp, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfb8      	it	lt
 8008f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f20:	f108 0802 	add.w	r8, r8, #2
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	4d33      	ldr	r5, [pc, #204]	; (8008ff4 <_vfiprintf_r+0x21c>)
 8008f28:	f898 1000 	ldrb.w	r1, [r8]
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7f7 f976 	bl	8000220 <memchr>
 8008f34:	b140      	cbz	r0, 8008f48 <_vfiprintf_r+0x170>
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	1b40      	subs	r0, r0, r5
 8008f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	4303      	orrs	r3, r0
 8008f42:	f108 0801 	add.w	r8, r8, #1
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	f898 1000 	ldrb.w	r1, [r8]
 8008f4c:	482a      	ldr	r0, [pc, #168]	; (8008ff8 <_vfiprintf_r+0x220>)
 8008f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f52:	2206      	movs	r2, #6
 8008f54:	f108 0701 	add.w	r7, r8, #1
 8008f58:	f7f7 f962 	bl	8000220 <memchr>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d037      	beq.n	8008fd0 <_vfiprintf_r+0x1f8>
 8008f60:	4b26      	ldr	r3, [pc, #152]	; (8008ffc <_vfiprintf_r+0x224>)
 8008f62:	bb1b      	cbnz	r3, 8008fac <_vfiprintf_r+0x1d4>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	3307      	adds	r3, #7
 8008f68:	f023 0307 	bic.w	r3, r3, #7
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	444b      	add	r3, r9
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	e750      	b.n	8008e1a <_vfiprintf_r+0x42>
 8008f78:	fb05 3202 	mla	r2, r5, r2, r3
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	4688      	mov	r8, r1
 8008f80:	e78a      	b.n	8008e98 <_vfiprintf_r+0xc0>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f108 0801 	add.w	r8, r8, #1
 8008f88:	9305      	str	r3, [sp, #20]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	250a      	movs	r5, #10
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f94:	3a30      	subs	r2, #48	; 0x30
 8008f96:	2a09      	cmp	r2, #9
 8008f98:	d903      	bls.n	8008fa2 <_vfiprintf_r+0x1ca>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0c3      	beq.n	8008f26 <_vfiprintf_r+0x14e>
 8008f9e:	9105      	str	r1, [sp, #20]
 8008fa0:	e7c1      	b.n	8008f26 <_vfiprintf_r+0x14e>
 8008fa2:	fb05 2101 	mla	r1, r5, r1, r2
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4680      	mov	r8, r0
 8008faa:	e7f0      	b.n	8008f8e <_vfiprintf_r+0x1b6>
 8008fac:	ab03      	add	r3, sp, #12
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4b13      	ldr	r3, [pc, #76]	; (8009000 <_vfiprintf_r+0x228>)
 8008fb4:	a904      	add	r1, sp, #16
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f3af 8000 	nop.w
 8008fbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fc0:	4681      	mov	r9, r0
 8008fc2:	d1d5      	bne.n	8008f70 <_vfiprintf_r+0x198>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	065b      	lsls	r3, r3, #25
 8008fc8:	f53f af7e 	bmi.w	8008ec8 <_vfiprintf_r+0xf0>
 8008fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fce:	e77d      	b.n	8008ecc <_vfiprintf_r+0xf4>
 8008fd0:	ab03      	add	r3, sp, #12
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <_vfiprintf_r+0x228>)
 8008fd8:	a904      	add	r1, sp, #16
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f000 f888 	bl	80090f0 <_printf_i>
 8008fe0:	e7ec      	b.n	8008fbc <_vfiprintf_r+0x1e4>
 8008fe2:	bf00      	nop
 8008fe4:	080098cc 	.word	0x080098cc
 8008fe8:	0800990c 	.word	0x0800990c
 8008fec:	080098ec 	.word	0x080098ec
 8008ff0:	080098ac 	.word	0x080098ac
 8008ff4:	08009912 	.word	0x08009912
 8008ff8:	08009916 	.word	0x08009916
 8008ffc:	00000000 	.word	0x00000000
 8009000:	08008db3 	.word	0x08008db3

08009004 <_printf_common>:
 8009004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009008:	4691      	mov	r9, r2
 800900a:	461f      	mov	r7, r3
 800900c:	688a      	ldr	r2, [r1, #8]
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009014:	4293      	cmp	r3, r2
 8009016:	bfb8      	it	lt
 8009018:	4613      	movlt	r3, r2
 800901a:	f8c9 3000 	str.w	r3, [r9]
 800901e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009022:	4606      	mov	r6, r0
 8009024:	460c      	mov	r4, r1
 8009026:	b112      	cbz	r2, 800902e <_printf_common+0x2a>
 8009028:	3301      	adds	r3, #1
 800902a:	f8c9 3000 	str.w	r3, [r9]
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	0699      	lsls	r1, r3, #26
 8009032:	bf42      	ittt	mi
 8009034:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009038:	3302      	addmi	r3, #2
 800903a:	f8c9 3000 	strmi.w	r3, [r9]
 800903e:	6825      	ldr	r5, [r4, #0]
 8009040:	f015 0506 	ands.w	r5, r5, #6
 8009044:	d107      	bne.n	8009056 <_printf_common+0x52>
 8009046:	f104 0a19 	add.w	sl, r4, #25
 800904a:	68e3      	ldr	r3, [r4, #12]
 800904c:	f8d9 2000 	ldr.w	r2, [r9]
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	42ab      	cmp	r3, r5
 8009054:	dc28      	bgt.n	80090a8 <_printf_common+0xa4>
 8009056:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	3300      	adds	r3, #0
 800905e:	bf18      	it	ne
 8009060:	2301      	movne	r3, #1
 8009062:	0692      	lsls	r2, r2, #26
 8009064:	d42d      	bmi.n	80090c2 <_printf_common+0xbe>
 8009066:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800906a:	4639      	mov	r1, r7
 800906c:	4630      	mov	r0, r6
 800906e:	47c0      	blx	r8
 8009070:	3001      	adds	r0, #1
 8009072:	d020      	beq.n	80090b6 <_printf_common+0xb2>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	68e5      	ldr	r5, [r4, #12]
 8009078:	f8d9 2000 	ldr.w	r2, [r9]
 800907c:	f003 0306 	and.w	r3, r3, #6
 8009080:	2b04      	cmp	r3, #4
 8009082:	bf08      	it	eq
 8009084:	1aad      	subeq	r5, r5, r2
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	bf0c      	ite	eq
 800908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009090:	2500      	movne	r5, #0
 8009092:	4293      	cmp	r3, r2
 8009094:	bfc4      	itt	gt
 8009096:	1a9b      	subgt	r3, r3, r2
 8009098:	18ed      	addgt	r5, r5, r3
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	341a      	adds	r4, #26
 80090a0:	454d      	cmp	r5, r9
 80090a2:	d11a      	bne.n	80090da <_printf_common+0xd6>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e008      	b.n	80090ba <_printf_common+0xb6>
 80090a8:	2301      	movs	r3, #1
 80090aa:	4652      	mov	r2, sl
 80090ac:	4639      	mov	r1, r7
 80090ae:	4630      	mov	r0, r6
 80090b0:	47c0      	blx	r8
 80090b2:	3001      	adds	r0, #1
 80090b4:	d103      	bne.n	80090be <_printf_common+0xba>
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090be:	3501      	adds	r5, #1
 80090c0:	e7c3      	b.n	800904a <_printf_common+0x46>
 80090c2:	18e1      	adds	r1, r4, r3
 80090c4:	1c5a      	adds	r2, r3, #1
 80090c6:	2030      	movs	r0, #48	; 0x30
 80090c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090cc:	4422      	add	r2, r4
 80090ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090d6:	3302      	adds	r3, #2
 80090d8:	e7c5      	b.n	8009066 <_printf_common+0x62>
 80090da:	2301      	movs	r3, #1
 80090dc:	4622      	mov	r2, r4
 80090de:	4639      	mov	r1, r7
 80090e0:	4630      	mov	r0, r6
 80090e2:	47c0      	blx	r8
 80090e4:	3001      	adds	r0, #1
 80090e6:	d0e6      	beq.n	80090b6 <_printf_common+0xb2>
 80090e8:	f109 0901 	add.w	r9, r9, #1
 80090ec:	e7d8      	b.n	80090a0 <_printf_common+0x9c>
	...

080090f0 <_printf_i>:
 80090f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80090f8:	460c      	mov	r4, r1
 80090fa:	7e09      	ldrb	r1, [r1, #24]
 80090fc:	b085      	sub	sp, #20
 80090fe:	296e      	cmp	r1, #110	; 0x6e
 8009100:	4617      	mov	r7, r2
 8009102:	4606      	mov	r6, r0
 8009104:	4698      	mov	r8, r3
 8009106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009108:	f000 80b3 	beq.w	8009272 <_printf_i+0x182>
 800910c:	d822      	bhi.n	8009154 <_printf_i+0x64>
 800910e:	2963      	cmp	r1, #99	; 0x63
 8009110:	d036      	beq.n	8009180 <_printf_i+0x90>
 8009112:	d80a      	bhi.n	800912a <_printf_i+0x3a>
 8009114:	2900      	cmp	r1, #0
 8009116:	f000 80b9 	beq.w	800928c <_printf_i+0x19c>
 800911a:	2958      	cmp	r1, #88	; 0x58
 800911c:	f000 8083 	beq.w	8009226 <_printf_i+0x136>
 8009120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009124:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009128:	e032      	b.n	8009190 <_printf_i+0xa0>
 800912a:	2964      	cmp	r1, #100	; 0x64
 800912c:	d001      	beq.n	8009132 <_printf_i+0x42>
 800912e:	2969      	cmp	r1, #105	; 0x69
 8009130:	d1f6      	bne.n	8009120 <_printf_i+0x30>
 8009132:	6820      	ldr	r0, [r4, #0]
 8009134:	6813      	ldr	r3, [r2, #0]
 8009136:	0605      	lsls	r5, r0, #24
 8009138:	f103 0104 	add.w	r1, r3, #4
 800913c:	d52a      	bpl.n	8009194 <_printf_i+0xa4>
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6011      	str	r1, [r2, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	da03      	bge.n	800914e <_printf_i+0x5e>
 8009146:	222d      	movs	r2, #45	; 0x2d
 8009148:	425b      	negs	r3, r3
 800914a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800914e:	486f      	ldr	r0, [pc, #444]	; (800930c <_printf_i+0x21c>)
 8009150:	220a      	movs	r2, #10
 8009152:	e039      	b.n	80091c8 <_printf_i+0xd8>
 8009154:	2973      	cmp	r1, #115	; 0x73
 8009156:	f000 809d 	beq.w	8009294 <_printf_i+0x1a4>
 800915a:	d808      	bhi.n	800916e <_printf_i+0x7e>
 800915c:	296f      	cmp	r1, #111	; 0x6f
 800915e:	d020      	beq.n	80091a2 <_printf_i+0xb2>
 8009160:	2970      	cmp	r1, #112	; 0x70
 8009162:	d1dd      	bne.n	8009120 <_printf_i+0x30>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	f043 0320 	orr.w	r3, r3, #32
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	e003      	b.n	8009176 <_printf_i+0x86>
 800916e:	2975      	cmp	r1, #117	; 0x75
 8009170:	d017      	beq.n	80091a2 <_printf_i+0xb2>
 8009172:	2978      	cmp	r1, #120	; 0x78
 8009174:	d1d4      	bne.n	8009120 <_printf_i+0x30>
 8009176:	2378      	movs	r3, #120	; 0x78
 8009178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800917c:	4864      	ldr	r0, [pc, #400]	; (8009310 <_printf_i+0x220>)
 800917e:	e055      	b.n	800922c <_printf_i+0x13c>
 8009180:	6813      	ldr	r3, [r2, #0]
 8009182:	1d19      	adds	r1, r3, #4
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6011      	str	r1, [r2, #0]
 8009188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800918c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009190:	2301      	movs	r3, #1
 8009192:	e08c      	b.n	80092ae <_printf_i+0x1be>
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6011      	str	r1, [r2, #0]
 8009198:	f010 0f40 	tst.w	r0, #64	; 0x40
 800919c:	bf18      	it	ne
 800919e:	b21b      	sxthne	r3, r3
 80091a0:	e7cf      	b.n	8009142 <_printf_i+0x52>
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1d18      	adds	r0, r3, #4
 80091a8:	6010      	str	r0, [r2, #0]
 80091aa:	0628      	lsls	r0, r5, #24
 80091ac:	d501      	bpl.n	80091b2 <_printf_i+0xc2>
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	e002      	b.n	80091b8 <_printf_i+0xc8>
 80091b2:	0668      	lsls	r0, r5, #25
 80091b4:	d5fb      	bpl.n	80091ae <_printf_i+0xbe>
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	4854      	ldr	r0, [pc, #336]	; (800930c <_printf_i+0x21c>)
 80091ba:	296f      	cmp	r1, #111	; 0x6f
 80091bc:	bf14      	ite	ne
 80091be:	220a      	movne	r2, #10
 80091c0:	2208      	moveq	r2, #8
 80091c2:	2100      	movs	r1, #0
 80091c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091c8:	6865      	ldr	r5, [r4, #4]
 80091ca:	60a5      	str	r5, [r4, #8]
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	f2c0 8095 	blt.w	80092fc <_printf_i+0x20c>
 80091d2:	6821      	ldr	r1, [r4, #0]
 80091d4:	f021 0104 	bic.w	r1, r1, #4
 80091d8:	6021      	str	r1, [r4, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d13d      	bne.n	800925a <_printf_i+0x16a>
 80091de:	2d00      	cmp	r5, #0
 80091e0:	f040 808e 	bne.w	8009300 <_printf_i+0x210>
 80091e4:	4665      	mov	r5, ip
 80091e6:	2a08      	cmp	r2, #8
 80091e8:	d10b      	bne.n	8009202 <_printf_i+0x112>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	07db      	lsls	r3, r3, #31
 80091ee:	d508      	bpl.n	8009202 <_printf_i+0x112>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	6862      	ldr	r2, [r4, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	bfde      	ittt	le
 80091f8:	2330      	movle	r3, #48	; 0x30
 80091fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009202:	ebac 0305 	sub.w	r3, ip, r5
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	f8cd 8000 	str.w	r8, [sp]
 800920c:	463b      	mov	r3, r7
 800920e:	aa03      	add	r2, sp, #12
 8009210:	4621      	mov	r1, r4
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff fef6 	bl	8009004 <_printf_common>
 8009218:	3001      	adds	r0, #1
 800921a:	d14d      	bne.n	80092b8 <_printf_i+0x1c8>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b005      	add	sp, #20
 8009222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009226:	4839      	ldr	r0, [pc, #228]	; (800930c <_printf_i+0x21c>)
 8009228:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800922c:	6813      	ldr	r3, [r2, #0]
 800922e:	6821      	ldr	r1, [r4, #0]
 8009230:	1d1d      	adds	r5, r3, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6015      	str	r5, [r2, #0]
 8009236:	060a      	lsls	r2, r1, #24
 8009238:	d50b      	bpl.n	8009252 <_printf_i+0x162>
 800923a:	07ca      	lsls	r2, r1, #31
 800923c:	bf44      	itt	mi
 800923e:	f041 0120 	orrmi.w	r1, r1, #32
 8009242:	6021      	strmi	r1, [r4, #0]
 8009244:	b91b      	cbnz	r3, 800924e <_printf_i+0x15e>
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	f022 0220 	bic.w	r2, r2, #32
 800924c:	6022      	str	r2, [r4, #0]
 800924e:	2210      	movs	r2, #16
 8009250:	e7b7      	b.n	80091c2 <_printf_i+0xd2>
 8009252:	064d      	lsls	r5, r1, #25
 8009254:	bf48      	it	mi
 8009256:	b29b      	uxthmi	r3, r3
 8009258:	e7ef      	b.n	800923a <_printf_i+0x14a>
 800925a:	4665      	mov	r5, ip
 800925c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009260:	fb02 3311 	mls	r3, r2, r1, r3
 8009264:	5cc3      	ldrb	r3, [r0, r3]
 8009266:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800926a:	460b      	mov	r3, r1
 800926c:	2900      	cmp	r1, #0
 800926e:	d1f5      	bne.n	800925c <_printf_i+0x16c>
 8009270:	e7b9      	b.n	80091e6 <_printf_i+0xf6>
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	6825      	ldr	r5, [r4, #0]
 8009276:	6961      	ldr	r1, [r4, #20]
 8009278:	1d18      	adds	r0, r3, #4
 800927a:	6010      	str	r0, [r2, #0]
 800927c:	0628      	lsls	r0, r5, #24
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	d501      	bpl.n	8009286 <_printf_i+0x196>
 8009282:	6019      	str	r1, [r3, #0]
 8009284:	e002      	b.n	800928c <_printf_i+0x19c>
 8009286:	066a      	lsls	r2, r5, #25
 8009288:	d5fb      	bpl.n	8009282 <_printf_i+0x192>
 800928a:	8019      	strh	r1, [r3, #0]
 800928c:	2300      	movs	r3, #0
 800928e:	6123      	str	r3, [r4, #16]
 8009290:	4665      	mov	r5, ip
 8009292:	e7b9      	b.n	8009208 <_printf_i+0x118>
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	1d19      	adds	r1, r3, #4
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	681d      	ldr	r5, [r3, #0]
 800929c:	6862      	ldr	r2, [r4, #4]
 800929e:	2100      	movs	r1, #0
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7f6 ffbd 	bl	8000220 <memchr>
 80092a6:	b108      	cbz	r0, 80092ac <_printf_i+0x1bc>
 80092a8:	1b40      	subs	r0, r0, r5
 80092aa:	6060      	str	r0, [r4, #4]
 80092ac:	6863      	ldr	r3, [r4, #4]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	2300      	movs	r3, #0
 80092b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b6:	e7a7      	b.n	8009208 <_printf_i+0x118>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	462a      	mov	r2, r5
 80092bc:	4639      	mov	r1, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	47c0      	blx	r8
 80092c2:	3001      	adds	r0, #1
 80092c4:	d0aa      	beq.n	800921c <_printf_i+0x12c>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	079b      	lsls	r3, r3, #30
 80092ca:	d413      	bmi.n	80092f4 <_printf_i+0x204>
 80092cc:	68e0      	ldr	r0, [r4, #12]
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	4298      	cmp	r0, r3
 80092d2:	bfb8      	it	lt
 80092d4:	4618      	movlt	r0, r3
 80092d6:	e7a3      	b.n	8009220 <_printf_i+0x130>
 80092d8:	2301      	movs	r3, #1
 80092da:	464a      	mov	r2, r9
 80092dc:	4639      	mov	r1, r7
 80092de:	4630      	mov	r0, r6
 80092e0:	47c0      	blx	r8
 80092e2:	3001      	adds	r0, #1
 80092e4:	d09a      	beq.n	800921c <_printf_i+0x12c>
 80092e6:	3501      	adds	r5, #1
 80092e8:	68e3      	ldr	r3, [r4, #12]
 80092ea:	9a03      	ldr	r2, [sp, #12]
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	42ab      	cmp	r3, r5
 80092f0:	dcf2      	bgt.n	80092d8 <_printf_i+0x1e8>
 80092f2:	e7eb      	b.n	80092cc <_printf_i+0x1dc>
 80092f4:	2500      	movs	r5, #0
 80092f6:	f104 0919 	add.w	r9, r4, #25
 80092fa:	e7f5      	b.n	80092e8 <_printf_i+0x1f8>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1ac      	bne.n	800925a <_printf_i+0x16a>
 8009300:	7803      	ldrb	r3, [r0, #0]
 8009302:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009306:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800930a:	e76c      	b.n	80091e6 <_printf_i+0xf6>
 800930c:	0800991d 	.word	0x0800991d
 8009310:	0800992e 	.word	0x0800992e

08009314 <_sbrk_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4c06      	ldr	r4, [pc, #24]	; (8009330 <_sbrk_r+0x1c>)
 8009318:	2300      	movs	r3, #0
 800931a:	4605      	mov	r5, r0
 800931c:	4608      	mov	r0, r1
 800931e:	6023      	str	r3, [r4, #0]
 8009320:	f7f7 fa32 	bl	8000788 <_sbrk>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_sbrk_r+0x1a>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	b103      	cbz	r3, 800932e <_sbrk_r+0x1a>
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	20001e74 	.word	0x20001e74

08009334 <__sread>:
 8009334:	b510      	push	{r4, lr}
 8009336:	460c      	mov	r4, r1
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	f000 f896 	bl	800946c <_read_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	bfab      	itete	ge
 8009344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009346:	89a3      	ldrhlt	r3, [r4, #12]
 8009348:	181b      	addge	r3, r3, r0
 800934a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800934e:	bfac      	ite	ge
 8009350:	6563      	strge	r3, [r4, #84]	; 0x54
 8009352:	81a3      	strhlt	r3, [r4, #12]
 8009354:	bd10      	pop	{r4, pc}

08009356 <__swrite>:
 8009356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	461f      	mov	r7, r3
 800935c:	898b      	ldrh	r3, [r1, #12]
 800935e:	05db      	lsls	r3, r3, #23
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	4616      	mov	r6, r2
 8009366:	d505      	bpl.n	8009374 <__swrite+0x1e>
 8009368:	2302      	movs	r3, #2
 800936a:	2200      	movs	r2, #0
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	f000 f868 	bl	8009444 <_lseek_r>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	4632      	mov	r2, r6
 8009382:	463b      	mov	r3, r7
 8009384:	4628      	mov	r0, r5
 8009386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	f000 b817 	b.w	80093bc <_write_r>

0800938e <__sseek>:
 800938e:	b510      	push	{r4, lr}
 8009390:	460c      	mov	r4, r1
 8009392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009396:	f000 f855 	bl	8009444 <_lseek_r>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	bf15      	itete	ne
 80093a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093aa:	81a3      	strheq	r3, [r4, #12]
 80093ac:	bf18      	it	ne
 80093ae:	81a3      	strhne	r3, [r4, #12]
 80093b0:	bd10      	pop	{r4, pc}

080093b2 <__sclose>:
 80093b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b6:	f000 b813 	b.w	80093e0 <_close_r>
	...

080093bc <_write_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4c07      	ldr	r4, [pc, #28]	; (80093dc <_write_r+0x20>)
 80093c0:	4605      	mov	r5, r0
 80093c2:	4608      	mov	r0, r1
 80093c4:	4611      	mov	r1, r2
 80093c6:	2200      	movs	r2, #0
 80093c8:	6022      	str	r2, [r4, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f7f7 f909 	bl	80005e2 <_write>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_write_r+0x1e>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	b103      	cbz	r3, 80093da <_write_r+0x1e>
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20001e74 	.word	0x20001e74

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4c06      	ldr	r4, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4605      	mov	r5, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	f7f7 f91f 	bl	800062e <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20001e74 	.word	0x20001e74

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4c07      	ldr	r4, [pc, #28]	; (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4605      	mov	r5, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	f7f7 f943 	bl	8000698 <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20001e74 	.word	0x20001e74

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4c06      	ldr	r4, [pc, #24]	; (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4605      	mov	r5, r0
 800942c:	4608      	mov	r0, r1
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	f7f7 f8c1 	bl	80005b6 <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20001e74 	.word	0x20001e74

08009444 <_lseek_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4c07      	ldr	r4, [pc, #28]	; (8009464 <_lseek_r+0x20>)
 8009448:	4605      	mov	r5, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	6022      	str	r2, [r4, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7f7 f902 	bl	800065c <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_lseek_r+0x1e>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	b103      	cbz	r3, 8009462 <_lseek_r+0x1e>
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	20001e74 	.word	0x20001e74

08009468 <__malloc_lock>:
 8009468:	4770      	bx	lr

0800946a <__malloc_unlock>:
 800946a:	4770      	bx	lr

0800946c <_read_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4c07      	ldr	r4, [pc, #28]	; (800948c <_read_r+0x20>)
 8009470:	4605      	mov	r5, r0
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	2200      	movs	r2, #0
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f7f7 f8ff 	bl	800067e <_read>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_read_r+0x1e>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	b103      	cbz	r3, 800948a <_read_r+0x1e>
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	20001e74 	.word	0x20001e74

08009490 <_init>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	bf00      	nop
 8009494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009496:	bc08      	pop	{r3}
 8009498:	469e      	mov	lr, r3
 800949a:	4770      	bx	lr

0800949c <_fini>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	bf00      	nop
 80094a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a2:	bc08      	pop	{r3}
 80094a4:	469e      	mov	lr, r3
 80094a6:	4770      	bx	lr
