
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009100  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080092e0  080092e0  000192e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f4  080095f4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080095f4  080095f4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095f4  080095f4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080095fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  200001e8  080097e4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d0c  080097e4  00021d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c31  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031c5  00000000  00000000  00036e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  0003a010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00027d13  00000000  00000000  0003ad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f0db  00000000  00000000  00062a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000e69bb  00000000  00000000  00071b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00158529  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000be0  00000000  00000000  001585a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003a88  00000000  00000000  00159188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080092c8 	.word	0x080092c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	080092c8 	.word	0x080092c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 fa1b 	bl	80006fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f807 	bl	80002da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f870 	bl	80003b0 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80002d0:	f007 fa50 	bl	8007774 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit();
 80002d4:	f000 f8ae 	bl	8000434 <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <main+0x18>

080002da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	b0a8      	sub	sp, #160	; 0xa0
 80002de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002e4:	2238      	movs	r2, #56	; 0x38
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f008 f89d 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fe:	463b      	mov	r3, r7
 8000300:	2254      	movs	r2, #84	; 0x54
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f008 f88f 	bl	8008428 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800030a:	2000      	movs	r0, #0
 800030c:	f002 f9a4 	bl	8002658 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000310:	2322      	movs	r3, #34	; 0x22
 8000312:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000318:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	2340      	movs	r3, #64	; 0x40
 800031c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032a:	2302      	movs	r3, #2
 800032c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000330:	2302      	movs	r3, #2
 8000332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000336:	232a      	movs	r3, #42	; 0x2a
 8000338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800033c:	2302      	movs	r3, #2
 800033e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000348:	2302      	movs	r3, #2
 800034a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000352:	4618      	mov	r0, r3
 8000354:	f002 fa44 	bl	80027e0 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800035e:	f000 f857 	bl	8000410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000376:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800037a:	2104      	movs	r1, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f002 fe41 	bl	8003004 <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000388:	f000 f842 	bl	8000410 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000392:	2300      	movs	r3, #0
 8000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000396:	463b      	mov	r3, r7
 8000398:	4618      	mov	r0, r3
 800039a:	f003 f8db 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80003a4:	f000 f834 	bl	8000410 <Error_Handler>
  }
}
 80003a8:	bf00      	nop
 80003aa:	37a0      	adds	r7, #160	; 0xa0
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_GPIO_Init+0x5c>)
 80003c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c8:	4a10      	ldr	r2, [pc, #64]	; (800040c <MX_GPIO_Init+0x5c>)
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_GPIO_Init+0x5c>)
 80003d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 fd92 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80003e8:	2320      	movs	r3, #32
 80003ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000400:	f000 fb2c 	bl	8000a5c <HAL_GPIO_Init>

}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <RetargetInit>:
#define STDIN_FILENO  0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

void RetargetInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
//  setvbuf(stdout, NULL, _IONBF, 0);
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <_isatty>:

int _isatty(int fd)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	db04      	blt.n	800045a <_isatty+0x18>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b02      	cmp	r3, #2
 8000454:	dc01      	bgt.n	800045a <_isatty+0x18>
  {
    return 1;
 8000456:	2301      	movs	r3, #1
 8000458:	e005      	b.n	8000466 <_isatty+0x24>
  }

  errno = EBADF;
 800045a:	f007 ffbb 	bl	80083d4 <__errno>
 800045e:	4602      	mov	r2, r0
 8000460:	2309      	movs	r3, #9
 8000462:	6013      	str	r3, [r2, #0]
  return 0;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <_write>:

int _write(int fd, char* ptr, int len)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b086      	sub	sp, #24
 8000472:	af00      	add	r7, sp, #0
 8000474:	60f8      	str	r0, [r7, #12]
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
  uint8_t status;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d002      	beq.n	8000486 <_write+0x18>
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d10e      	bne.n	80004a4 <_write+0x36>
  {
    status = CDC_Transmit_FS((uint8_t *) ptr, len);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	b29b      	uxth	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	68b8      	ldr	r0, [r7, #8]
 800048e:	f007 fb63 	bl	8007b58 <CDC_Transmit_FS>
 8000492:	4603      	mov	r3, r0
 8000494:	75fb      	strb	r3, [r7, #23]
///    status = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
    if (status == USBD_OK)
 8000496:	7dfb      	ldrb	r3, [r7, #23]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d101      	bne.n	80004a0 <_write+0x32>
    {
      return len;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	e008      	b.n	80004b2 <_write+0x44>
    }
    else
    {
      return EIO;
 80004a0:	2305      	movs	r3, #5
 80004a2:	e006      	b.n	80004b2 <_write+0x44>
    }
  }
  errno = EBADF;
 80004a4:	f007 ff96 	bl	80083d4 <__errno>
 80004a8:	4602      	mov	r2, r0
 80004aa:	2309      	movs	r3, #9
 80004ac:	6013      	str	r3, [r2, #0]
  return -1;
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <_close>:

int _close(int fd)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	db04      	blt.n	80004d2 <_close+0x18>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	dc01      	bgt.n	80004d2 <_close+0x18>
  {
    return 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	e006      	b.n	80004e0 <_close+0x26>
  }

  errno = EBADF;
 80004d2:	f007 ff7f 	bl	80083d4 <__errno>
 80004d6:	4602      	mov	r2, r0
 80004d8:	2309      	movs	r3, #9
 80004da:	6013      	str	r3, [r2, #0]
  return -1;
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <_lseek>:

int _lseek(int fd, int ptr, int dir)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80004f4:	f007 ff6e 	bl	80083d4 <__errno>
 80004f8:	4602      	mov	r2, r0
 80004fa:	2309      	movs	r3, #9
 80004fc:	6013      	str	r3, [r2, #0]
  return -1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_read>:

int _read(int fd, char* ptr, int len)
{
 800050a:	b480      	push	{r7}
 800050c:	b085      	sub	sp, #20
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
//  HAL_StatusTypeDef hstatus;

//  if (fd == STDIN_FILENO) {
//    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
//    if (hstatus == HAL_OK)
      return 1;
 8000516:	2301      	movs	r3, #1
//    else
//      return EIO;
//  }
//  errno = EBADF;
//  return -1;
}
 8000518:	4618      	mov	r0, r3
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <_fstat>:

int _fstat(int fd, struct stat* st)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	db08      	blt.n	8000546 <_fstat+0x22>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b02      	cmp	r3, #2
 8000538:	dc05      	bgt.n	8000546 <_fstat+0x22>
  {
    st->st_mode = S_IFCHR;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000540:	605a      	str	r2, [r3, #4]
    return 0;
 8000542:	2300      	movs	r3, #0
 8000544:	e005      	b.n	8000552 <_fstat+0x2e>
  }

  errno = EBADF;
 8000546:	f007 ff45 	bl	80083d4 <__errno>
 800054a:	4602      	mov	r2, r0
 800054c:	2309      	movs	r3, #9
 800054e:	6013      	str	r3, [r2, #0]
  return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x44>)
 8000564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x44>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6613      	str	r3, [r2, #96]	; 0x60
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x44>)
 8000570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_MspInit+0x44>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_MspInit+0x44>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000584:	6593      	str	r3, [r2, #88]	; 0x58
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_MspInit+0x44>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000592:	f002 f915 	bl	80027c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <MemManage_Handler+0x4>

080005be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <UsageFault_Handler+0x4>

080005ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 f8d4 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <USB_LP_IRQHandler+0x10>)
 8000606:	f000 fdc5 	bl	8001194 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20001a14 	.word	0x20001a14

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f007 fec6 	bl	80083d4 <__errno>
 8000648:	4602      	mov	r2, r0
 800064a:	230c      	movs	r3, #12
 800064c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20020000 	.word	0x20020000
 8000674:	00000400 	.word	0x00000400
 8000678:	20000204 	.word	0x20000204
 800067c:	20001d10 	.word	0x20001d10

08000680 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <SystemInit+0x28>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SystemInit+0x28>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <SystemInit+0x28>)
 8000696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800069a:	609a      	str	r2, [r3, #8]
#endif
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490e      	ldr	r1, [pc, #56]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0b      	ldr	r4, [pc, #44]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d6:	f7ff ffd3 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006da:	f007 fe81 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006de:	f7ff fdef 	bl	80002c0 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80006f0:	080095fc 	.word	0x080095fc
  ldr r2, =_sbss
 80006f4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80006f8:	20001d0c 	.word	0x20001d0c

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>

080006fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f939 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f80e 	bl	8000730 <HAL_InitTick>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e001      	b.n	8000724 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000720:	f7ff ff1c 	bl	800055c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000724:	79fb      	ldrb	r3, [r7, #7]

}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_InitTick+0x68>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d022      	beq.n	800078a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_InitTick+0x6c>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_InitTick+0x68>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000750:	fbb1 f3f3 	udiv	r3, r1, r3
 8000754:	fbb2 f3f3 	udiv	r3, r2, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f973 	bl	8000a44 <HAL_SYSTICK_Config>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10f      	bne.n	8000784 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b0f      	cmp	r3, #15
 8000768:	d809      	bhi.n	800077e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076a:	2200      	movs	r2, #0
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	f000 f925 	bl	80009c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_InitTick+0x70>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	e007      	b.n	800078e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e004      	b.n	800078e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e001      	b.n	800078e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000008 	.word	0x20000008
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x20>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x1c>)
 80007b4:	6013      	str	r3, [r2, #0]
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	2000043c 	.word	0x2000043c
 80007c4:	20000008 	.word	0x20000008

080007c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_GetTick+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2000043c 	.word	0x2000043c

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db0b      	blt.n	800086e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 021f 	and.w	r2, r3, #31
 800085c:	4907      	ldr	r1, [pc, #28]	; (800087c <__NVIC_EnableIRQ+0x38>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	; 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800094c:	d301      	bcc.n	8000952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094e:	2301      	movs	r3, #1
 8000950:	e00f      	b.n	8000972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SysTick_Config+0x40>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095a:	210f      	movs	r1, #15
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f7ff ff8e 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SysTick_Config+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <SysTick_Config+0x40>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b07      	cmp	r3, #7
 800098c:	d00f      	beq.n	80009ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b06      	cmp	r3, #6
 8000992:	d00c      	beq.n	80009ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b05      	cmp	r3, #5
 8000998:	d009      	beq.n	80009ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d006      	beq.n	80009ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d003      	beq.n	80009ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80009a6:	21a7      	movs	r1, #167	; 0xa7
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80009aa:	f7ff fd38 	bl	800041e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ff16 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	080092e0 	.word	0x080092e0

080009c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d903      	bls.n	80009dc <HAL_NVIC_SetPriority+0x1c>
 80009d4:	21bf      	movs	r1, #191	; 0xbf
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <HAL_NVIC_SetPriority+0x50>)
 80009d8:	f7ff fd21 	bl	800041e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d903      	bls.n	80009ea <HAL_NVIC_SetPriority+0x2a>
 80009e2:	21c0      	movs	r1, #192	; 0xc0
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <HAL_NVIC_SetPriority+0x50>)
 80009e6:	f7ff fd1a 	bl	800041e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80009ea:	f7ff ff1d 	bl	8000828 <__NVIC_GetPriorityGrouping>
 80009ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	68b9      	ldr	r1, [r7, #8]
 80009f4:	6978      	ldr	r0, [r7, #20]
 80009f6:	f7ff ff6d 	bl	80008d4 <NVIC_EncodePriority>
 80009fa:	4602      	mov	r2, r0
 80009fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff3c 	bl	8000880 <__NVIC_SetPriority>
}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080092e0 	.word	0x080092e0

08000a14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da03      	bge.n	8000a2e <HAL_NVIC_EnableIRQ+0x1a>
 8000a26:	21d3      	movs	r1, #211	; 0xd3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_NVIC_EnableIRQ+0x2c>)
 8000a2a:	f7ff fcf8 	bl	800041e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff06 	bl	8000844 <__NVIC_EnableIRQ>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	080092e0 	.word	0x080092e0

08000a44 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff75 	bl	800093c <SysTick_Config>
 8000a52:	4603      	mov	r3, r0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a70:	d01b      	beq.n	8000aaa <HAL_GPIO_Init+0x4e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <HAL_GPIO_Init+0x108>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d017      	beq.n	8000aaa <HAL_GPIO_Init+0x4e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <HAL_GPIO_Init+0x10c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d013      	beq.n	8000aaa <HAL_GPIO_Init+0x4e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_GPIO_Init+0x110>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d00f      	beq.n	8000aaa <HAL_GPIO_Init+0x4e>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <HAL_GPIO_Init+0x114>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00b      	beq.n	8000aaa <HAL_GPIO_Init+0x4e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_GPIO_Init+0x118>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x4e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a36      	ldr	r2, [pc, #216]	; (8000b78 <HAL_GPIO_Init+0x11c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x4e>
 8000aa2:	21b1      	movs	r1, #177	; 0xb1
 8000aa4:	4835      	ldr	r0, [pc, #212]	; (8000b7c <HAL_GPIO_Init+0x120>)
 8000aa6:	f7ff fcba 	bl	800041e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <HAL_GPIO_Init+0x64>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	0c1b      	lsrs	r3, r3, #16
 8000aba:	041b      	lsls	r3, r3, #16
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x6c>
 8000ac0:	21b2      	movs	r1, #178	; 0xb2
 8000ac2:	482e      	ldr	r0, [pc, #184]	; (8000b7c <HAL_GPIO_Init+0x120>)
 8000ac4:	f7ff fcab 	bl	800041e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d035      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d031      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d02d      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d029      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b12      	cmp	r3, #18
 8000aee:	d025      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <HAL_GPIO_Init+0x124>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d020      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <HAL_GPIO_Init+0x128>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d01b      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_GPIO_Init+0x12c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d016      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_GPIO_Init+0x130>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d011      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <HAL_GPIO_Init+0x134>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d00c      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_GPIO_Init+0x138>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0xe0>
 8000b34:	21b3      	movs	r1, #179	; 0xb3
 8000b36:	4811      	ldr	r0, [pc, #68]	; (8000b7c <HAL_GPIO_Init+0x120>)
 8000b38:	f7ff fc71 	bl	800041e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f000 81d2 	beq.w	8000eea <HAL_GPIO_Init+0x48e>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	f000 81cd 	beq.w	8000eea <HAL_GPIO_Init+0x48e>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	f000 81c8 	beq.w	8000eea <HAL_GPIO_Init+0x48e>
 8000b5a:	21b4      	movs	r1, #180	; 0xb4
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_GPIO_Init+0x120>)
 8000b5e:	f7ff fc5e 	bl	800041e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b62:	e1c2      	b.n	8000eea <HAL_GPIO_Init+0x48e>
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000800 	.word	0x48000800
 8000b6c:	48000c00 	.word	0x48000c00
 8000b70:	48001000 	.word	0x48001000
 8000b74:	48001400 	.word	0x48001400
 8000b78:	48001800 	.word	0x48001800
 8000b7c:	0800931c 	.word	0x0800931c
 8000b80:	10110000 	.word	0x10110000
 8000b84:	10210000 	.word	0x10210000
 8000b88:	10310000 	.word	0x10310000
 8000b8c:	10120000 	.word	0x10120000
 8000b90:	10220000 	.word	0x10220000
 8000b94:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 819a 	beq.w	8000ee4 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d00b      	beq.n	8000bd0 <HAL_GPIO_Init+0x174>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d007      	beq.n	8000bd0 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc4:	2b11      	cmp	r3, #17
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b12      	cmp	r3, #18
 8000bce:	d144      	bne.n	8000c5a <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00f      	beq.n	8000bf8 <HAL_GPIO_Init+0x19c>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d00b      	beq.n	8000bf8 <HAL_GPIO_Init+0x19c>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x19c>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x19c>
 8000bf0:	21c4      	movs	r1, #196	; 0xc4
 8000bf2:	4881      	ldr	r0, [pc, #516]	; (8000df8 <HAL_GPIO_Init+0x39c>)
 8000bf4:	f7ff fc13 	bl	800041e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x23e>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d14b      	bne.n	8000d32 <HAL_GPIO_Init+0x2d6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ca0:	d01b      	beq.n	8000cda <HAL_GPIO_Init+0x27e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <HAL_GPIO_Init+0x3a0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d017      	beq.n	8000cda <HAL_GPIO_Init+0x27e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a54      	ldr	r2, [pc, #336]	; (8000e00 <HAL_GPIO_Init+0x3a4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0x27e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a53      	ldr	r2, [pc, #332]	; (8000e04 <HAL_GPIO_Init+0x3a8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00f      	beq.n	8000cda <HAL_GPIO_Init+0x27e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a52      	ldr	r2, [pc, #328]	; (8000e08 <HAL_GPIO_Init+0x3ac>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00b      	beq.n	8000cda <HAL_GPIO_Init+0x27e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a51      	ldr	r2, [pc, #324]	; (8000e0c <HAL_GPIO_Init+0x3b0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x27e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <HAL_GPIO_Init+0x3b4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x27e>
 8000cd2:	21dc      	movs	r1, #220	; 0xdc
 8000cd4:	4848      	ldr	r0, [pc, #288]	; (8000df8 <HAL_GPIO_Init+0x39c>)
 8000cd6:	f7ff fba2 	bl	800041e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d903      	bls.n	8000cea <HAL_GPIO_Init+0x28e>
 8000ce2:	21dd      	movs	r1, #221	; 0xdd
 8000ce4:	4844      	ldr	r0, [pc, #272]	; (8000df8 <HAL_GPIO_Init+0x39c>)
 8000ce6:	f7ff fb9a 	bl	800041e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	220f      	movs	r2, #15
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	6939      	ldr	r1, [r7, #16]
 8000d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0203 	and.w	r2, r3, #3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b8 	beq.w	8000ee4 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_GPIO_Init+0x3b8>)
 8000d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d78:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <HAL_GPIO_Init+0x3b8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d80:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <HAL_GPIO_Init+0x3b8>)
 8000d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8c:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <HAL_GPIO_Init+0x3bc>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000db6:	d031      	beq.n	8000e1c <HAL_GPIO_Init+0x3c0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_GPIO_Init+0x3a0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d019      	beq.n	8000df4 <HAL_GPIO_Init+0x398>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_GPIO_Init+0x3a4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x394>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_GPIO_Init+0x3a8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x390>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_GPIO_Init+0x3ac>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x38c>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_GPIO_Init+0x3b0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x388>
 8000de0:	2305      	movs	r3, #5
 8000de2:	e01c      	b.n	8000e1e <HAL_GPIO_Init+0x3c2>
 8000de4:	2306      	movs	r3, #6
 8000de6:	e01a      	b.n	8000e1e <HAL_GPIO_Init+0x3c2>
 8000de8:	2304      	movs	r3, #4
 8000dea:	e018      	b.n	8000e1e <HAL_GPIO_Init+0x3c2>
 8000dec:	2303      	movs	r3, #3
 8000dee:	e016      	b.n	8000e1e <HAL_GPIO_Init+0x3c2>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e014      	b.n	8000e1e <HAL_GPIO_Init+0x3c2>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e012      	b.n	8000e1e <HAL_GPIO_Init+0x3c2>
 8000df8:	0800931c 	.word	0x0800931c
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	48000800 	.word	0x48000800
 8000e04:	48000c00 	.word	0x48000c00
 8000e08:	48001000 	.word	0x48001000
 8000e0c:	48001400 	.word	0x48001400
 8000e10:	48001800 	.word	0x48001800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2e:	4935      	ldr	r1, [pc, #212]	; (8000f04 <HAL_GPIO_Init+0x4a8>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e60:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_GPIO_Init+0x4ac>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f ae4f 	bne.w	8000b98 <HAL_GPIO_Init+0x13c>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40010000 	.word	0x40010000
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <HAL_GPIO_WritePin+0x20>
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <HAL_GPIO_WritePin+0x2a>
 8000f2c:	f240 119d 	movw	r1, #413	; 0x19d
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <HAL_GPIO_WritePin+0x5c>)
 8000f32:	f7ff fa74 	bl	800041e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_WritePin+0x40>
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d004      	beq.n	8000f4c <HAL_GPIO_WritePin+0x40>
 8000f42:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <HAL_GPIO_WritePin+0x5c>)
 8000f48:	f7ff fa69 	bl	800041e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000f4c:	787b      	ldrb	r3, [r7, #1]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	0800931c 	.word	0x0800931c

08000f6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	b08b      	sub	sp, #44	; 0x2c
 8000f70:	af06      	add	r7, sp, #24
 8000f72:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0e0      	b.n	8001140 <HAL_PCD_Init+0x1d4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a71      	ldr	r2, [pc, #452]	; (8001148 <HAL_PCD_Init+0x1dc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d003      	beq.n	8000f90 <HAL_PCD_Init+0x24>
 8000f88:	2185      	movs	r1, #133	; 0x85
 8000f8a:	4870      	ldr	r0, [pc, #448]	; (800114c <HAL_PCD_Init+0x1e0>)
 8000f8c:	f7ff fa47 	bl	800041e <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d106      	bne.n	8000faa <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f006 ff25 	bl	8007df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2203      	movs	r2, #3
 8000fae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 ff49 	bl	8003e4e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e04c      	b.n	800105c <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3336      	adds	r3, #54	; 0x36
 8001000:	4602      	mov	r2, r0
 8001002:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	3303      	adds	r3, #3
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3338      	adds	r3, #56	; 0x38
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	333c      	adds	r3, #60	; 0x3c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	3340      	adds	r3, #64	; 0x40
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	3301      	adds	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3ad      	bcc.n	8000fc2 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e044      	b.n	80010f6 <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	3301      	adds	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3b5      	bcc.n	800106c <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	687e      	ldr	r6, [r7, #4]
 8001108:	466d      	mov	r5, sp
 800110a:	f106 0410 	add.w	r4, r6, #16
 800110e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	1d33      	adds	r3, r6, #4
 8001118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f002 feb2 	bl	8003e84 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d102      	bne.n	800113e <HAL_PCD_Init+0x1d2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 fa62 	bl	8002602 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	40005c00 	.word	0x40005c00
 800114c:	08009358 	.word	0x08009358

08001150 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_PCD_Start+0x16>
 8001162:	2302      	movs	r3, #2
 8001164:	e012      	b.n	800118c <HAL_PCD_Start+0x3c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fe54 	bl	8003e20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fe40 	bl	8005e02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fe45 	bl	8005e30 <USB_ReadInterrupts>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011b0:	d102      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fb5b 	bl	800186e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f004 fe37 	bl	8005e30 <USB_ReadInterrupts>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011cc:	d112      	bne.n	80011f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011e0:	b292      	uxth	r2, r2
 80011e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f006 fe7f 	bl	8007eea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f91e 	bl	8001430 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fe19 	bl	8005e30 <USB_ReadInterrupts>
 80011fe:	4603      	mov	r3, r0
 8001200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001208:	d10b      	bne.n	8001222 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800121c:	b292      	uxth	r2, r2
 800121e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fe02 	bl	8005e30 <USB_ReadInterrupts>
 800122c:	4603      	mov	r3, r0
 800122e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001236:	d10b      	bne.n	8001250 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800124a:	b292      	uxth	r2, r2
 800124c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fdeb 	bl	8005e30 <USB_ReadInterrupts>
 800125a:	4603      	mov	r3, r0
 800125c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001264:	d133      	bne.n	80012ce <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0204 	bic.w	r2, r2, #4
 8001278:	b292      	uxth	r2, r2
 800127a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0208 	bic.w	r2, r2, #8
 8001290:	b292      	uxth	r2, r2
 8001292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d107      	bne.n	80012b0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012a8:	2100      	movs	r1, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f007 f812 	bl	80082d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f006 fe53 	bl	8007f5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012c8:	b292      	uxth	r2, r2
 80012ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fdac 	bl	8005e30 <USB_ReadInterrupts>
 80012d8:	4603      	mov	r3, r0
 80012da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012e2:	d126      	bne.n	8001332 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0208 	orr.w	r2, r2, #8
 80012f6:	b292      	uxth	r2, r2
 80012f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130e:	b292      	uxth	r2, r2
 8001310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0204 	orr.w	r2, r2, #4
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f006 fdfb 	bl	8007f28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fd7a 	bl	8005e30 <USB_ReadInterrupts>
 800133c:	4603      	mov	r3, r0
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	2b80      	cmp	r3, #128	; 0x80
 8001344:	d13f      	bne.n	80013c6 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001358:	b292      	uxth	r2, r2
 800135a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d12b      	bne.n	80013c0 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001370:	b29a      	uxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0204 	orr.w	r2, r2, #4
 800137a:	b292      	uxth	r2, r2
 800137c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001388:	b29a      	uxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0208 	orr.w	r2, r2, #8
 8001392:	b292      	uxth	r2, r2
 8001394:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013b6:	2101      	movs	r1, #1
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f006 ff8b 	bl	80082d4 <HAL_PCDEx_LPM_Callback>
 80013be:	e002      	b.n	80013c6 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f006 fdb1 	bl	8007f28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fd30 	bl	8005e30 <USB_ReadInterrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013da:	d10e      	bne.n	80013fa <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013ee:	b292      	uxth	r2, r2
 80013f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f006 fd6a 	bl	8007ece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fd16 	bl	8005e30 <USB_ReadInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800140e:	d10b      	bne.n	8001428 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001422:	b292      	uxth	r2, r2
 8001424:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_PCD_SetAddress+0x1a>
 8001446:	2302      	movs	r3, #2
 8001448:	e013      	b.n	8001472 <HAL_PCD_SetAddress+0x42>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f004 fcb9 	bl	8005dda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	4608      	mov	r0, r1
 8001484:	4611      	mov	r1, r2
 8001486:	461a      	mov	r2, r3
 8001488:	4603      	mov	r3, r0
 800148a:	70fb      	strb	r3, [r7, #3]
 800148c:	460b      	mov	r3, r1
 800148e:	803b      	strh	r3, [r7, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da0e      	bge.n	80014be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	705a      	strb	r2, [r3, #1]
 80014bc:	e00e      	b.n	80014dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	f003 0207 	and.w	r2, r3, #7
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014e8:	883a      	ldrh	r2, [r7, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	78ba      	ldrb	r2, [r7, #2]
 80014f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001506:	78bb      	ldrb	r3, [r7, #2]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d102      	bne.n	8001512 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_PCD_EP_Open+0xa6>
 800151c:	2302      	movs	r3, #2
 800151e:	e00e      	b.n	800153e <HAL_PCD_EP_Open+0xc4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68f9      	ldr	r1, [r7, #12]
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fcca 	bl	8003ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800153c:	7afb      	ldrb	r3, [r7, #11]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da0e      	bge.n	8001578 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	705a      	strb	r2, [r3, #1]
 8001576:	e00e      	b.n	8001596 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 0207 	and.w	r2, r3, #7
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	b2da      	uxtb	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_PCD_EP_Close+0x6a>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e00e      	b.n	80015ce <HAL_PCD_EP_Close+0x88>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68f9      	ldr	r1, [r7, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fff0 	bl	80045a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	460b      	mov	r3, r1
 80015e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	f003 0207 	and.w	r2, r3, #7
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2200      	movs	r2, #0
 8001614:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001616:	7afb      	ldrb	r3, [r7, #11]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	b2da      	uxtb	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001622:	7afb      	ldrb	r3, [r7, #11]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6979      	ldr	r1, [r7, #20]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 f9a3 	bl	800497e <USB_EPStartXfer>
 8001638:	e005      	b.n	8001646 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6979      	ldr	r1, [r7, #20]
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f99c 	bl	800497e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	f003 0207 	and.w	r2, r3, #7
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	460b      	mov	r3, r1
 800168e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001690:	7afb      	ldrb	r3, [r7, #11]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2201      	movs	r2, #1
 80016ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016cc:	7afb      	ldrb	r3, [r7, #11]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6979      	ldr	r1, [r7, #20]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 f948 	bl	800497e <USB_EPStartXfer>
 80016ee:	e005      	b.n	80016fc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6979      	ldr	r1, [r7, #20]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 f941 	bl	800497e <USB_EPStartXfer>
  }

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	f003 0207 	and.w	r2, r3, #7
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	d901      	bls.n	8001724 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e04c      	b.n	80017be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da0e      	bge.n	800174a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	705a      	strb	r2, [r3, #1]
 8001748:	e00c      	b.n	8001764 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	b2da      	uxtb	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_PCD_EP_SetStall+0x7e>
 8001780:	2302      	movs	r3, #2
 8001782:	e01c      	b.n	80017be <HAL_PCD_EP_SetStall+0xb8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	f004 fa22 	bl	8005bdc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f004 fb4e 	bl	8005e50 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 020f 	and.w	r2, r3, #15
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d901      	bls.n	80017e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e040      	b.n	8001866 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da0e      	bge.n	800180a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	705a      	strb	r2, [r3, #1]
 8001808:	e00e      	b.n	8001828 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	f003 0207 	and.w	r2, r3, #7
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_PCD_EP_ClrStall+0x82>
 8001844:	2302      	movs	r3, #2
 8001846:	e00e      	b.n	8001866 <HAL_PCD_EP_ClrStall+0xa0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	4618      	mov	r0, r3
 8001858:	f004 fa11 	bl	8005c7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b08e      	sub	sp, #56	; 0x38
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001876:	e2d1      	b.n	8001e1c <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001880:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001882:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800188e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 8152 	bne.w	8001b3c <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001898:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d150      	bne.n	8001944 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b2:	81fb      	strh	r3, [r7, #14]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3328      	adds	r3, #40	; 0x28
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	695a      	ldr	r2, [r3, #20]
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	441a      	add	r2, r3
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f006 fac8 	bl	8007e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8282 	beq.w	8001e1c <PCD_EP_ISR_Handler+0x5ae>
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 827d 	bne.w	8001e1c <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800192e:	b2da      	uxtb	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001942:	e26b      	b.n	8001e1c <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001954:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195a:	2b00      	cmp	r3, #0
 800195c:	d032      	beq.n	80019c4 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	4413      	add	r3, r2
 8001978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001998:	b29b      	uxth	r3, r3
 800199a:	f004 faa6 	bl	8005eea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019aa:	4013      	ands	r3, r2
 80019ac:	823b      	strh	r3, [r7, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	8a3a      	ldrh	r2, [r7, #16]
 80019b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b8:	b292      	uxth	r2, r2
 80019ba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f006 fa3f 	bl	8007e40 <HAL_PCD_SetupStageCallback>
 80019c2:	e22b      	b.n	8001e1c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f280 8227 	bge.w	8001e1c <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019da:	4013      	ands	r3, r2
 80019dc:	83bb      	strh	r3, [r7, #28]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	8bba      	ldrh	r2, [r7, #28]
 80019e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e8:	b292      	uxth	r2, r2
 80019ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d019      	beq.n	8001a50 <PCD_EP_ISR_Handler+0x1e2>
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d015      	beq.n	8001a50 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	6959      	ldr	r1, [r3, #20]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f004 fa58 	bl	8005eea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	441a      	add	r2, r3
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f006 fa0a 	bl	8007e64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4413      	add	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d112      	bne.n	8001a9e <PCD_EP_ISR_Handler+0x230>
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	801a      	strh	r2, [r3, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	801a      	strh	r2, [r3, #0]
 8001a9c:	e02f      	b.n	8001afe <PCD_EP_ISR_Handler+0x290>
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8001aa4:	d813      	bhi.n	8001ace <PCD_EP_ISR_Handler+0x260>
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x252>
 8001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abc:	3301      	adds	r3, #1
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	029b      	lsls	r3, r3, #10
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	801a      	strh	r2, [r3, #0]
 8001acc:	e017      	b.n	8001afe <PCD_EP_ISR_Handler+0x290>
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <PCD_EP_ISR_Handler+0x27a>
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	029b      	lsls	r3, r3, #10
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0e:	827b      	strh	r3, [r7, #18]
 8001b10:	8a7b      	ldrh	r3, [r7, #18]
 8001b12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b16:	827b      	strh	r3, [r7, #18]
 8001b18:	8a7b      	ldrh	r3, [r7, #18]
 8001b1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b1e:	827b      	strh	r3, [r7, #18]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	8a7b      	ldrh	r3, [r7, #18]
 8001b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	8013      	strh	r3, [r2, #0]
 8001b3a:	e16f      	b.n	8001e1c <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b4e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f280 80e4 	bge.w	8001d20 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b6e:	4013      	ands	r3, r2
 8001b70:	853b      	strh	r3, [r7, #40]	; 0x28
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b86:	b292      	uxth	r2, r2
 8001b88:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	7b1b      	ldrb	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d120      	bne.n	8001bea <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bcc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001bce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8083 	beq.w	8001cdc <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	6959      	ldr	r1, [r3, #20]
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	88da      	ldrh	r2, [r3, #6]
 8001be2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001be4:	f004 f981 	bl	8005eea <USB_ReadPMA>
 8001be8:	e078      	b.n	8001cdc <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	78db      	ldrb	r3, [r3, #3]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d108      	bne.n	8001c04 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f91d 	bl	8001e38 <HAL_PCD_EP_DB_Receive>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c02:	e06b      	b.n	8001cdc <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	441a      	add	r2, r3
 8001c2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01f      	beq.n	8001c9e <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c82:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001c84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d028      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	6959      	ldr	r1, [r3, #20]
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	891a      	ldrh	r2, [r3, #8]
 8001c96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c98:	f004 f927 	bl	8005eea <USB_ReadPMA>
 8001c9c:	e01e      	b.n	8001cdc <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001cc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	6959      	ldr	r1, [r3, #20]
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	895a      	ldrh	r2, [r3, #10]
 8001cd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cd8:	f004 f907 	bl	8005eea <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ce2:	441a      	add	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cee:	441a      	add	r2, r3
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <PCD_EP_ISR_Handler+0x498>
 8001cfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d206      	bcs.n	8001d14 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f006 f8a9 	bl	8007e64 <HAL_PCD_DataOutStageCallback>
 8001d12:	e005      	b.n	8001d20 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fe2f 	bl	800497e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d078      	beq.n	8001e1c <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	843b      	strh	r3, [r7, #32]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	441a      	add	r2, r3
 8001d68:	8c3b      	ldrh	r3, [r7, #32]
 8001d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	78db      	ldrb	r3, [r3, #3]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d108      	bne.n	8001d90 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d144      	bne.n	8001e10 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001d86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d13f      	bne.n	8001e10 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	8bfb      	ldrh	r3, [r7, #30]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d906      	bls.n	8001dce <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	8bfb      	ldrh	r3, [r7, #30]
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	e002      	b.n	8001dd4 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d106      	bne.n	8001dea <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f006 f859 	bl	8007e9a <HAL_PCD_DataInStageCallback>
 8001de8:	e018      	b.n	8001e1c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	441a      	add	r2, r3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	8bfb      	ldrh	r3, [r7, #30]
 8001dfc:	441a      	add	r2, r3
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 fdb8 	bl	800497e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001e0e:	e005      	b.n	8001e1c <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e12:	461a      	mov	r2, r3
 8001e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f917 	bl	800204a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f6ff ad25 	blt.w	8001878 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07c      	beq.n	8001f4a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	8b7b      	ldrh	r3, [r7, #26]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d306      	bcc.n	8001e8e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	8b7b      	ldrh	r3, [r7, #26]
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	619a      	str	r2, [r3, #24]
 8001e8c:	e002      	b.n	8001e94 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d123      	bne.n	8001ee4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	833b      	strh	r3, [r7, #24]
 8001eb8:	8b3b      	ldrh	r3, [r7, #24]
 8001eba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ebe:	833b      	strh	r3, [r7, #24]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	441a      	add	r2, r3
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01f      	beq.n	8001f2e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f08:	82fb      	strh	r3, [r7, #22]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	441a      	add	r2, r3
 8001f18:	8afb      	ldrh	r3, [r7, #22]
 8001f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f2e:	8b7b      	ldrh	r3, [r7, #26]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8085 	beq.w	8002040 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	6959      	ldr	r1, [r3, #20]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	891a      	ldrh	r2, [r3, #8]
 8001f42:	8b7b      	ldrh	r3, [r7, #26]
 8001f44:	f003 ffd1 	bl	8005eea <USB_ReadPMA>
 8001f48:	e07a      	b.n	8002040 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d306      	bcc.n	8001f88 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	8b7b      	ldrh	r3, [r7, #26]
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	e002      	b.n	8001f8e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d123      	bne.n	8001fde <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb0:	83fb      	strh	r3, [r7, #30]
 8001fb2:	8bfb      	ldrh	r3, [r7, #30]
 8001fb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fb8:	83fb      	strh	r3, [r7, #30]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	441a      	add	r2, r3
 8001fc8:	8bfb      	ldrh	r3, [r7, #30]
 8001fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11f      	bne.n	8002028 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	83bb      	strh	r3, [r7, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	441a      	add	r2, r3
 8002012:	8bbb      	ldrh	r3, [r7, #28]
 8002014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800201c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002024:	b29b      	uxth	r3, r3
 8002026:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002028:	8b7b      	ldrh	r3, [r7, #26]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	6959      	ldr	r1, [r3, #20]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	895a      	ldrh	r2, [r3, #10]
 800203a:	8b7b      	ldrh	r3, [r7, #26]
 800203c:	f003 ff55 	bl	8005eea <USB_ReadPMA>
    }
  }

  return count;
 8002040:	8b7b      	ldrh	r3, [r7, #26]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b092      	sub	sp, #72	; 0x48
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	4613      	mov	r3, r2
 8002056:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8130 	beq.w	80022c4 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206c:	b29b      	uxth	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4413      	add	r3, r2
 800207e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002088:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002090:	429a      	cmp	r2, r3
 8002092:	d906      	bls.n	80020a2 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800209a:	1ad2      	subs	r2, r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	619a      	str	r2, [r3, #24]
 80020a0:	e002      	b.n	80020a8 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d12c      	bne.n	800210a <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f005 feef 	bl	8007e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 822d 	beq.w	8002522 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	827b      	strh	r3, [r7, #18]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	8a7b      	ldrh	r3, [r7, #18]
 80020f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	b29b      	uxth	r3, r3
 8002106:	8013      	strh	r3, [r2, #0]
 8002108:	e20b      	b.n	8002522 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01f      	beq.n	8002154 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	441a      	add	r2, r3
 800213e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	b29b      	uxth	r3, r3
 8002152:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 81e1 	bne.w	8002522 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002166:	441a      	add	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002172:	441a      	add	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d309      	bcc.n	8002198 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002190:	1ad2      	subs	r2, r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	621a      	str	r2, [r3, #32]
 8002196:	e014      	b.n	80021c2 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80021a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021ac:	e009      	b.n	80021c2 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d155      	bne.n	8002276 <HAL_PCD_EP_DB_Transmit+0x22c>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d8:	b29b      	uxth	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4413      	add	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	00da      	lsls	r2, r3, #3
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	4413      	add	r3, r2
 80021ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d112      	bne.n	800221e <HAL_PCD_EP_DB_Transmit+0x1d4>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002202:	b29a      	uxth	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002216:	b29a      	uxth	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	801a      	strh	r2, [r3, #0]
 800221c:	e047      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0x264>
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	2b3e      	cmp	r3, #62	; 0x3e
 8002222:	d811      	bhi.n	8002248 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	3301      	adds	r3, #1
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	b29b      	uxth	r3, r3
 800223e:	029b      	lsls	r3, r3, #10
 8002240:	b29a      	uxth	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	e032      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0x264>
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <HAL_PCD_EP_DB_Transmit+0x214>
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	b29b      	uxth	r3, r3
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	b29b      	uxth	r3, r3
 8002266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226e:	b29a      	uxth	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e01b      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0x264>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d117      	bne.n	80022ae <HAL_PCD_EP_DB_Transmit+0x264>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	4413      	add	r3, r2
 8002294:	623b      	str	r3, [r7, #32]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	00da      	lsls	r2, r3, #3
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	4413      	add	r3, r2
 80022a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6959      	ldr	r1, [r3, #20]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	891a      	ldrh	r2, [r3, #8]
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f003 fdd3 	bl	8005e68 <USB_WritePMA>
 80022c2:	e12e      	b.n	8002522 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d306      	bcc.n	8002302 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022fa:	1ad2      	subs	r2, r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	619a      	str	r2, [r3, #24]
 8002300:	e002      	b.n	8002308 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d12c      	bne.n	800236a <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f005 fdbf 	bl	8007e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80fd 	bne.w	8002522 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]
 8002368:	e0db      	b.n	8002522 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11f      	bne.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 80b1 	bne.w	8002522 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023c6:	441a      	add	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023d2:	441a      	add	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d309      	bcc.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	1ad2      	subs	r2, r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	621a      	str	r2, [r3, #32]
 80023f6:	e014      	b.n	8002422 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d106      	bne.n	800240e <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002402:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800240c:	e009      	b.n	8002422 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d155      	bne.n	80024dc <HAL_PCD_EP_DB_Transmit+0x492>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	647b      	str	r3, [r7, #68]	; 0x44
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243e:	b29b      	uxth	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002444:	4413      	add	r3, r2
 8002446:	647b      	str	r3, [r7, #68]	; 0x44
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	00da      	lsls	r2, r3, #3
 800244e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002450:	4413      	add	r3, r2
 8002452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002456:	643b      	str	r3, [r7, #64]	; 0x40
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	2b00      	cmp	r3, #0
 800245c:	d112      	bne.n	8002484 <HAL_PCD_EP_DB_Transmit+0x43a>
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002468:	b29a      	uxth	r2, r3
 800246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247c:	b29a      	uxth	r2, r3
 800247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e044      	b.n	800250e <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002486:	2b3e      	cmp	r3, #62	; 0x3e
 8002488:	d811      	bhi.n	80024ae <HAL_PCD_EP_DB_Transmit+0x464>
 800248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x456>
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	3301      	adds	r3, #1
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	029b      	lsls	r3, r3, #10
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024aa:	801a      	strh	r2, [r3, #0]
 80024ac:	e02f      	b.n	800250e <HAL_PCD_EP_DB_Transmit+0x4c4>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_PCD_EP_DB_Transmit+0x47a>
 80024be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c0:	3b01      	subs	r3, #1
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e018      	b.n	800250e <HAL_PCD_EP_DB_Transmit+0x4c4>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d114      	bne.n	800250e <HAL_PCD_EP_DB_Transmit+0x4c4>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	4413      	add	r3, r2
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	00da      	lsls	r2, r3, #3
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	4413      	add	r3, r2
 8002500:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	b29a      	uxth	r2, r3
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6959      	ldr	r1, [r3, #20]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	895a      	ldrh	r2, [r3, #10]
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251c:	b29b      	uxth	r3, r3
 800251e:	f003 fca3 	bl	8005e68 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800253c:	823b      	strh	r3, [r7, #16]
 800253e:	8a3b      	ldrh	r3, [r7, #16]
 8002540:	f083 0310 	eor.w	r3, r3, #16
 8002544:	823b      	strh	r3, [r7, #16]
 8002546:	8a3b      	ldrh	r3, [r7, #16]
 8002548:	f083 0320 	eor.w	r3, r3, #32
 800254c:	823b      	strh	r3, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8a3b      	ldrh	r3, [r7, #16]
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3748      	adds	r7, #72	; 0x48
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	817b      	strh	r3, [r7, #10]
 800258a:	4613      	mov	r3, r2
 800258c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800258e:	897b      	ldrh	r3, [r7, #10]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e009      	b.n	80025c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025b2:	897a      	ldrh	r2, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025c6:	893b      	ldrh	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	80da      	strh	r2, [r3, #6]
 80025da:	e00b      	b.n	80025f4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2201      	movs	r2, #1
 80025e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002626:	b29b      	uxth	r3, r3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800263a:	b29b      	uxth	r3, r3
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_PWREx_ControlVoltageScaling+0x26>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266c:	d007      	beq.n	800267e <HAL_PWREx_ControlVoltageScaling+0x26>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	d003      	beq.n	800267e <HAL_PWREx_ControlVoltageScaling+0x26>
 8002676:	219e      	movs	r1, #158	; 0x9e
 8002678:	484d      	ldr	r0, [pc, #308]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0x158>)
 800267a:	f7fd fed0 	bl	800041e <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d141      	bne.n	8002708 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002690:	d131      	bne.n	80026f6 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002692:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002698:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800269a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800269e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026aa:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80026ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026b2:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2232      	movs	r2, #50	; 0x32
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x164>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0c9b      	lsrs	r3, r3, #18
 80026c4:	3301      	adds	r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c8:	e002      	b.n	80026d0 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d0:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026dc:	d102      	bne.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f2      	bne.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026e4:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f0:	d158      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e057      	b.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80026f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026fc:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80026fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002702:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002706:	e04d      	b.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270e:	d141      	bne.n	8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d131      	bne.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002724:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2232      	movs	r2, #50	; 0x32
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x164>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	3301      	adds	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002754:	e002      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b01      	subs	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d102      	bne.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x118>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f2      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277c:	d112      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e011      	b.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002792:	e007      	b.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a2:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	08009390 	.word	0x08009390
 80027b4:	40007000 	.word	0x40007000
 80027b8:	20000000 	.word	0x20000000
 80027bc:	431bde83 	.word	0x431bde83

080027c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ce:	6093      	str	r3, [r2, #8]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40007000 	.word	0x40007000

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f000 bc03 	b.w	8002ffa <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d022      	beq.n	8002842 <HAL_RCC_OscConfig+0x62>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11c      	bne.n	8002842 <HAL_RCC_OscConfig+0x62>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x62>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d110      	bne.n	8002842 <HAL_RCC_OscConfig+0x62>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_RCC_OscConfig+0x62>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_RCC_OscConfig+0x62>
 8002838:	f240 1143 	movw	r1, #323	; 0x143
 800283c:	48a4      	ldr	r0, [pc, #656]	; (8002ad0 <HAL_RCC_OscConfig+0x2f0>)
 800283e:	f7fd fdee 	bl	800041e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8089 	beq.w	8002962 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00e      	beq.n	8002876 <HAL_RCC_OscConfig+0x96>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d009      	beq.n	8002876 <HAL_RCC_OscConfig+0x96>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286a:	d004      	beq.n	8002876 <HAL_RCC_OscConfig+0x96>
 800286c:	f240 1149 	movw	r1, #329	; 0x149
 8002870:	4897      	ldr	r0, [pc, #604]	; (8002ad0 <HAL_RCC_OscConfig+0x2f0>)
 8002872:	f7fd fdd4 	bl	800041e <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002876:	4b97      	ldr	r3, [pc, #604]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002880:	4b94      	ldr	r3, [pc, #592]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	d102      	bne.n	8002896 <HAL_RCC_OscConfig+0xb6>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d002      	beq.n	800289c <HAL_RCC_OscConfig+0xbc>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d10b      	bne.n	80028b4 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	4b8d      	ldr	r3, [pc, #564]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d05b      	beq.n	8002960 <HAL_RCC_OscConfig+0x180>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d157      	bne.n	8002960 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e3a2      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0xec>
 80028be:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a84      	ldr	r2, [pc, #528]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e01d      	b.n	8002908 <HAL_RCC_OscConfig+0x128>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x110>
 80028d6:	4b7f      	ldr	r3, [pc, #508]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7e      	ldr	r2, [pc, #504]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b7c      	ldr	r3, [pc, #496]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7b      	ldr	r2, [pc, #492]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0x128>
 80028f0:	4b78      	ldr	r3, [pc, #480]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a77      	ldr	r2, [pc, #476]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a74      	ldr	r2, [pc, #464]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fd ff5a 	bl	80007c8 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fd ff56 	bl	80007c8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e367      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292a:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x138>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fd ff46 	bl	80007c8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fd ff42 	bl	80007c8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e353      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002952:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x160>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 808d 	beq.w	8002a8a <HAL_RCC_OscConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HAL_RCC_OscConfig+0x1ac>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002980:	d004      	beq.n	800298c <HAL_RCC_OscConfig+0x1ac>
 8002982:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8002986:	4852      	ldr	r0, [pc, #328]	; (8002ad0 <HAL_RCC_OscConfig+0x2f0>)
 8002988:	f7fd fd49 	bl	800041e <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b7f      	cmp	r3, #127	; 0x7f
 8002992:	d904      	bls.n	800299e <HAL_RCC_OscConfig+0x1be>
 8002994:	f240 117f 	movw	r1, #383	; 0x17f
 8002998:	484d      	ldr	r0, [pc, #308]	; (8002ad0 <HAL_RCC_OscConfig+0x2f0>)
 800299a:	f7fd fd40 	bl	800041e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d102      	bne.n	80029be <HAL_RCC_OscConfig+0x1de>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1e4>
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11f      	bne.n	8002a04 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x1fc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e30e      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	493a      	ldr	r1, [pc, #232]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_OscConfig+0x2f8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fe9b 	bl	8000730 <HAL_InitTick>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d043      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e2fa      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d023      	beq.n	8002a54 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fd fed6 	bl	80007c8 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fd fed2 	bl	80007c8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e2e3      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	061b      	lsls	r3, r3, #24
 8002a4c:	4921      	ldr	r1, [pc, #132]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
 8002a52:	e01a      	b.n	8002a8a <HAL_RCC_OscConfig+0x2aa>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a54:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fd feb2 	bl	80007c8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fd feae 	bl	80007c8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e2bf      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x288>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x2aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04f      	beq.n	8002b36 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2d0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d004      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2d0>
 8002aa6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002aaa:	4809      	ldr	r0, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x2f0>)
 8002aac:	f7fd fcb7 	bl	800041e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d022      	beq.n	8002afe <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <HAL_RCC_OscConfig+0x2f4>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fd fe7e 	bl	80007c8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ace:	e00e      	b.n	8002aee <HAL_RCC_OscConfig+0x30e>
 8002ad0:	080093cc 	.word	0x080093cc
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fd fe74 	bl	80007c8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e285      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aee:	4b95      	ldr	r3, [pc, #596]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ef      	beq.n	8002adc <HAL_RCC_OscConfig+0x2fc>
 8002afc:	e01b      	b.n	8002b36 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afe:	4b91      	ldr	r3, [pc, #580]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	4a8f      	ldr	r2, [pc, #572]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fd fe5b 	bl	80007c8 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b16:	f7fd fe57 	bl	80007c8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e268      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b28:	4b86      	ldr	r3, [pc, #536]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ef      	bne.n	8002b16 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80b7 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x38a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_OscConfig+0x38a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d004      	beq.n	8002b6a <HAL_RCC_OscConfig+0x38a>
 8002b60:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8002b64:	4878      	ldr	r0, [pc, #480]	; (8002d48 <HAL_RCC_OscConfig+0x568>)
 8002b66:	f7fd fc5a 	bl	800041e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b6a:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x39a>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x39c>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00d      	beq.n	8002b9c <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b70      	ldr	r3, [pc, #448]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	4a6f      	ldr	r2, [pc, #444]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b8c:	4b6d      	ldr	r3, [pc, #436]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9c:	4b6b      	ldr	r3, [pc, #428]	; (8002d4c <HAL_RCC_OscConfig+0x56c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d118      	bne.n	8002bda <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <HAL_RCC_OscConfig+0x56c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a67      	ldr	r2, [pc, #412]	; (8002d4c <HAL_RCC_OscConfig+0x56c>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb4:	f7fd fe08 	bl	80007c8 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fd fe04 	bl	80007c8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e215      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bce:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <HAL_RCC_OscConfig+0x56c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x414>
 8002be2:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf2:	e024      	b.n	8002c3e <HAL_RCC_OscConfig+0x45e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d110      	bne.n	8002c1e <HAL_RCC_OscConfig+0x43e>
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	4a50      	ldr	r2, [pc, #320]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	4a4c      	ldr	r2, [pc, #304]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c1c:	e00f      	b.n	8002c3e <HAL_RCC_OscConfig+0x45e>
 8002c1e:	4b49      	ldr	r3, [pc, #292]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	4a47      	ldr	r2, [pc, #284]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c2e:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	4a43      	ldr	r2, [pc, #268]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c36:	f023 0304 	bic.w	r3, r3, #4
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fd fdbf 	bl	80007c8 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fd fdbb 	bl	80007c8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1ca      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c64:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ed      	beq.n	8002c4e <HAL_RCC_OscConfig+0x46e>
 8002c72:	e015      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fd fda8 	bl	80007c8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fd fda4 	bl	80007c8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1b3      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ed      	bne.n	8002c7c <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04f      	beq.n	8002d5e <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4f8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d004      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4f8>
 8002cce:	f240 2139 	movw	r1, #569	; 0x239
 8002cd2:	481d      	ldr	r0, [pc, #116]	; (8002d48 <HAL_RCC_OscConfig+0x568>)
 8002cd4:	f7fd fba3 	bl	800041e <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fd fd6a 	bl	80007c8 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cf8:	f7fd fd66 	bl	80007c8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e177      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x518>
 8002d18:	e021      	b.n	8002d5e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d20:	4a08      	ldr	r2, [pc, #32]	; (8002d44 <HAL_RCC_OscConfig+0x564>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fd fd4d 	bl	80007c8 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d30:	e00e      	b.n	8002d50 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d32:	f7fd fd49 	bl	80007c8 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d907      	bls.n	8002d50 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e15a      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	080093cc 	.word	0x080093cc
 8002d4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d50:	4ba6      	ldr	r3, [pc, #664]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e9      	bne.n	8002d32 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x5a0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCC_OscConfig+0x5a0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d004      	beq.n	8002d80 <HAL_RCC_OscConfig+0x5a0>
 8002d76:	f240 2162 	movw	r1, #610	; 0x262
 8002d7a:	489d      	ldr	r0, [pc, #628]	; (8002ff0 <HAL_RCC_OscConfig+0x810>)
 8002d7c:	f7fd fb4f 	bl	800041e <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8137 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d8a:	4b98      	ldr	r3, [pc, #608]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	f000 80ea 	beq.w	8002f6c <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f040 80bd 	bne.w	8002f1c <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5e4>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5e4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d004      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5e4>
 8002dba:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8002dbe:	488c      	ldr	r0, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x810>)
 8002dc0:	f7fd fb2d 	bl	800041e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x5f4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d904      	bls.n	8002dde <HAL_RCC_OscConfig+0x5fe>
 8002dd4:	f240 216d 	movw	r1, #621	; 0x26d
 8002dd8:	4885      	ldr	r0, [pc, #532]	; (8002ff0 <HAL_RCC_OscConfig+0x810>)
 8002dda:	f7fd fb20 	bl	800041e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	2b07      	cmp	r3, #7
 8002de4:	d903      	bls.n	8002dee <HAL_RCC_OscConfig+0x60e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	2b7f      	cmp	r3, #127	; 0x7f
 8002dec:	d904      	bls.n	8002df8 <HAL_RCC_OscConfig+0x618>
 8002dee:	f240 216e 	movw	r1, #622	; 0x26e
 8002df2:	487f      	ldr	r0, [pc, #508]	; (8002ff0 <HAL_RCC_OscConfig+0x810>)
 8002df4:	f7fd fb13 	bl	800041e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d903      	bls.n	8002e08 <HAL_RCC_OscConfig+0x628>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	2b1f      	cmp	r3, #31
 8002e06:	d904      	bls.n	8002e12 <HAL_RCC_OscConfig+0x632>
 8002e08:	f240 216f 	movw	r1, #623	; 0x26f
 8002e0c:	4878      	ldr	r0, [pc, #480]	; (8002ff0 <HAL_RCC_OscConfig+0x810>)
 8002e0e:	f7fd fb06 	bl	800041e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d010      	beq.n	8002e3c <HAL_RCC_OscConfig+0x65c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x65c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d008      	beq.n	8002e3c <HAL_RCC_OscConfig+0x65c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d004      	beq.n	8002e3c <HAL_RCC_OscConfig+0x65c>
 8002e32:	f44f 711c 	mov.w	r1, #624	; 0x270
 8002e36:	486e      	ldr	r0, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x810>)
 8002e38:	f7fd faf1 	bl	800041e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_OscConfig+0x686>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d00c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x686>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d008      	beq.n	8002e66 <HAL_RCC_OscConfig+0x686>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d004      	beq.n	8002e66 <HAL_RCC_OscConfig+0x686>
 8002e5c:	f240 2171 	movw	r1, #625	; 0x271
 8002e60:	4863      	ldr	r0, [pc, #396]	; (8002ff0 <HAL_RCC_OscConfig+0x810>)
 8002e62:	f7fd fadc 	bl	800041e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a60      	ldr	r2, [pc, #384]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fd fca9 	bl	80007c8 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fd fca5 	bl	80007c8 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0b6      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	4b57      	ldr	r3, [pc, #348]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e98:	4b54      	ldr	r3, [pc, #336]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <HAL_RCC_OscConfig+0x814>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6a11      	ldr	r1, [r2, #32]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ea8:	3a01      	subs	r2, #1
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002eb2:	0212      	lsls	r2, r2, #8
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eba:	0852      	lsrs	r2, r2, #1
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0552      	lsls	r2, r2, #21
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec6:	0852      	lsrs	r2, r2, #1
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0652      	lsls	r2, r2, #25
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ed2:	06d2      	lsls	r2, r2, #27
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	4945      	ldr	r1, [pc, #276]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a42      	ldr	r2, [pc, #264]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee8:	4b40      	ldr	r3, [pc, #256]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a3f      	ldr	r2, [pc, #252]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fd fc68 	bl	80007c8 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fd fc64 	bl	80007c8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e075      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x71c>
 8002f1a:	e06d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x818>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a32      	ldr	r2, [pc, #200]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f28:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd fc40 	bl	80007c8 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fd fc3c 	bl	80007c8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e04d      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x76c>
 8002f6a:	e045      	b.n	8002ff8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e040      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCC_OscConfig+0x80c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0203 	and.w	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d12c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	3b01      	subs	r3, #1
 8002f98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d123      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d11b      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d113      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e007      	b.n	8002ffa <HAL_RCC_OscConfig+0x81a>
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	080093cc 	.word	0x080093cc
 8002ff4:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop

08003004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e1e2      	b.n	80033e2 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x30>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 030f 	bic.w	r3, r3, #15
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_RCC_ClockConfig+0x3a>
 8003034:	f240 310a 	movw	r1, #778	; 0x30a
 8003038:	4897      	ldr	r0, [pc, #604]	; (8003298 <HAL_RCC_ClockConfig+0x294>)
 800303a:	f7fd f9f0 	bl	800041e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d031      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d02e      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d02b      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d028      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d025      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d022      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d01f      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b07      	cmp	r3, #7
 800306c:	d01c      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d019      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b09      	cmp	r3, #9
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b0a      	cmp	r3, #10
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b0b      	cmp	r3, #11
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d00d      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b0d      	cmp	r3, #13
 8003090:	d00a      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b0e      	cmp	r3, #14
 8003096:	d007      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d004      	beq.n	80030a8 <HAL_RCC_ClockConfig+0xa4>
 800309e:	f240 310b 	movw	r1, #779	; 0x30b
 80030a2:	487d      	ldr	r0, [pc, #500]	; (8003298 <HAL_RCC_ClockConfig+0x294>)
 80030a4:	f7fd f9bb 	bl	800041e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b7c      	ldr	r3, [pc, #496]	; (800329c <HAL_RCC_ClockConfig+0x298>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d910      	bls.n	80030d8 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b79      	ldr	r3, [pc, #484]	; (800329c <HAL_RCC_ClockConfig+0x298>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 020f 	bic.w	r2, r3, #15
 80030be:	4977      	ldr	r1, [pc, #476]	; (800329c <HAL_RCC_ClockConfig+0x298>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b75      	ldr	r3, [pc, #468]	; (800329c <HAL_RCC_ClockConfig+0x298>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e184      	b.n	80033e2 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8085 	beq.w	80031f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_ClockConfig+0x104>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d008      	beq.n	8003108 <HAL_RCC_ClockConfig+0x104>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d004      	beq.n	8003108 <HAL_RCC_ClockConfig+0x104>
 80030fe:	f240 3122 	movw	r1, #802	; 0x322
 8003102:	4865      	ldr	r0, [pc, #404]	; (8003298 <HAL_RCC_ClockConfig+0x294>)
 8003104:	f7fd f98b 	bl	800041e <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d129      	bne.n	8003164 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003110:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e160      	b.n	80033e2 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003120:	f000 f9d2 	bl	80034c8 <RCC_GetSysClockFreqFromPLLSource>
 8003124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4a5e      	ldr	r2, [pc, #376]	; (80032a4 <HAL_RCC_ClockConfig+0x2a0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d93f      	bls.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800312e:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003142:	2b00      	cmp	r3, #0
 8003144:	d033      	beq.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12f      	bne.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003156:	4a52      	ldr	r2, [pc, #328]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e024      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d107      	bne.n	800317c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e132      	b.n	80033e2 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317c:	4b48      	ldr	r3, [pc, #288]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e12a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800318c:	f000 f93a 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 8003190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4a43      	ldr	r2, [pc, #268]	; (80032a4 <HAL_RCC_ClockConfig+0x2a0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d909      	bls.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031a2:	4a3f      	ldr	r2, [pc, #252]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 80031a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4939      	ldr	r1, [pc, #228]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c0:	f7fd fb02 	bl	80007c8 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fd fafe 	bl	80007c8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e101      	b.n	80033e2 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d055      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 800320e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003212:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 800322a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800322e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d024      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b90      	cmp	r3, #144	; 0x90
 8003246:	d01c      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2ba0      	cmp	r3, #160	; 0xa0
 800324e:	d018      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2bb0      	cmp	r3, #176	; 0xb0
 8003256:	d014      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2bc0      	cmp	r3, #192	; 0xc0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2bd0      	cmp	r3, #208	; 0xd0
 8003266:	d00c      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2be0      	cmp	r3, #224	; 0xe0
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2bf0      	cmp	r3, #240	; 0xf0
 8003276:	d004      	beq.n	8003282 <HAL_RCC_ClockConfig+0x27e>
 8003278:	f240 3179 	movw	r1, #889	; 0x379
 800327c:	4806      	ldr	r0, [pc, #24]	; (8003298 <HAL_RCC_ClockConfig+0x294>)
 800327e:	f7fd f8ce 	bl	800041e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_RCC_ClockConfig+0x29c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
 8003294:	e011      	b.n	80032ba <HAL_RCC_ClockConfig+0x2b6>
 8003296:	bf00      	nop
 8003298:	080093cc 	.word	0x080093cc
 800329c:	40022000 	.word	0x40022000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d105      	bne.n	80032ba <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032ae:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_RCC_ClockConfig+0x3e8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a4e      	ldr	r2, [pc, #312]	; (80033ec <HAL_RCC_ClockConfig+0x3e8>)
 80032b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ba:	4b4d      	ldr	r3, [pc, #308]	; (80033f0 <HAL_RCC_ClockConfig+0x3ec>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d21d      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c8:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_RCC_ClockConfig+0x3ec>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 020f 	bic.w	r2, r3, #15
 80032d0:	4947      	ldr	r1, [pc, #284]	; (80033f0 <HAL_RCC_ClockConfig+0x3ec>)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032d8:	f7fd fa76 	bl	80007c8 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7fd fa72 	bl	80007c8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e075      	b.n	80033e2 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_RCC_ClockConfig+0x3ec>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d1ed      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d025      	beq.n	800335c <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d018      	beq.n	800334a <HAL_RCC_ClockConfig+0x346>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003320:	d013      	beq.n	800334a <HAL_RCC_ClockConfig+0x346>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800332a:	d00e      	beq.n	800334a <HAL_RCC_ClockConfig+0x346>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x346>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800333e:	d004      	beq.n	800334a <HAL_RCC_ClockConfig+0x346>
 8003340:	f240 319b 	movw	r1, #923	; 0x39b
 8003344:	482b      	ldr	r0, [pc, #172]	; (80033f4 <HAL_RCC_ClockConfig+0x3f0>)
 8003346:	f7fd f86a 	bl	800041e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCC_ClockConfig+0x3e8>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4925      	ldr	r1, [pc, #148]	; (80033ec <HAL_RCC_ClockConfig+0x3e8>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d026      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x39e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003378:	d013      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x39e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003382:	d00e      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x39e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x39e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003396:	d004      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x39e>
 8003398:	f240 31a2 	movw	r1, #930	; 0x3a2
 800339c:	4815      	ldr	r0, [pc, #84]	; (80033f4 <HAL_RCC_ClockConfig+0x3f0>)
 800339e:	f7fd f83e 	bl	800041e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_ClockConfig+0x3e8>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_RCC_ClockConfig+0x3e8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b6:	f000 f825 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033ba:	4601      	mov	r1, r0
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x3e8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <HAL_RCC_ClockConfig+0x3f4>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	fa21 f303 	lsr.w	r3, r1, r3
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x3f8>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x3fc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f9a8 	bl	8000730 <HAL_InitTick>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40022000 	.word	0x40022000
 80033f4:	080093cc 	.word	0x080093cc
 80033f8:	0800954c 	.word	0x0800954c
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000004 	.word	0x20000004

08003404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d102      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	e047      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d102      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	e03e      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d136      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3301      	adds	r3, #1
 8003450:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d10c      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003458:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003462:	68d2      	ldr	r2, [r2, #12]
 8003464:	0a12      	lsrs	r2, r2, #8
 8003466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	617b      	str	r3, [r7, #20]
      break;
 8003470:	e00c      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003472:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	0a12      	lsrs	r2, r2, #8
 8003480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0e5b      	lsrs	r3, r3, #25
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e001      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034ac:	693b      	ldr	r3, [r7, #16]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d10c      	bne.n	8003506 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034f6:	68d2      	ldr	r2, [r2, #12]
 80034f8:	0a12      	lsrs	r2, r2, #8
 80034fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
    break;
 8003504:	e00c      	b.n	8003520 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003506:	4a12      	ldr	r2, [pc, #72]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003510:	68d2      	ldr	r2, [r2, #12]
 8003512:	0a12      	lsrs	r2, r2, #8
 8003514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    break;
 800351e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0e5b      	lsrs	r3, r3, #25
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800353a:	687b      	ldr	r3, [r7, #4]
}
 800353c:	4618      	mov	r0, r3
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000
 800354c:	007a1200 	.word	0x007a1200
 8003550:	00f42400 	.word	0x00f42400

08003554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800355c:	2300      	movs	r3, #0
 800355e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003560:	2300      	movs	r3, #0
 8003562:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d175      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d16f      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d169      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d163      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d15d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d157      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d151      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d14b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d145      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13f      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d139      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d133      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d12d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d127      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d121      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d115      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8003654:	2185      	movs	r1, #133	; 0x85
 8003656:	4855      	ldr	r0, [pc, #340]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003658:	f7fc fee1 	bl	800041e <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80b2 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367e:	d00d      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d008      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003694:	218d      	movs	r1, #141	; 0x8d
 8003696:	4845      	ldr	r0, [pc, #276]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003698:	f7fc fec1 	bl	800041e <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369c:	4b44      	ldr	r3, [pc, #272]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6593      	str	r3, [r2, #88]	; 0x58
 80036b4:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c0:	2301      	movs	r3, #1
 80036c2:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3a      	ldr	r2, [pc, #232]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036d0:	f7fd f87a 	bl	80007c8 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d6:	e009      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fd f876 	bl	80007c8 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d902      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	74fb      	strb	r3, [r7, #19]
        break;
 80036ea:	e005      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ec:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ef      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d15c      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003708:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01e      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	429a      	cmp	r2, r3
 8003718:	d019      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800372e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003746:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d016      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd f836 	bl	80007c8 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	e00b      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fd f832 	bl	80007c8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d902      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	74fb      	strb	r3, [r7, #19]
            break;
 8003776:	e006      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ec      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379a:	4905      	ldr	r1, [pc, #20]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037a2:	e00b      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	74bb      	strb	r3, [r7, #18]
 80037a8:	e008      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x268>
 80037aa:	bf00      	nop
 80037ac:	08009404 	.word	0x08009404
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037bc:	7c7b      	ldrb	r3, [r7, #17]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4ba7      	ldr	r3, [pc, #668]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	4aa6      	ldr	r2, [pc, #664]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01e      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00f      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d00b      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d007      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80037fa:	21e2      	movs	r1, #226	; 0xe2
 80037fc:	4899      	ldr	r0, [pc, #612]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80037fe:	f7fc fe0e 	bl	800041e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003802:	4b97      	ldr	r3, [pc, #604]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0203 	bic.w	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4993      	ldr	r1, [pc, #588]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01e      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00f      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00b      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d007      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003844:	21ec      	movs	r1, #236	; 0xec
 8003846:	4887      	ldr	r0, [pc, #540]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003848:	f7fc fde9 	bl	800041e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800384c:	4b84      	ldr	r3, [pc, #528]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f023 020c 	bic.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4981      	ldr	r1, [pc, #516]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00f      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b10      	cmp	r3, #16
 800387c:	d00b      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b30      	cmp	r3, #48	; 0x30
 8003884:	d007      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b20      	cmp	r3, #32
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800388e:	21f6      	movs	r1, #246	; 0xf6
 8003890:	4874      	ldr	r0, [pc, #464]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003892:	f7fc fdc4 	bl	800041e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003896:	4b72      	ldr	r3, [pc, #456]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	496e      	ldr	r1, [pc, #440]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d00c      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2bc0      	cmp	r3, #192	; 0xc0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d004      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80038d8:	f240 1101 	movw	r1, #257	; 0x101
 80038dc:	4861      	ldr	r0, [pc, #388]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80038de:	f7fc fd9e 	bl	800041e <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038e2:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	495b      	ldr	r1, [pc, #364]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d022      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003914:	d00e      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800391e:	d009      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800392a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800392e:	484d      	ldr	r0, [pc, #308]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003930:	f7fc fd75 	bl	800041e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003934:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4947      	ldr	r1, [pc, #284]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d022      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x448>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d013      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d00e      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003970:	d009      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397a:	d004      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800397c:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003980:	4838      	ldr	r0, [pc, #224]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003982:	f7fc fd4c 	bl	800041e <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	4932      	ldr	r1, [pc, #200]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01d      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00e      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d009      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	d004      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80039c4:	f44f 7192 	mov.w	r1, #292	; 0x124
 80039c8:	4826      	ldr	r0, [pc, #152]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80039ca:	f7fc fd28 	bl	800041e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4920      	ldr	r1, [pc, #128]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a00:	d009      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0a:	d004      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003a0c:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003a10:	4814      	ldr	r0, [pc, #80]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003a12:	f7fc fd04 	bl	800041e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d022      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	d00e      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a52:	d009      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a54:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003a5a:	f7fc fce0 	bl	800041e <assert_failed>
 8003a5e:	e003      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08009404 	.word	0x08009404

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a68:	4ba0      	ldr	r3, [pc, #640]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	499d      	ldr	r1, [pc, #628]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01b      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x558>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d008      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x558>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d004      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x558>
 8003aa2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003aa6:	4892      	ldr	r0, [pc, #584]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003aa8:	f7fc fcb9 	bl	800041e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aac:	4b8f      	ldr	r3, [pc, #572]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ab2:	f023 0203 	bic.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	498c      	ldr	r1, [pc, #560]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d022      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ade:	d00e      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ae8:	d009      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003af2:	d004      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003af4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003af8:	487d      	ldr	r0, [pc, #500]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003afa:	f7fc fc90 	bl	800041e <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003afe:	4b7b      	ldr	r3, [pc, #492]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4977      	ldr	r1, [pc, #476]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02d      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b30:	d00e      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3a:	d009      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b44:	d004      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8003b46:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003b4a:	4869      	ldr	r0, [pc, #420]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003b4c:	f7fc fc67 	bl	800041e <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b50:	4b66      	ldr	r3, [pc, #408]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4963      	ldr	r1, [pc, #396]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b70:	4b5e      	ldr	r3, [pc, #376]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a5d      	ldr	r2, [pc, #372]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02d      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b98:	d00e      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ba2:	d009      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bac:	d004      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003bae:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003bb2:	484f      	ldr	r0, [pc, #316]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003bb4:	f7fc fc33 	bl	800041e <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	4949      	ldr	r1, [pc, #292]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd8:	4b44      	ldr	r3, [pc, #272]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a43      	ldr	r2, [pc, #268]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d028      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c00:	d009      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c0a:	d004      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003c0c:	f240 117b 	movw	r1, #379	; 0x17b
 8003c10:	4837      	ldr	r0, [pc, #220]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003c12:	f7fc fc04 	bl	800041e <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c16:	4b35      	ldr	r3, [pc, #212]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	4931      	ldr	r1, [pc, #196]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c34:	d105      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c40:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d023      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x742>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x716>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5e:	d004      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x716>
 8003c60:	f240 118d 	movw	r1, #397	; 0x18d
 8003c64:	4822      	ldr	r0, [pc, #136]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003c66:	f7fc fbda 	bl	800041e <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	491c      	ldr	r1, [pc, #112]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c88:	d105      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x742>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c94:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d028      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb2:	d004      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8003cb4:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003cb8:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003cba:	f7fc fbb0 	bl	800041e <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	4907      	ldr	r1, [pc, #28]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cde:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a02      	ldr	r2, [pc, #8]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce8:	60d3      	str	r3, [r2, #12]
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	08009404 	.word	0x08009404
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d028      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d10:	d009      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1a:	d004      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d20:	483d      	ldr	r0, [pc, #244]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003d22:	f7fc fb7c 	bl	800041e <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	4939      	ldr	r1, [pc, #228]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d44:	d105      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d46:	4b35      	ldr	r3, [pc, #212]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4a34      	ldr	r2, [pc, #208]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d028      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00e      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d009      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d78:	d004      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8003d7a:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003d7e:	4826      	ldr	r0, [pc, #152]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003d80:	f7fc fb4d 	bl	800041e <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	4922      	ldr	r1, [pc, #136]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d105      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d028      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc4:	d00d      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd6:	d004      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003dd8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8003ddc:	480e      	ldr	r0, [pc, #56]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003dde:	f7fc fb1e 	bl	800041e <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003de2:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	490a      	ldr	r1, [pc, #40]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e00:	d105      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	08009404 	.word	0x08009404
 8003e1c:	40021000 	.word	0x40021000

08003e20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e30:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003e34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e56:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003e5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e84:	b084      	sub	sp, #16
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	f107 0014 	add.w	r0, r7, #20
 8003e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	b004      	add	sp, #16
 8003ec4:	4770      	bx	lr
	...

08003ec8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b09b      	sub	sp, #108	; 0x6c
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	78db      	ldrb	r3, [r3, #3]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d81f      	bhi.n	8003f3a <USB_ActivateEndpoint+0x72>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <USB_ActivateEndpoint+0x38>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f43 	.word	0x08003f43
 8003f0c:	08003f1f 	.word	0x08003f1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f1c:	e012      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f2a:	e00b      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f38:	e004      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003f40:	e000      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>
      break;
 8003f42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b21b      	sxth	r3, r3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b21b      	sxth	r3, r3
 8003f8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	441a      	add	r2, r3
 8003f98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	7b1b      	ldrb	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 8149 	bne.w	800424c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8084 	beq.w	80040cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	00da      	lsls	r2, r3, #3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	88db      	ldrh	r3, [r3, #6]
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	81fb      	strh	r3, [r7, #14]
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <USB_ActivateEndpoint+0x180>
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	81bb      	strh	r3, [r7, #12]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	89bb      	ldrh	r3, [r7, #12]
 8004034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004040:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004044:	b29b      	uxth	r3, r3
 8004046:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	78db      	ldrb	r3, [r3, #3]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d020      	beq.n	8004092 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004066:	813b      	strh	r3, [r7, #8]
 8004068:	893b      	ldrh	r3, [r7, #8]
 800406a:	f083 0320 	eor.w	r3, r3, #32
 800406e:	813b      	strh	r3, [r7, #8]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	441a      	add	r2, r3
 800407a:	893b      	ldrh	r3, [r7, #8]
 800407c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408c:	b29b      	uxth	r3, r3
 800408e:	8013      	strh	r3, [r2, #0]
 8004090:	e27f      	b.n	8004592 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	441a      	add	r2, r3
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	8013      	strh	r3, [r2, #0]
 80040ca:	e262      	b.n	8004592 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	4413      	add	r3, r2
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00da      	lsls	r2, r3, #3
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	4413      	add	r3, r2
 80040ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	88db      	ldrh	r3, [r3, #6]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	4413      	add	r3, r2
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	00da      	lsls	r2, r3, #3
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	4413      	add	r3, r2
 800411e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d112      	bne.n	8004152 <USB_ActivateEndpoint+0x28a>
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004136:	b29a      	uxth	r2, r3
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414a:	b29a      	uxth	r2, r3
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	801a      	strh	r2, [r3, #0]
 8004150:	e02f      	b.n	80041b2 <USB_ActivateEndpoint+0x2ea>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b3e      	cmp	r3, #62	; 0x3e
 8004158:	d813      	bhi.n	8004182 <USB_ActivateEndpoint+0x2ba>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	663b      	str	r3, [r7, #96]	; 0x60
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <USB_ActivateEndpoint+0x2ac>
 800416e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004170:	3301      	adds	r3, #1
 8004172:	663b      	str	r3, [r7, #96]	; 0x60
 8004174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004176:	b29b      	uxth	r3, r3
 8004178:	029b      	lsls	r3, r3, #10
 800417a:	b29a      	uxth	r2, r3
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	e017      	b.n	80041b2 <USB_ActivateEndpoint+0x2ea>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	663b      	str	r3, [r7, #96]	; 0x60
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <USB_ActivateEndpoint+0x2d4>
 8004196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004198:	3b01      	subs	r3, #1
 800419a:	663b      	str	r3, [r7, #96]	; 0x60
 800419c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800419e:	b29b      	uxth	r3, r3
 80041a0:	029b      	lsls	r3, r3, #10
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	83fb      	strh	r3, [r7, #30]
 80041c0:	8bfb      	ldrh	r3, [r7, #30]
 80041c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01b      	beq.n	8004202 <USB_ActivateEndpoint+0x33a>
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	83bb      	strh	r3, [r7, #28]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	8bbb      	ldrh	r3, [r7, #28]
 80041ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fe:	b29b      	uxth	r3, r3
 8004200:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	837b      	strh	r3, [r7, #26]
 800421a:	8b7b      	ldrh	r3, [r7, #26]
 800421c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004220:	837b      	strh	r3, [r7, #26]
 8004222:	8b7b      	ldrh	r3, [r7, #26]
 8004224:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004228:	837b      	strh	r3, [r7, #26]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	8b7b      	ldrh	r3, [r7, #26]
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
 800424a:	e1a2      	b.n	8004592 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	65bb      	str	r3, [r7, #88]	; 0x58
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004292:	b29b      	uxth	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004298:	4413      	add	r3, r2
 800429a:	65bb      	str	r3, [r7, #88]	; 0x58
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	00da      	lsls	r2, r3, #3
 80042a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042aa:	657b      	str	r3, [r7, #84]	; 0x54
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	891b      	ldrh	r3, [r3, #8]
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	653b      	str	r3, [r7, #80]	; 0x50
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042cc:	4413      	add	r3, r2
 80042ce:	653b      	str	r3, [r7, #80]	; 0x50
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	00da      	lsls	r2, r3, #3
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	4413      	add	r3, r2
 80042da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	895b      	ldrh	r3, [r3, #10]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 8091 	bne.w	800441c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004308:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800430a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01b      	beq.n	800434a <USB_ActivateEndpoint+0x482>
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004328:	877b      	strh	r3, [r7, #58]	; 0x3a
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	441a      	add	r2, r3
 8004334:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	873b      	strh	r3, [r7, #56]	; 0x38
 8004358:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800435a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01b      	beq.n	800439a <USB_ActivateEndpoint+0x4d2>
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	86fb      	strh	r3, [r7, #54]	; 0x36
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004392:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	441a      	add	r2, r3
 80043cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004416:	b29b      	uxth	r3, r3
 8004418:	8013      	strh	r3, [r2, #0]
 800441a:	e0ba      	b.n	8004592 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800442c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01d      	beq.n	8004474 <USB_ActivateEndpoint+0x5ac>
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800446c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004470:	b29b      	uxth	r3, r3
 8004472:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004484:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01d      	beq.n	80044cc <USB_ActivateEndpoint+0x604>
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	441a      	add	r2, r3
 80044b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	78db      	ldrb	r3, [r3, #3]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d024      	beq.n	800451e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044f2:	f083 0320 	eor.w	r3, r3, #32
 80044f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
 800451c:	e01d      	b.n	800455a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004534:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004556:	b29b      	uxth	r3, r3
 8004558:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	441a      	add	r2, r3
 800457c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800457e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	b29b      	uxth	r3, r3
 8004590:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004592:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004596:	4618      	mov	r0, r3
 8004598:	376c      	adds	r7, #108	; 0x6c
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop

080045a4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b08d      	sub	sp, #52	; 0x34
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	7b1b      	ldrb	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 808e 	bne.w	80046d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d044      	beq.n	800464a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	81bb      	strh	r3, [r7, #12]
 80045ce:	89bb      	ldrh	r3, [r7, #12]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <USB_DeactivateEndpoint+0x6c>
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	817b      	strh	r3, [r7, #10]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	897b      	ldrh	r3, [r7, #10]
 80045fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800460c:	b29b      	uxth	r3, r3
 800460e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004626:	813b      	strh	r3, [r7, #8]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]
 8004648:	e192      	b.n	8004970 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	827b      	strh	r3, [r7, #18]
 8004658:	8a7b      	ldrh	r3, [r7, #18]
 800465a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d01b      	beq.n	800469a <USB_DeactivateEndpoint+0xf6>
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	823b      	strh	r3, [r7, #16]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	8a3b      	ldrh	r3, [r7, #16]
 8004686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004696:	b29b      	uxth	r3, r3
 8004698:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	81fb      	strh	r3, [r7, #14]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8013      	strh	r3, [r2, #0]
 80046d2:	e14d      	b.n	8004970 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 80a5 	bne.w	8004828 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	843b      	strh	r3, [r7, #32]
 80046ec:	8c3b      	ldrh	r3, [r7, #32]
 80046ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01b      	beq.n	800472e <USB_DeactivateEndpoint+0x18a>
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470c:	83fb      	strh	r3, [r7, #30]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8bfb      	ldrh	r3, [r7, #30]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	83bb      	strh	r3, [r7, #28]
 800473c:	8bbb      	ldrh	r3, [r7, #28]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01b      	beq.n	800477e <USB_DeactivateEndpoint+0x1da>
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	837b      	strh	r3, [r7, #26]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	441a      	add	r2, r3
 8004768:	8b7b      	ldrh	r3, [r7, #26]
 800476a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800477a:	b29b      	uxth	r3, r3
 800477c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004794:	833b      	strh	r3, [r7, #24]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	8b3b      	ldrh	r3, [r7, #24]
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047cc:	82fb      	strh	r3, [r7, #22]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	8afb      	ldrh	r3, [r7, #22]
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004804:	82bb      	strh	r3, [r7, #20]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8abb      	ldrh	r3, [r7, #20]
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
 8004826:	e0a3      	b.n	8004970 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01b      	beq.n	8004878 <USB_DeactivateEndpoint+0x2d4>
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004874:	b29b      	uxth	r3, r3
 8004876:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01b      	beq.n	80048c8 <USB_DeactivateEndpoint+0x324>
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004916:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3734      	adds	r7, #52	; 0x34
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b0c4      	sub	sp, #272	; 0x110
 8004982:	af00      	add	r7, sp, #0
 8004984:	1d3b      	adds	r3, r7, #4
 8004986:	6018      	str	r0, [r3, #0]
 8004988:	463b      	mov	r3, r7
 800498a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800498c:	463b      	mov	r3, r7
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	2b01      	cmp	r3, #1
 8004994:	f040 8566 	bne.w	8005464 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004998:	463b      	mov	r3, r7
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	463b      	mov	r3, r7
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d905      	bls.n	80049b4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80049a8:	463b      	mov	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049b2:	e004      	b.n	80049be <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049be:	463b      	mov	r3, r7
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	7b1b      	ldrb	r3, [r3, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d12c      	bne.n	8004a22 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049c8:	463b      	mov	r3, r7
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6959      	ldr	r1, [r3, #20]
 80049ce:	463b      	mov	r3, r7
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	88da      	ldrh	r2, [r3, #6]
 80049d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049d8:	b29b      	uxth	r3, r3
 80049da:	1d38      	adds	r0, r7, #4
 80049dc:	6800      	ldr	r0, [r0, #0]
 80049de:	f001 fa43 	bl	8005e68 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	463b      	mov	r3, r7
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	00da      	lsls	r2, r3, #3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4413      	add	r3, r2
 8004a06:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004a0a:	f107 0310 	add.w	r3, r7, #16
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	f107 0310 	add.w	r3, r7, #16
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	f000 bcec 	b.w	80053fa <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004a22:	463b      	mov	r3, r7
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	f040 8356 	bne.w	80050da <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004a2e:	463b      	mov	r3, r7
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	463b      	mov	r3, r7
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f240 82fa 	bls.w	8005034 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	463b      	mov	r3, r7
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	463b      	mov	r3, r7
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a8e:	463b      	mov	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a98:	1ad2      	subs	r2, r2, r3
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004aa0:	1d3b      	adds	r3, r7, #4
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 815e 	beq.w	8004d78 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004abc:	1d3b      	adds	r3, r7, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d164      	bne.n	8004b96 <USB_EPStartXfer+0x218>
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	4413      	add	r3, r2
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00da      	lsls	r2, r3, #3
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	4413      	add	r3, r2
 8004af0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d112      	bne.n	8004b24 <USB_EPStartXfer+0x1a6>
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	801a      	strh	r2, [r3, #0]
 8004b22:	e054      	b.n	8004bce <USB_EPStartXfer+0x250>
 8004b24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b28:	2b3e      	cmp	r3, #62	; 0x3e
 8004b2a:	d817      	bhi.n	8004b5c <USB_EPStartXfer+0x1de>
 8004b2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <USB_EPStartXfer+0x1ce>
 8004b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b46:	3301      	adds	r3, #1
 8004b48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	029b      	lsls	r3, r3, #10
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	e038      	b.n	8004bce <USB_EPStartXfer+0x250>
 8004b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <USB_EPStartXfer+0x1fe>
 8004b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b76:	3b01      	subs	r3, #1
 8004b78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	029b      	lsls	r3, r3, #10
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e01b      	b.n	8004bce <USB_EPStartXfer+0x250>
 8004b96:	463b      	mov	r3, r7
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d116      	bne.n	8004bce <USB_EPStartXfer+0x250>
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bae:	4413      	add	r3, r2
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	00da      	lsls	r2, r3, #3
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bce:	463b      	mov	r3, r7
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	895b      	ldrh	r3, [r3, #10]
 8004bd4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bd8:	463b      	mov	r3, r7
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6959      	ldr	r1, [r3, #20]
 8004bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004be8:	1d38      	adds	r0, r7, #4
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	f001 f93c 	bl	8005e68 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bfa:	441a      	add	r2, r3
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c02:	463b      	mov	r3, r7
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	463b      	mov	r3, r7
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d90e      	bls.n	8004c30 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8004c12:	463b      	mov	r3, r7
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	463b      	mov	r3, r7
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	621a      	str	r2, [r3, #32]
 8004c2e:	e008      	b.n	8004c42 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c30:	463b      	mov	r3, r7
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8004c3a:	463b      	mov	r3, r7
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c42:	463b      	mov	r3, r7
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d164      	bne.n	8004d16 <USB_EPStartXfer+0x398>
 8004c4c:	1d3b      	adds	r3, r7, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	1d3b      	adds	r3, r7, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	463b      	mov	r3, r7
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	00da      	lsls	r2, r3, #3
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d112      	bne.n	8004ca4 <USB_EPStartXfer+0x326>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	e057      	b.n	8004d54 <USB_EPStartXfer+0x3d6>
 8004ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ca8:	2b3e      	cmp	r3, #62	; 0x3e
 8004caa:	d817      	bhi.n	8004cdc <USB_EPStartXfer+0x35e>
 8004cac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <USB_EPStartXfer+0x34e>
 8004cc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ccc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e03b      	b.n	8004d54 <USB_EPStartXfer+0x3d6>
 8004cdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ce6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <USB_EPStartXfer+0x37e>
 8004cf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	801a      	strh	r2, [r3, #0]
 8004d14:	e01e      	b.n	8004d54 <USB_EPStartXfer+0x3d6>
 8004d16:	463b      	mov	r3, r7
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d119      	bne.n	8004d54 <USB_EPStartXfer+0x3d6>
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	4413      	add	r3, r2
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	463b      	mov	r3, r7
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	00da      	lsls	r2, r3, #3
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	4413      	add	r3, r2
 8004d44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d48:	623b      	str	r3, [r7, #32]
 8004d4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	891b      	ldrh	r3, [r3, #8]
 8004d5a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d5e:	463b      	mov	r3, r7
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6959      	ldr	r1, [r3, #20]
 8004d64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004d6e:	1d38      	adds	r0, r7, #4
 8004d70:	6800      	ldr	r0, [r0, #0]
 8004d72:	f001 f879 	bl	8005e68 <USB_WritePMA>
 8004d76:	e340      	b.n	80053fa <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d164      	bne.n	8004e4c <USB_EPStartXfer+0x4ce>
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d96:	4413      	add	r3, r2
 8004d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	00da      	lsls	r2, r3, #3
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	4413      	add	r3, r2
 8004da6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d112      	bne.n	8004dda <USB_EPStartXfer+0x45c>
 8004db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	e057      	b.n	8004e8a <USB_EPStartXfer+0x50c>
 8004dda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dde:	2b3e      	cmp	r3, #62	; 0x3e
 8004de0:	d817      	bhi.n	8004e12 <USB_EPStartXfer+0x494>
 8004de2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <USB_EPStartXfer+0x484>
 8004df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	e03b      	b.n	8004e8a <USB_EPStartXfer+0x50c>
 8004e12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <USB_EPStartXfer+0x4b4>
 8004e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	029b      	lsls	r3, r3, #10
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	e01e      	b.n	8004e8a <USB_EPStartXfer+0x50c>
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d119      	bne.n	8004e8a <USB_EPStartXfer+0x50c>
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6a:	4413      	add	r3, r2
 8004e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e6e:	463b      	mov	r3, r7
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	00da      	lsls	r2, r3, #3
 8004e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e78:	4413      	add	r3, r2
 8004e7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	891b      	ldrh	r3, [r3, #8]
 8004e90:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6959      	ldr	r1, [r3, #20]
 8004e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004ea4:	1d38      	adds	r0, r7, #4
 8004ea6:	6800      	ldr	r0, [r0, #0]
 8004ea8:	f000 ffde 	bl	8005e68 <USB_WritePMA>
            ep->xfer_buff += len;
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004eb6:	441a      	add	r2, r3
 8004eb8:	463b      	mov	r3, r7
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d90e      	bls.n	8004eec <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8004ece:	463b      	mov	r3, r7
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8004ed8:	463b      	mov	r3, r7
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	621a      	str	r2, [r3, #32]
 8004eea:	e008      	b.n	8004efe <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	647b      	str	r3, [r7, #68]	; 0x44
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d164      	bne.n	8004fd8 <USB_EPStartXfer+0x65a>
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f14:	1d3b      	adds	r3, r7, #4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f22:	4413      	add	r3, r2
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f26:	463b      	mov	r3, r7
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	00da      	lsls	r2, r3, #3
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	4413      	add	r3, r2
 8004f32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d112      	bne.n	8004f66 <USB_EPStartXfer+0x5e8>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	801a      	strh	r2, [r3, #0]
 8004f64:	e054      	b.n	8005010 <USB_EPStartXfer+0x692>
 8004f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6c:	d817      	bhi.n	8004f9e <USB_EPStartXfer+0x620>
 8004f6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <USB_EPStartXfer+0x610>
 8004f84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	029b      	lsls	r3, r3, #10
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	e038      	b.n	8005010 <USB_EPStartXfer+0x692>
 8004f9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <USB_EPStartXfer+0x640>
 8004fb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	029b      	lsls	r3, r3, #10
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	e01b      	b.n	8005010 <USB_EPStartXfer+0x692>
 8004fd8:	463b      	mov	r3, r7
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d116      	bne.n	8005010 <USB_EPStartXfer+0x692>
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff0:	4413      	add	r3, r2
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffe:	4413      	add	r3, r2
 8005000:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
 8005006:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800500a:	b29a      	uxth	r2, r3
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	895b      	ldrh	r3, [r3, #10]
 8005016:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800501a:	463b      	mov	r3, r7
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6959      	ldr	r1, [r3, #20]
 8005020:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005024:	b29b      	uxth	r3, r3
 8005026:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800502a:	1d38      	adds	r0, r7, #4
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f000 ff1b 	bl	8005e68 <USB_WritePMA>
 8005032:	e1e2      	b.n	80053fa <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005034:	463b      	mov	r3, r7
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800503e:	1d3b      	adds	r3, r7, #4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	663b      	str	r3, [r7, #96]	; 0x60
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005090:	b29b      	uxth	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005096:	4413      	add	r3, r2
 8005098:	663b      	str	r3, [r7, #96]	; 0x60
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	00da      	lsls	r2, r3, #3
 80050a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050a4:	4413      	add	r3, r2
 80050a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	891b      	ldrh	r3, [r3, #8]
 80050bc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050c0:	463b      	mov	r3, r7
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6959      	ldr	r1, [r3, #20]
 80050c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80050d0:	1d38      	adds	r0, r7, #4
 80050d2:	6800      	ldr	r0, [r0, #0]
 80050d4:	f000 fec8 	bl	8005e68 <USB_WritePMA>
 80050d8:	e18f      	b.n	80053fa <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050da:	1d3b      	adds	r3, r7, #4
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 808f 	beq.w	8005214 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80050fc:	463b      	mov	r3, r7
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d164      	bne.n	80051d0 <USB_EPStartXfer+0x852>
 8005106:	1d3b      	adds	r3, r7, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	673b      	str	r3, [r7, #112]	; 0x70
 800510c:	1d3b      	adds	r3, r7, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800511a:	4413      	add	r3, r2
 800511c:	673b      	str	r3, [r7, #112]	; 0x70
 800511e:	463b      	mov	r3, r7
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	00da      	lsls	r2, r3, #3
 8005126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005128:	4413      	add	r3, r2
 800512a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800512e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005130:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005134:	2b00      	cmp	r3, #0
 8005136:	d112      	bne.n	800515e <USB_EPStartXfer+0x7e0>
 8005138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005142:	b29a      	uxth	r2, r3
 8005144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005156:	b29a      	uxth	r2, r3
 8005158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	e054      	b.n	8005208 <USB_EPStartXfer+0x88a>
 800515e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005162:	2b3e      	cmp	r3, #62	; 0x3e
 8005164:	d817      	bhi.n	8005196 <USB_EPStartXfer+0x818>
 8005166:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <USB_EPStartXfer+0x808>
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	3301      	adds	r3, #1
 8005182:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	b29b      	uxth	r3, r3
 800518c:	029b      	lsls	r3, r3, #10
 800518e:	b29a      	uxth	r2, r3
 8005190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e038      	b.n	8005208 <USB_EPStartXfer+0x88a>
 8005196:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <USB_EPStartXfer+0x838>
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	3b01      	subs	r3, #1
 80051b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	029b      	lsls	r3, r3, #10
 80051be:	b29b      	uxth	r3, r3
 80051c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	e01b      	b.n	8005208 <USB_EPStartXfer+0x88a>
 80051d0:	463b      	mov	r3, r7
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d116      	bne.n	8005208 <USB_EPStartXfer+0x88a>
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e8:	4413      	add	r3, r2
 80051ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ec:	463b      	mov	r3, r7
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	00da      	lsls	r2, r3, #3
 80051f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f6:	4413      	add	r3, r2
 80051f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051fc:	677b      	str	r3, [r7, #116]	; 0x74
 80051fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005202:	b29a      	uxth	r2, r3
 8005204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005206:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	895b      	ldrh	r3, [r3, #10]
 800520e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005212:	e097      	b.n	8005344 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d168      	bne.n	80052f0 <USB_EPStartXfer+0x972>
 800521e:	1d3b      	adds	r3, r7, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005236:	4413      	add	r3, r2
 8005238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800523c:	463b      	mov	r3, r7
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	00da      	lsls	r2, r3, #3
 8005244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005248:	4413      	add	r3, r2
 800524a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800524e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005250:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005254:	2b00      	cmp	r3, #0
 8005256:	d112      	bne.n	800527e <USB_EPStartXfer+0x900>
 8005258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005262:	b29a      	uxth	r2, r3
 8005264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005276:	b29a      	uxth	r2, r3
 8005278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e05d      	b.n	800533a <USB_EPStartXfer+0x9bc>
 800527e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005282:	2b3e      	cmp	r3, #62	; 0x3e
 8005284:	d817      	bhi.n	80052b6 <USB_EPStartXfer+0x938>
 8005286:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005290:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <USB_EPStartXfer+0x928>
 800529c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052a0:	3301      	adds	r3, #1
 80052a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	029b      	lsls	r3, r3, #10
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	e041      	b.n	800533a <USB_EPStartXfer+0x9bc>
 80052b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <USB_EPStartXfer+0x958>
 80052cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052d0:	3b01      	subs	r3, #1
 80052d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052da:	b29b      	uxth	r3, r3
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e024      	b.n	800533a <USB_EPStartXfer+0x9bc>
 80052f0:	463b      	mov	r3, r7
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d11f      	bne.n	800533a <USB_EPStartXfer+0x9bc>
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005312:	4413      	add	r3, r2
 8005314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005318:	463b      	mov	r3, r7
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	00da      	lsls	r2, r3, #3
 8005320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005324:	4413      	add	r3, r2
 8005326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800532a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800532e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005332:	b29a      	uxth	r2, r3
 8005334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005338:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	891b      	ldrh	r3, [r3, #8]
 8005340:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005344:	463b      	mov	r3, r7
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6959      	ldr	r1, [r3, #20]
 800534a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800534e:	b29b      	uxth	r3, r3
 8005350:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005354:	1d38      	adds	r0, r7, #4
 8005356:	6800      	ldr	r0, [r0, #0]
 8005358:	f000 fd86 	bl	8005e68 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d122      	bne.n	80053ac <USB_EPStartXfer+0xa2e>
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005384:	1d3b      	adds	r3, r7, #4
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	441a      	add	r2, r3
 8005392:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]
 80053aa:	e026      	b.n	80053fa <USB_EPStartXfer+0xa7c>
 80053ac:	463b      	mov	r3, r7
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d121      	bne.n	80053fa <USB_EPStartXfer+0xa7c>
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	463b      	mov	r3, r7
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80053e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f107 020e 	add.w	r2, r7, #14
 8005410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005418:	8013      	strh	r3, [r2, #0]
 800541a:	f107 030e 	add.w	r3, r7, #14
 800541e:	f107 020e 	add.w	r2, r7, #14
 8005422:	8812      	ldrh	r2, [r2, #0]
 8005424:	f082 0210 	eor.w	r2, r2, #16
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	f107 030e 	add.w	r3, r7, #14
 800542e:	f107 020e 	add.w	r2, r7, #14
 8005432:	8812      	ldrh	r2, [r2, #0]
 8005434:	f082 0220 	eor.w	r2, r2, #32
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	f107 030e 	add.w	r3, r7, #14
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]
 8005462:	e3b5      	b.n	8005bd0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	7b1b      	ldrb	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 8090 	bne.w	8005590 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	429a      	cmp	r2, r3
 800547e:	d90e      	bls.n	800549e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005494:	1ad2      	subs	r2, r2, r3
 8005496:	463b      	mov	r3, r7
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	619a      	str	r2, [r3, #24]
 800549c:	e008      	b.n	80054b0 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800549e:	463b      	mov	r3, r7
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80054a8:	463b      	mov	r3, r7
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2200      	movs	r2, #0
 80054ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054c8:	4413      	add	r3, r2
 80054ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054ce:	463b      	mov	r3, r7
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	00da      	lsls	r2, r3, #3
 80054d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054da:	4413      	add	r3, r2
 80054dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <USB_EPStartXfer+0xb9c>
 80054ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005510:	b29a      	uxth	r2, r3
 8005512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e32c      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
 800551a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800551e:	2b3e      	cmp	r3, #62	; 0x3e
 8005520:	d818      	bhi.n	8005554 <USB_EPStartXfer+0xbd6>
 8005522:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800552c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <USB_EPStartXfer+0xbc4>
 8005538:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800553c:	3301      	adds	r3, #1
 800553e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005542:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005546:	b29b      	uxth	r3, r3
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	b29a      	uxth	r2, r3
 800554c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005550:	801a      	strh	r2, [r3, #0]
 8005552:	e30f      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
 8005554:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800555e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <USB_EPStartXfer+0xbf6>
 800556a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800556e:	3b01      	subs	r3, #1
 8005570:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005574:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005578:	b29b      	uxth	r3, r3
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	b29b      	uxth	r3, r3
 800557e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	e2f1      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8005590:	463b      	mov	r3, r7
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	78db      	ldrb	r3, [r3, #3]
 8005596:	2b02      	cmp	r3, #2
 8005598:	f040 818f 	bne.w	80058ba <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d175      	bne.n	8005692 <USB_EPStartXfer+0xd14>
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055be:	4413      	add	r3, r2
 80055c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c4:	463b      	mov	r3, r7
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	00da      	lsls	r2, r3, #3
 80055cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d116      	bne.n	8005612 <USB_EPStartXfer+0xc94>
 80055e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005608:	b29a      	uxth	r2, r3
 800560a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	e065      	b.n	80056de <USB_EPStartXfer+0xd60>
 8005612:	463b      	mov	r3, r7
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b3e      	cmp	r3, #62	; 0x3e
 800561a:	d81a      	bhi.n	8005652 <USB_EPStartXfer+0xcd4>
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005628:	463b      	mov	r3, r7
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <USB_EPStartXfer+0xcc2>
 8005636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800563a:	3301      	adds	r3, #1
 800563c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005640:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005644:	b29b      	uxth	r3, r3
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	b29a      	uxth	r2, r3
 800564a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	e045      	b.n	80056de <USB_EPStartXfer+0xd60>
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	095b      	lsrs	r3, r3, #5
 800565a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <USB_EPStartXfer+0xcf8>
 800566c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005670:	3b01      	subs	r3, #1
 8005672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800567a:	b29b      	uxth	r3, r3
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	b29b      	uxth	r3, r3
 8005680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005688:	b29a      	uxth	r2, r3
 800568a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e025      	b.n	80056de <USB_EPStartXfer+0xd60>
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d120      	bne.n	80056de <USB_EPStartXfer+0xd60>
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056a4:	1d3b      	adds	r3, r7, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056b4:	4413      	add	r3, r2
 80056b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	00da      	lsls	r2, r3, #3
 80056c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056c6:	4413      	add	r3, r2
 80056c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056e6:	463b      	mov	r3, r7
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d175      	bne.n	80057dc <USB_EPStartXfer+0xe5e>
 80056f0:	1d3b      	adds	r3, r7, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005700:	b29b      	uxth	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005708:	4413      	add	r3, r2
 800570a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	00da      	lsls	r2, r3, #3
 8005716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800571a:	4413      	add	r3, r2
 800571c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d116      	bne.n	800575c <USB_EPStartXfer+0xdde>
 800572e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800573a:	b29a      	uxth	r2, r3
 800573c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005752:	b29a      	uxth	r2, r3
 8005754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	e061      	b.n	8005820 <USB_EPStartXfer+0xea2>
 800575c:	463b      	mov	r3, r7
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b3e      	cmp	r3, #62	; 0x3e
 8005764:	d81a      	bhi.n	800579c <USB_EPStartXfer+0xe1e>
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005772:	463b      	mov	r3, r7
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <USB_EPStartXfer+0xe0c>
 8005780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005784:	3301      	adds	r3, #1
 8005786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	b29b      	uxth	r3, r3
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	b29a      	uxth	r2, r3
 8005794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	e041      	b.n	8005820 <USB_EPStartXfer+0xea2>
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <USB_EPStartXfer+0xe42>
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ba:	3b01      	subs	r3, #1
 80057bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	029b      	lsls	r3, r3, #10
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e021      	b.n	8005820 <USB_EPStartXfer+0xea2>
 80057dc:	463b      	mov	r3, r7
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d11c      	bne.n	8005820 <USB_EPStartXfer+0xea2>
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057f6:	4413      	add	r3, r2
 80057f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	00da      	lsls	r2, r3, #3
 8005804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005808:	4413      	add	r3, r2
 800580a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800580e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	b29a      	uxth	r2, r3
 800581a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800581e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 81a4 	beq.w	8005b74 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005840:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <USB_EPStartXfer+0xeda>
 800584c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10d      	bne.n	8005874 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005858:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800585c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005860:	2b00      	cmp	r3, #0
 8005862:	f040 8187 	bne.w	8005b74 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005866:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	f040 8180 	bne.w	8005b74 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	441a      	add	r2, r3
 80058a0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80058a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8013      	strh	r3, [r2, #0]
 80058b8:	e15c      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	78db      	ldrb	r3, [r3, #3]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 8155 	bne.w	8005b70 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	463b      	mov	r3, r7
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d90e      	bls.n	80058f4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80058e0:	463b      	mov	r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e008      	b.n	8005906 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005906:	463b      	mov	r3, r7
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d16f      	bne.n	80059f0 <USB_EPStartXfer+0x1072>
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005920:	b29b      	uxth	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005928:	4413      	add	r3, r2
 800592a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800592e:	463b      	mov	r3, r7
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	00da      	lsls	r2, r3, #3
 8005936:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800593a:	4413      	add	r3, r2
 800593c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005940:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005948:	2b00      	cmp	r3, #0
 800594a:	d116      	bne.n	800597a <USB_EPStartXfer+0xffc>
 800594c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	e05f      	b.n	8005a3a <USB_EPStartXfer+0x10bc>
 800597a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800597e:	2b3e      	cmp	r3, #62	; 0x3e
 8005980:	d818      	bhi.n	80059b4 <USB_EPStartXfer+0x1036>
 8005982:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800598c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <USB_EPStartXfer+0x1024>
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599c:	3301      	adds	r3, #1
 800599e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	029b      	lsls	r3, r3, #10
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	e042      	b.n	8005a3a <USB_EPStartXfer+0x10bc>
 80059b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <USB_EPStartXfer+0x1056>
 80059ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d8:	b29b      	uxth	r3, r3
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	b29b      	uxth	r3, r3
 80059de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	e024      	b.n	8005a3a <USB_EPStartXfer+0x10bc>
 80059f0:	463b      	mov	r3, r7
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d11f      	bne.n	8005a3a <USB_EPStartXfer+0x10bc>
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a12:	4413      	add	r3, r2
 8005a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	00da      	lsls	r2, r3, #3
 8005a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d16f      	bne.n	8005b2c <USB_EPStartXfer+0x11ae>
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a64:	4413      	add	r3, r2
 8005a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	00da      	lsls	r2, r3, #3
 8005a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a76:	4413      	add	r3, r2
 8005a78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d116      	bne.n	8005ab6 <USB_EPStartXfer+0x1138>
 8005a88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e05e      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
 8005ab6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aba:	2b3e      	cmp	r3, #62	; 0x3e
 8005abc:	d818      	bhi.n	8005af0 <USB_EPStartXfer+0x1172>
 8005abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ac8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <USB_EPStartXfer+0x1160>
 8005ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad8:	3301      	adds	r3, #1
 8005ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	029b      	lsls	r3, r3, #10
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	e041      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
 8005af0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005afa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <USB_EPStartXfer+0x1192>
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	029b      	lsls	r3, r3, #10
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	e023      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d11e      	bne.n	8005b74 <USB_EPStartXfer+0x11f6>
 8005b36:	1d3b      	adds	r3, r7, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b46:	4413      	add	r3, r2
 8005b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	00da      	lsls	r2, r3, #3
 8005b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b58:	4413      	add	r3, r2
 8005b5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	e001      	b.n	8005b74 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e02e      	b.n	8005bd2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b74:	1d3b      	adds	r3, r7, #4
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	463b      	mov	r3, r7
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005b92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005b96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b9a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005b9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ba2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ba6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005baa:	1d3b      	adds	r3, r7, #4
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d020      	beq.n	8005c30 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	81bb      	strh	r3, [r7, #12]
 8005c06:	89bb      	ldrh	r3, [r7, #12]
 8005c08:	f083 0310 	eor.w	r3, r3, #16
 8005c0c:	81bb      	strh	r3, [r7, #12]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	89bb      	ldrh	r3, [r7, #12]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e01f      	b.n	8005c70 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	81fb      	strh	r3, [r7, #14]
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c4e:	81fb      	strh	r3, [r7, #14]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
 8005c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	7b1b      	ldrb	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 809d 	bne.w	8005dcc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d04c      	beq.n	8005d34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	823b      	strh	r3, [r7, #16]
 8005ca8:	8a3b      	ldrh	r3, [r7, #16]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01b      	beq.n	8005cea <USB_EPClearStall+0x6c>
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	81fb      	strh	r3, [r7, #14]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	78db      	ldrb	r3, [r3, #3]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d06c      	beq.n	8005dcc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d08:	81bb      	strh	r3, [r7, #12]
 8005d0a:	89bb      	ldrh	r3, [r7, #12]
 8005d0c:	f083 0320 	eor.w	r3, r3, #32
 8005d10:	81bb      	strh	r3, [r7, #12]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	89bb      	ldrh	r3, [r7, #12]
 8005d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	8013      	strh	r3, [r2, #0]
 8005d32:	e04b      	b.n	8005dcc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	82fb      	strh	r3, [r7, #22]
 8005d42:	8afb      	ldrh	r3, [r7, #22]
 8005d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01b      	beq.n	8005d84 <USB_EPClearStall+0x106>
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	82bb      	strh	r3, [r7, #20]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	8abb      	ldrh	r3, [r7, #20]
 8005d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	827b      	strh	r3, [r7, #18]
 8005d9c:	8a7b      	ldrh	r3, [r7, #18]
 8005d9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005da2:	827b      	strh	r3, [r7, #18]
 8005da4:	8a7b      	ldrh	r3, [r7, #18]
 8005da6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005daa:	827b      	strh	r3, [r7, #18]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	8a7b      	ldrh	r3, [r7, #18]
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d103      	bne.n	8005df4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2280      	movs	r2, #128	; 0x80
 8005df0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005e42:	68fb      	ldr	r3, [r7, #12]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b08d      	sub	sp, #52	; 0x34
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	460b      	mov	r3, r1
 8005e78:	80fb      	strh	r3, [r7, #6]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e7e:	88bb      	ldrh	r3, [r7, #4]
 8005e80:	3301      	adds	r3, #1
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e9e:	e01b      	b.n	8005ed8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	3302      	adds	r3, #2
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	3301      	adds	r3, #1
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e0      	bne.n	8005ea0 <USB_WritePMA+0x38>
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3734      	adds	r7, #52	; 0x34
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b08b      	sub	sp, #44	; 0x2c
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	460b      	mov	r3, r1
 8005efa:	80fb      	strh	r3, [r7, #6]
 8005efc:	4613      	mov	r3, r2
 8005efe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f00:	88bb      	ldrh	r3, [r7, #4]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f10:	88fa      	ldrh	r2, [r7, #6]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	e018      	b.n	8005f54 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	3b01      	subs	r3, #1
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e3      	bne.n	8005f22 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005f5a:	88bb      	ldrh	r3, [r7, #4]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	701a      	strb	r2, [r3, #0]
  }
}
 8005f76:	bf00      	nop
 8005f78:	372c      	adds	r7, #44	; 0x2c
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f92:	f002 f9d5 	bl	8008340 <USBD_static_malloc>
 8005f96:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d105      	bne.n	8005faa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e066      	b.n	8006078 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	7c1b      	ldrb	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d119      	bne.n	8005fee <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	2181      	movs	r1, #129	; 0x81
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 f861 	bl	800808a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f002 f857 	bl	800808a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005fec:	e016      	b.n	800601c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	2181      	movs	r1, #129	; 0x81
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f002 f848 	bl	800808a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006000:	2340      	movs	r3, #64	; 0x40
 8006002:	2202      	movs	r2, #2
 8006004:	2101      	movs	r1, #1
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f002 f83f 	bl	800808a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2210      	movs	r2, #16
 8006018:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800601c:	2308      	movs	r3, #8
 800601e:	2203      	movs	r2, #3
 8006020:	2182      	movs	r1, #130	; 0x82
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f002 f831 	bl	800808a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7c1b      	ldrb	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800605c:	2101      	movs	r1, #1
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f002 f903 	bl	800826a <USBD_LL_PrepareReceive>
 8006064:	e007      	b.n	8006076 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800606c:	2340      	movs	r3, #64	; 0x40
 800606e:	2101      	movs	r1, #1
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f002 f8fa 	bl	800826a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800608c:	2181      	movs	r1, #129	; 0x81
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f002 f821 	bl	80080d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800609a:	2101      	movs	r1, #1
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f002 f81a 	bl	80080d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060aa:	2182      	movs	r1, #130	; 0x82
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f002 f812 	bl	80080d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00e      	beq.n	80060ea <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060dc:	4618      	mov	r0, r3
 80060de:	f002 f93d 	bl	800835c <USBD_static_free>
    pdev->pClassData = NULL;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006104:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800611a:	2b00      	cmp	r3, #0
 800611c:	d03a      	beq.n	8006194 <USBD_CDC_Setup+0xa0>
 800611e:	2b20      	cmp	r3, #32
 8006120:	f040 8097 	bne.w	8006252 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	88db      	ldrh	r3, [r3, #6]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d029      	beq.n	8006180 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b25b      	sxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	da11      	bge.n	800615a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006142:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	88d2      	ldrh	r2, [r2, #6]
 8006148:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800614a:	6939      	ldr	r1, [r7, #16]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	88db      	ldrh	r3, [r3, #6]
 8006150:	461a      	mov	r2, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fa8d 	bl	8007672 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006158:	e082      	b.n	8006260 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	785a      	ldrb	r2, [r3, #1]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	88db      	ldrh	r3, [r3, #6]
 8006168:	b2da      	uxtb	r2, r3
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006170:	6939      	ldr	r1, [r7, #16]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	88db      	ldrh	r3, [r3, #6]
 8006176:	461a      	mov	r2, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 faa6 	bl	80076ca <USBD_CtlPrepareRx>
      break;
 800617e:	e06f      	b.n	8006260 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	7850      	ldrb	r0, [r2, #1]
 800618c:	2200      	movs	r2, #0
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	4798      	blx	r3
      break;
 8006192:	e065      	b.n	8006260 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b0b      	cmp	r3, #11
 800619a:	d84f      	bhi.n	800623c <USBD_CDC_Setup+0x148>
 800619c:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <USBD_CDC_Setup+0xb0>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061d5 	.word	0x080061d5
 80061a8:	0800624b 	.word	0x0800624b
 80061ac:	0800623d 	.word	0x0800623d
 80061b0:	0800623d 	.word	0x0800623d
 80061b4:	0800623d 	.word	0x0800623d
 80061b8:	0800623d 	.word	0x0800623d
 80061bc:	0800623d 	.word	0x0800623d
 80061c0:	0800623d 	.word	0x0800623d
 80061c4:	0800623d 	.word	0x0800623d
 80061c8:	0800623d 	.word	0x0800623d
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	08006225 	.word	0x08006225
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d107      	bne.n	80061ee <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	2202      	movs	r2, #2
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fa43 	bl	8007672 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061ec:	e030      	b.n	8006250 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 f9cd 	bl	8007590 <USBD_CtlError>
            ret = USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	75fb      	strb	r3, [r7, #23]
          break;
 80061fa:	e029      	b.n	8006250 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006202:	2b03      	cmp	r3, #3
 8006204:	d107      	bne.n	8006216 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006206:	f107 030f 	add.w	r3, r7, #15
 800620a:	2201      	movs	r2, #1
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fa2f 	bl	8007672 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006214:	e01c      	b.n	8006250 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 f9b9 	bl	8007590 <USBD_CtlError>
            ret = USBD_FAIL;
 800621e:	2303      	movs	r3, #3
 8006220:	75fb      	strb	r3, [r7, #23]
          break;
 8006222:	e015      	b.n	8006250 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622a:	2b03      	cmp	r3, #3
 800622c:	d00f      	beq.n	800624e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 f9ad 	bl	8007590 <USBD_CtlError>
            ret = USBD_FAIL;
 8006236:	2303      	movs	r3, #3
 8006238:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800623a:	e008      	b.n	800624e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 f9a6 	bl	8007590 <USBD_CtlError>
          ret = USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	75fb      	strb	r3, [r7, #23]
          break;
 8006248:	e002      	b.n	8006250 <USBD_CDC_Setup+0x15c>
          break;
 800624a:	bf00      	nop
 800624c:	e008      	b.n	8006260 <USBD_CDC_Setup+0x16c>
          break;
 800624e:	bf00      	nop
      }
      break;
 8006250:	e006      	b.n	8006260 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 f99b 	bl	8007590 <USBD_CtlError>
      ret = USBD_FAIL;
 800625a:	2303      	movs	r3, #3
 800625c:	75fb      	strb	r3, [r7, #23]
      break;
 800625e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800627e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800628a:	2303      	movs	r3, #3
 800628c:	e04f      	b.n	800632e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006294:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	3318      	adds	r3, #24
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d029      	beq.n	8006300 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	3318      	adds	r3, #24
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	78f9      	ldrb	r1, [r7, #3]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	460b      	mov	r3, r1
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4403      	add	r3, r0
 80062cc:	3338      	adds	r3, #56	; 0x38
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80062d4:	fb03 f301 	mul.w	r3, r3, r1
 80062d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d110      	bne.n	8006300 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3318      	adds	r3, #24
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062f2:	78f9      	ldrb	r1, [r7, #3]
 80062f4:	2300      	movs	r3, #0
 80062f6:	2200      	movs	r2, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 ff95 	bl	8008228 <USBD_LL_Transmit>
 80062fe:	e015      	b.n	800632c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006348:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	e015      	b.n	8006384 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 ffa5 	bl	80082ac <USBD_LL_GetRxDataSize>
 8006362:	4602      	mov	r2, r0
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800637e:	4611      	mov	r1, r2
 8006380:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800639a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d015      	beq.n	80063d2 <USBD_CDC_EP0_RxReady+0x46>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063ac:	2bff      	cmp	r3, #255	; 0xff
 80063ae:	d010      	beq.n	80063d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80063be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063c6:	b292      	uxth	r2, r2
 80063c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	22ff      	movs	r2, #255	; 0xff
 80063ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2243      	movs	r2, #67	; 0x43
 80063e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80063ea:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20000094 	.word	0x20000094

080063fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2243      	movs	r2, #67	; 0x43
 8006408:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800640a:	4b03      	ldr	r3, [pc, #12]	; (8006418 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	20000050 	.word	0x20000050

0800641c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2243      	movs	r2, #67	; 0x43
 8006428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	200000d8 	.word	0x200000d8

0800643c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	220a      	movs	r2, #10
 8006448:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800644a:	4b03      	ldr	r3, [pc, #12]	; (8006458 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	2000000c 	.word	0x2000000c

0800645c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	e004      	b.n	800647a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006498:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064fe:	2303      	movs	r3, #3
 8006500:	e01a      	b.n	8006538 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006508:	2b00      	cmp	r3, #0
 800650a:	d114      	bne.n	8006536 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2201      	movs	r2, #1
 8006510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800652a:	2181      	movs	r1, #129	; 0x81
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fe7b 	bl	8008228 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800655a:	2303      	movs	r3, #3
 800655c:	e016      	b.n	800658c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	7c1b      	ldrb	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800656c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006570:	2101      	movs	r1, #1
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fe79 	bl	800826a <USBD_LL_PrepareReceive>
 8006578:	e007      	b.n	800658a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006580:	2340      	movs	r3, #64	; 0x40
 8006582:	2101      	movs	r1, #1
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fe70 	bl	800826a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e01f      	b.n	80065ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	79fa      	ldrb	r2, [r7, #7]
 80065de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f001 fcd7 	bl	8007f94 <USBD_LL_Init>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006608:	2303      	movs	r3, #3
 800660a:	e016      	b.n	800663a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f107 020e 	add.w	r2, r7, #14
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	4602      	mov	r2, r0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fd02 	bl	8008054 <USBD_LL_Start>
 8006650:	4603      	mov	r3, r0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800667c:	2303      	movs	r3, #3
 800667e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	4611      	mov	r1, r2
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3
 800669a:	4603      	mov	r3, r0
 800669c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	78fa      	ldrb	r2, [r7, #3]
 80066c8:	4611      	mov	r1, r2
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
  }

  return USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 ff16 	bl	800751c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066fe:	461a      	mov	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2b01      	cmp	r3, #1
 8006712:	d00e      	beq.n	8006732 <USBD_LL_SetupStage+0x5a>
 8006714:	2b01      	cmp	r3, #1
 8006716:	d302      	bcc.n	800671e <USBD_LL_SetupStage+0x46>
 8006718:	2b02      	cmp	r3, #2
 800671a:	d014      	beq.n	8006746 <USBD_LL_SetupStage+0x6e>
 800671c:	e01d      	b.n	800675a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f9d6 	bl	8006ad8 <USBD_StdDevReq>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]
      break;
 8006730:	e020      	b.n	8006774 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa3a 	bl	8006bb4 <USBD_StdItfReq>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]
      break;
 8006744:	e016      	b.n	8006774 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fa76 	bl	8006c40 <USBD_StdEPReq>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
      break;
 8006758:	e00c      	b.n	8006774 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006760:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006764:	b2db      	uxtb	r3, r3
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 fcd3 	bl	8008114 <USBD_LL_StallEP>
 800676e:	4603      	mov	r3, r0
 8006770:	73fb      	strb	r3, [r7, #15]
      break;
 8006772:	bf00      	nop
  }

  return ret;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	460b      	mov	r3, r1
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d137      	bne.n	8006802 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006798:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d14a      	bne.n	800683a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d913      	bls.n	80067d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	1ad2      	subs	r2, r2, r3
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bf28      	it	cs
 80067ca:	4613      	movcs	r3, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 ff97 	bl	8007704 <USBD_CtlContinueRx>
 80067d6:	e030      	b.n	800683a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d105      	bne.n	80067fa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 ff93 	bl	8007726 <USBD_CtlSendStatus>
 8006800:	e01b      	b.n	800683a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d013      	beq.n	8006836 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006814:	2b03      	cmp	r3, #3
 8006816:	d10e      	bne.n	8006836 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	7afa      	ldrb	r2, [r7, #11]
 8006822:	4611      	mov	r1, r2
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	4798      	blx	r3
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	e002      	b.n	800683c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006836:	2303      	movs	r3, #3
 8006838:	e000      	b.n	800683c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	460b      	mov	r3, r1
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d16a      	bne.n	800692e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3314      	adds	r3, #20
 800685c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006864:	2b02      	cmp	r3, #2
 8006866:	d155      	bne.n	8006914 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	429a      	cmp	r2, r3
 8006872:	d914      	bls.n	800689e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	1ad2      	subs	r2, r2, r3
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	461a      	mov	r2, r3
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 ff0c 	bl	80076a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f001 fce7 	bl	800826a <USBD_LL_PrepareReceive>
 800689c:	e03a      	b.n	8006914 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d11c      	bne.n	80068e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d316      	bcc.n	80068e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d20f      	bcs.n	80068e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068c4:	2200      	movs	r2, #0
 80068c6:	2100      	movs	r1, #0
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 feed 	bl	80076a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068d6:	2300      	movs	r3, #0
 80068d8:	2200      	movs	r2, #0
 80068da:	2100      	movs	r1, #0
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 fcc4 	bl	800826a <USBD_LL_PrepareReceive>
 80068e2:	e017      	b.n	8006914 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d105      	bne.n	8006906 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f001 fc03 	bl	8008114 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 ff1c 	bl	800774c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d123      	bne.n	8006966 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fe9b 	bl	800665a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800692c:	e01b      	b.n	8006966 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d013      	beq.n	8006962 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006940:	2b03      	cmp	r3, #3
 8006942:	d10e      	bne.n	8006962 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	7afa      	ldrb	r2, [r7, #11]
 800694e:	4611      	mov	r1, r2
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	4798      	blx	r3
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	e002      	b.n	8006968 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006962:	2303      	movs	r3, #3
 8006964:	e000      	b.n	8006968 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6852      	ldr	r2, [r2, #4]
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	4611      	mov	r1, r2
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069b4:	2340      	movs	r3, #64	; 0x40
 80069b6:	2200      	movs	r2, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fb65 	bl	800808a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2240      	movs	r2, #64	; 0x40
 80069cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069d0:	2340      	movs	r3, #64	; 0x40
 80069d2:	2200      	movs	r2, #0
 80069d4:	2180      	movs	r1, #128	; 0x80
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fb57 	bl	800808a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2240      	movs	r2, #64	; 0x40
 80069e6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	78fa      	ldrb	r2, [r7, #3]
 8006a02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d105      	bne.n	8006a5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d10b      	bne.n	8006a92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006aba:	8a3b      	ldrh	r3, [r7, #16]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	b21a      	sxth	r2, r3
 8006ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006aca:	89fb      	ldrh	r3, [r7, #14]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d004      	beq.n	8006afc <USBD_StdDevReq+0x24>
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d002      	beq.n	8006afc <USBD_StdDevReq+0x24>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <USBD_StdDevReq+0x38>
 8006afa:	e050      	b.n	8006b9e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b0e:	e04b      	b.n	8006ba8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b09      	cmp	r3, #9
 8006b16:	d83c      	bhi.n	8006b92 <USBD_StdDevReq+0xba>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <USBD_StdDevReq+0x48>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b75 	.word	0x08006b75
 8006b24:	08006b89 	.word	0x08006b89
 8006b28:	08006b93 	.word	0x08006b93
 8006b2c:	08006b7f 	.word	0x08006b7f
 8006b30:	08006b93 	.word	0x08006b93
 8006b34:	08006b53 	.word	0x08006b53
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b93 	.word	0x08006b93
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b5d 	.word	0x08006b5d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f9d0 	bl	8006ef0 <USBD_GetDescriptor>
      break;
 8006b50:	e024      	b.n	8006b9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fb5f 	bl	8007218 <USBD_SetAddress>
      break;
 8006b5a:	e01f      	b.n	8006b9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fb9c 	bl	800729c <USBD_SetConfig>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
      break;
 8006b68:	e018      	b.n	8006b9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc39 	bl	80073e4 <USBD_GetConfig>
      break;
 8006b72:	e013      	b.n	8006b9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fc68 	bl	800744c <USBD_GetStatus>
      break;
 8006b7c:	e00e      	b.n	8006b9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fc96 	bl	80074b2 <USBD_SetFeature>
      break;
 8006b86:	e009      	b.n	8006b9c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fca5 	bl	80074da <USBD_ClrFeature>
      break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fcfb 	bl	8007590 <USBD_CtlError>
      break;
 8006b9a:	bf00      	nop
    }
    break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fcf5 	bl	8007590 <USBD_CtlError>
    break;
 8006ba6:	bf00      	nop
  }

  return ret;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop

08006bb4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d003      	beq.n	8006bd6 <USBD_StdItfReq+0x22>
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d001      	beq.n	8006bd6 <USBD_StdItfReq+0x22>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d12a      	bne.n	8006c2c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d81d      	bhi.n	8006c1e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	889b      	ldrh	r3, [r3, #4]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d813      	bhi.n	8006c14 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	88db      	ldrh	r3, [r3, #6]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d110      	bne.n	8006c28 <USBD_StdItfReq+0x74>
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10d      	bne.n	8006c28 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fd8a 	bl	8007726 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006c12:	e009      	b.n	8006c28 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fcba 	bl	8007590 <USBD_CtlError>
      break;
 8006c1c:	e004      	b.n	8006c28 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fcb5 	bl	8007590 <USBD_CtlError>
      break;
 8006c26:	e000      	b.n	8006c2a <USBD_StdItfReq+0x76>
      break;
 8006c28:	bf00      	nop
    }
    break;
 8006c2a:	e004      	b.n	8006c36 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fcae 	bl	8007590 <USBD_CtlError>
    break;
 8006c34:	bf00      	nop
  }

  return ret;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	889b      	ldrh	r3, [r3, #4]
 8006c52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d004      	beq.n	8006c6a <USBD_StdEPReq+0x2a>
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d002      	beq.n	8006c6a <USBD_StdEPReq+0x2a>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <USBD_StdEPReq+0x3e>
 8006c68:	e137      	b.n	8006eda <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c7c:	e132      	b.n	8006ee4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d03e      	beq.n	8006d04 <USBD_StdEPReq+0xc4>
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d002      	beq.n	8006c90 <USBD_StdEPReq+0x50>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d079      	beq.n	8006d82 <USBD_StdEPReq+0x142>
 8006c8e:	e11e      	b.n	8006ece <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d002      	beq.n	8006ca0 <USBD_StdEPReq+0x60>
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d015      	beq.n	8006cca <USBD_StdEPReq+0x8a>
 8006c9e:	e02b      	b.n	8006cf8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00c      	beq.n	8006cc0 <USBD_StdEPReq+0x80>
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d009      	beq.n	8006cc0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fa2f 	bl	8008114 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 fa2b 	bl	8008114 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006cbe:	e020      	b.n	8006d02 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fc64 	bl	8007590 <USBD_CtlError>
        break;
 8006cc8:	e01b      	b.n	8006d02 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	885b      	ldrh	r3, [r3, #2]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10e      	bne.n	8006cf0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <USBD_StdEPReq+0xb0>
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b80      	cmp	r3, #128	; 0x80
 8006cdc:	d008      	beq.n	8006cf0 <USBD_StdEPReq+0xb0>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	88db      	ldrh	r3, [r3, #6]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fa12 	bl	8008114 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fd18 	bl	8007726 <USBD_CtlSendStatus>

        break;
 8006cf6:	e004      	b.n	8006d02 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fc48 	bl	8007590 <USBD_CtlError>
        break;
 8006d00:	bf00      	nop
      }
      break;
 8006d02:	e0e9      	b.n	8006ed8 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d002      	beq.n	8006d14 <USBD_StdEPReq+0xd4>
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d015      	beq.n	8006d3e <USBD_StdEPReq+0xfe>
 8006d12:	e02f      	b.n	8006d74 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00c      	beq.n	8006d34 <USBD_StdEPReq+0xf4>
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b80      	cmp	r3, #128	; 0x80
 8006d1e:	d009      	beq.n	8006d34 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 f9f5 	bl	8008114 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d2a:	2180      	movs	r1, #128	; 0x80
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f9f1 	bl	8008114 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d32:	e025      	b.n	8006d80 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fc2a 	bl	8007590 <USBD_CtlError>
        break;
 8006d3c:	e020      	b.n	8006d80 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	885b      	ldrh	r3, [r3, #2]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d11b      	bne.n	8006d7e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f9fc 	bl	8008152 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fce3 	bl	8007726 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d72:	e004      	b.n	8006d7e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fc0a 	bl	8007590 <USBD_CtlError>
        break;
 8006d7c:	e000      	b.n	8006d80 <USBD_StdEPReq+0x140>
        break;
 8006d7e:	bf00      	nop
      }
      break;
 8006d80:	e0aa      	b.n	8006ed8 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d002      	beq.n	8006d92 <USBD_StdEPReq+0x152>
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d032      	beq.n	8006df6 <USBD_StdEPReq+0x1b6>
 8006d90:	e097      	b.n	8006ec2 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <USBD_StdEPReq+0x168>
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b80      	cmp	r3, #128	; 0x80
 8006d9c:	d004      	beq.n	8006da8 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fbf5 	bl	8007590 <USBD_CtlError>
          break;
 8006da6:	e091      	b.n	8006ecc <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	da0b      	bge.n	8006dc8 <USBD_StdEPReq+0x188>
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	3310      	adds	r3, #16
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	e00b      	b.n	8006de0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4413      	add	r3, r2
 8006dde:	3304      	adds	r3, #4
 8006de0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2202      	movs	r2, #2
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc3f 	bl	8007672 <USBD_CtlSendData>
        break;
 8006df4:	e06a      	b.n	8006ecc <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006df6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da11      	bge.n	8006e22 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3324      	adds	r3, #36	; 0x24
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d117      	bne.n	8006e48 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fbb8 	bl	8007590 <USBD_CtlError>
            break;
 8006e20:	e054      	b.n	8006ecc <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fba5 	bl	8007590 <USBD_CtlError>
            break;
 8006e46:	e041      	b.n	8006ecc <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	da0b      	bge.n	8006e68 <USBD_StdEPReq+0x228>
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	3310      	adds	r3, #16
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4413      	add	r3, r2
 8006e64:	3304      	adds	r3, #4
 8006e66:	e00b      	b.n	8006e80 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3304      	adds	r3, #4
 8006e80:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <USBD_StdEPReq+0x24e>
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d103      	bne.n	8006e96 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e00e      	b.n	8006eb4 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f978 	bl	8008190 <USBD_LL_IsStallEP>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	e002      	b.n	8006eb4 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fbd9 	bl	8007672 <USBD_CtlSendData>
          break;
 8006ec0:	e004      	b.n	8006ecc <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fb63 	bl	8007590 <USBD_CtlError>
        break;
 8006eca:	bf00      	nop
      }
      break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fb5d 	bl	8007590 <USBD_CtlError>
      break;
 8006ed6:	bf00      	nop
    }
    break;
 8006ed8:	e004      	b.n	8006ee4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fb57 	bl	8007590 <USBD_CtlError>
    break;
 8006ee2:	bf00      	nop
  }

  return ret;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	0a1b      	lsrs	r3, r3, #8
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b0e      	cmp	r3, #14
 8006f12:	f200 8152 	bhi.w	80071ba <USBD_GetDescriptor+0x2ca>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <USBD_GetDescriptor+0x2c>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f8d 	.word	0x08006f8d
 8006f20:	08006fa5 	.word	0x08006fa5
 8006f24:	08006fe5 	.word	0x08006fe5
 8006f28:	080071bb 	.word	0x080071bb
 8006f2c:	080071bb 	.word	0x080071bb
 8006f30:	0800715b 	.word	0x0800715b
 8006f34:	08007187 	.word	0x08007187
 8006f38:	080071bb 	.word	0x080071bb
 8006f3c:	080071bb 	.word	0x080071bb
 8006f40:	080071bb 	.word	0x080071bb
 8006f44:	080071bb 	.word	0x080071bb
 8006f48:	080071bb 	.word	0x080071bb
 8006f4c:	080071bb 	.word	0x080071bb
 8006f50:	080071bb 	.word	0x080071bb
 8006f54:	08006f59 	.word	0x08006f59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006f7a:	e126      	b.n	80071ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fb06 	bl	8007590 <USBD_CtlError>
      err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
    break;
 8006f8a:	e11e      	b.n	80071ca <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7c12      	ldrb	r2, [r2, #16]
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	60f8      	str	r0, [r7, #12]
    break;
 8006fa2:	e112      	b.n	80071ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	7c1b      	ldrb	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10d      	bne.n	8006fc8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	f107 0208 	add.w	r2, r7, #8
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
 8006fbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006fc6:	e100      	b.n	80071ca <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	f107 0208 	add.w	r2, r7, #8
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	2202      	movs	r2, #2
 8006fe0:	701a      	strb	r2, [r3, #0]
    break;
 8006fe2:	e0f2      	b.n	80071ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	885b      	ldrh	r3, [r3, #2]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	f200 80ac 	bhi.w	8007148 <USBD_GetDescriptor+0x258>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USBD_GetDescriptor+0x108>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	08007011 	.word	0x08007011
 8006ffc:	08007045 	.word	0x08007045
 8007000:	08007079 	.word	0x08007079
 8007004:	080070ad 	.word	0x080070ad
 8007008:	080070e1 	.word	0x080070e1
 800700c:	08007115 	.word	0x08007115
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007032:	e091      	b.n	8007158 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 faaa 	bl	8007590 <USBD_CtlError>
        err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
      break;
 8007042:	e089      	b.n	8007158 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7c12      	ldrb	r2, [r2, #16]
 800705c:	f107 0108 	add.w	r1, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007066:	e077      	b.n	8007158 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa90 	bl	8007590 <USBD_CtlError>
        err++;
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	3301      	adds	r3, #1
 8007074:	72fb      	strb	r3, [r7, #11]
      break;
 8007076:	e06f      	b.n	8007158 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800709a:	e05d      	b.n	8007158 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa76 	bl	8007590 <USBD_CtlError>
        err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
      break;
 80070aa:	e055      	b.n	8007158 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7c12      	ldrb	r2, [r2, #16]
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ce:	e043      	b.n	8007158 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa5c 	bl	8007590 <USBD_CtlError>
        err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
      break;
 80070de:	e03b      	b.n	8007158 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007102:	e029      	b.n	8007158 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa42 	bl	8007590 <USBD_CtlError>
        err++;
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	3301      	adds	r3, #1
 8007110:	72fb      	strb	r3, [r7, #11]
      break;
 8007112:	e021      	b.n	8007158 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7c12      	ldrb	r2, [r2, #16]
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007136:	e00f      	b.n	8007158 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa28 	bl	8007590 <USBD_CtlError>
        err++;
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	3301      	adds	r3, #1
 8007144:	72fb      	strb	r3, [r7, #11]
      break;
 8007146:	e007      	b.n	8007158 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa20 	bl	8007590 <USBD_CtlError>
      err++;
 8007150:	7afb      	ldrb	r3, [r7, #11]
 8007152:	3301      	adds	r3, #1
 8007154:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007156:	bf00      	nop
    }
    break;
 8007158:	e037      	b.n	80071ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7c1b      	ldrb	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	f107 0208 	add.w	r2, r7, #8
 800716e:	4610      	mov	r0, r2
 8007170:	4798      	blx	r3
 8007172:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007174:	e029      	b.n	80071ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa09 	bl	8007590 <USBD_CtlError>
      err++;
 800717e:	7afb      	ldrb	r3, [r7, #11]
 8007180:	3301      	adds	r3, #1
 8007182:	72fb      	strb	r3, [r7, #11]
    break;
 8007184:	e021      	b.n	80071ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7c1b      	ldrb	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10d      	bne.n	80071aa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f107 0208 	add.w	r2, r7, #8
 800719a:	4610      	mov	r0, r2
 800719c:	4798      	blx	r3
 800719e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	2207      	movs	r2, #7
 80071a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80071a8:	e00f      	b.n	80071ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f9ef 	bl	8007590 <USBD_CtlError>
      err++;
 80071b2:	7afb      	ldrb	r3, [r7, #11]
 80071b4:	3301      	adds	r3, #1
 80071b6:	72fb      	strb	r3, [r7, #11]
    break;
 80071b8:	e007      	b.n	80071ca <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f9e7 	bl	8007590 <USBD_CtlError>
    err++;
 80071c2:	7afb      	ldrb	r3, [r7, #11]
 80071c4:	3301      	adds	r3, #1
 80071c6:	72fb      	strb	r3, [r7, #11]
    break;
 80071c8:	bf00      	nop
  }

  if (err != 0U)
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11e      	bne.n	800720e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	88db      	ldrh	r3, [r3, #6]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d016      	beq.n	8007206 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80071d8:	893b      	ldrh	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	88da      	ldrh	r2, [r3, #6]
 80071e2:	893b      	ldrh	r3, [r7, #8]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	bf28      	it	cs
 80071e8:	4613      	movcs	r3, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80071ee:	893b      	ldrh	r3, [r7, #8]
 80071f0:	461a      	mov	r2, r3
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa3c 	bl	8007672 <USBD_CtlSendData>
 80071fa:	e009      	b.n	8007210 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9c6 	bl	8007590 <USBD_CtlError>
 8007204:	e004      	b.n	8007210 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa8d 	bl	8007726 <USBD_CtlSendStatus>
 800720c:	e000      	b.n	8007210 <USBD_GetDescriptor+0x320>
    return;
 800720e:	bf00      	nop
    }
  }
}
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop

08007218 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	889b      	ldrh	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d130      	bne.n	800728c <USBD_SetAddress+0x74>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	88db      	ldrh	r3, [r3, #6]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d12c      	bne.n	800728c <USBD_SetAddress+0x74>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	885b      	ldrh	r3, [r3, #2]
 8007236:	2b7f      	cmp	r3, #127	; 0x7f
 8007238:	d828      	bhi.n	800728c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	885b      	ldrh	r3, [r3, #2]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007244:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724c:	2b03      	cmp	r3, #3
 800724e:	d104      	bne.n	800725a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f99c 	bl	8007590 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007258:	e01c      	b.n	8007294 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7bfa      	ldrb	r2, [r7, #15]
 800725e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 ffbf 	bl	80081ea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa5a 	bl	8007726 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007280:	e008      	b.n	8007294 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728a:	e003      	b.n	8007294 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f97e 	bl	8007590 <USBD_CtlError>
  }
}
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	4b4b      	ldr	r3, [pc, #300]	; (80073e0 <USBD_SetConfig+0x144>)
 80072b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072b4:	4b4a      	ldr	r3, [pc, #296]	; (80073e0 <USBD_SetConfig+0x144>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d905      	bls.n	80072c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f966 	bl	8007590 <USBD_CtlError>
    return USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e087      	b.n	80073d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d002      	beq.n	80072d8 <USBD_SetConfig+0x3c>
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d025      	beq.n	8007322 <USBD_SetConfig+0x86>
 80072d6:	e071      	b.n	80073bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80072d8:	4b41      	ldr	r3, [pc, #260]	; (80073e0 <USBD_SetConfig+0x144>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01c      	beq.n	800731a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80072e0:	4b3f      	ldr	r3, [pc, #252]	; (80073e0 <USBD_SetConfig+0x144>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80072ea:	4b3d      	ldr	r3, [pc, #244]	; (80073e0 <USBD_SetConfig+0x144>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff f9bd 	bl	8006670 <USBD_SetClassConfig>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f944 	bl	8007590 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007308:	e065      	b.n	80073d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa0b 	bl	8007726 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2203      	movs	r2, #3
 8007314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007318:	e05d      	b.n	80073d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa03 	bl	8007726 <USBD_CtlSendStatus>
    break;
 8007320:	e059      	b.n	80073d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007322:	4b2f      	ldr	r3, [pc, #188]	; (80073e0 <USBD_SetConfig+0x144>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d112      	bne.n	8007350 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007332:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <USBD_SetConfig+0x144>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800733c:	4b28      	ldr	r3, [pc, #160]	; (80073e0 <USBD_SetConfig+0x144>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff f9b0 	bl	80066a8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f9ec 	bl	8007726 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800734e:	e042      	b.n	80073d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007350:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <USBD_SetConfig+0x144>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	429a      	cmp	r2, r3
 800735c:	d02a      	beq.n	80073b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff f99e 	bl	80066a8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800736c:	4b1c      	ldr	r3, [pc, #112]	; (80073e0 <USBD_SetConfig+0x144>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007376:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <USBD_SetConfig+0x144>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff f977 	bl	8006670 <USBD_SetClassConfig>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f8fe 	bl	8007590 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff f983 	bl	80066a8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80073aa:	e014      	b.n	80073d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9ba 	bl	8007726 <USBD_CtlSendStatus>
    break;
 80073b2:	e010      	b.n	80073d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9b6 	bl	8007726 <USBD_CtlSendStatus>
    break;
 80073ba:	e00c      	b.n	80073d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f8e6 	bl	8007590 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073c4:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <USBD_SetConfig+0x144>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff f96c 	bl	80066a8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	73fb      	strb	r3, [r7, #15]
    break;
 80073d4:	bf00      	nop
  }

  return ret;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000208 	.word	0x20000208

080073e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	88db      	ldrh	r3, [r3, #6]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d004      	beq.n	8007400 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f8c9 	bl	8007590 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80073fe:	e021      	b.n	8007444 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007406:	2b01      	cmp	r3, #1
 8007408:	db17      	blt.n	800743a <USBD_GetConfig+0x56>
 800740a:	2b02      	cmp	r3, #2
 800740c:	dd02      	ble.n	8007414 <USBD_GetConfig+0x30>
 800740e:	2b03      	cmp	r3, #3
 8007410:	d00b      	beq.n	800742a <USBD_GetConfig+0x46>
 8007412:	e012      	b.n	800743a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3308      	adds	r3, #8
 800741e:	2201      	movs	r2, #1
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f925 	bl	8007672 <USBD_CtlSendData>
      break;
 8007428:	e00c      	b.n	8007444 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3304      	adds	r3, #4
 800742e:	2201      	movs	r2, #1
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f91d 	bl	8007672 <USBD_CtlSendData>
      break;
 8007438:	e004      	b.n	8007444 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f8a7 	bl	8007590 <USBD_CtlError>
      break;
 8007442:	bf00      	nop
}
 8007444:	bf00      	nop
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745c:	3b01      	subs	r3, #1
 800745e:	2b02      	cmp	r3, #2
 8007460:	d81e      	bhi.n	80074a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d004      	beq.n	8007474 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f88f 	bl	8007590 <USBD_CtlError>
      break;
 8007472:	e01a      	b.n	80074aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f043 0202 	orr.w	r2, r3, #2
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	330c      	adds	r3, #12
 8007494:	2202      	movs	r2, #2
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f8ea 	bl	8007672 <USBD_CtlSendData>
    break;
 800749e:	e004      	b.n	80074aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f874 	bl	8007590 <USBD_CtlError>
    break;
 80074a8:	bf00      	nop
  }
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	885b      	ldrh	r3, [r3, #2]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d106      	bne.n	80074d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f92a 	bl	8007726 <USBD_CtlSendStatus>
  }
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d80b      	bhi.n	8007508 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d10c      	bne.n	8007512 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f910 	bl	8007726 <USBD_CtlSendStatus>
      }
      break;
 8007506:	e004      	b.n	8007512 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f840 	bl	8007590 <USBD_CtlError>
      break;
 8007510:	e000      	b.n	8007514 <USBD_ClrFeature+0x3a>
      break;
 8007512:	bf00      	nop
  }
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff faa8 	bl	8006a9c <SWAPBYTE>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fa9b 	bl	8006a9c <SWAPBYTE>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3301      	adds	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff fa8e 	bl	8006a9c <SWAPBYTE>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	80da      	strh	r2, [r3, #6]
}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fdb9 	bl	8008114 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075a2:	2100      	movs	r1, #0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fdb5 	bl	8008114 <USBD_LL_StallEP>
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d036      	beq.n	8007636 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075cc:	6938      	ldr	r0, [r7, #16]
 80075ce:	f000 f836 	bl	800763e <USBD_GetLen>
 80075d2:	4603      	mov	r3, r0
 80075d4:	3301      	adds	r3, #1
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4413      	add	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	3301      	adds	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	4413      	add	r3, r2
 80075f8:	2203      	movs	r2, #3
 80075fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	3301      	adds	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007602:	e013      	b.n	800762c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	4413      	add	r3, r2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	7812      	ldrb	r2, [r2, #0]
 800760e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	3301      	adds	r3, #1
 8007614:	613b      	str	r3, [r7, #16]
    idx++;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	3301      	adds	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4413      	add	r3, r2
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
    idx++;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	3301      	adds	r3, #1
 800762a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e7      	bne.n	8007604 <USBD_GetString+0x52>
 8007634:	e000      	b.n	8007638 <USBD_GetString+0x86>
    return;
 8007636:	bf00      	nop
  }
}
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800764e:	e005      	b.n	800765c <USBD_GetLen+0x1e>
  {
    len++;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	3301      	adds	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	3301      	adds	r3, #1
 800765a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f5      	bne.n	8007650 <USBD_GetLen+0x12>
  }

  return len;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2202      	movs	r2, #2
 8007682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	2100      	movs	r1, #0
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fdc5 	bl	8008228 <USBD_LL_Transmit>

  return USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	2100      	movs	r1, #0
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fdb4 	bl	8008228 <USBD_LL_Transmit>

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2203      	movs	r2, #3
 80076da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	2100      	movs	r1, #0
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fdb8 	bl	800826a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	2100      	movs	r1, #0
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 fda7 	bl	800826a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2204      	movs	r2, #4
 8007732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007736:	2300      	movs	r3, #0
 8007738:	2200      	movs	r2, #0
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fd73 	bl	8008228 <USBD_LL_Transmit>

  return USBD_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2205      	movs	r2, #5
 8007758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800775c:	2300      	movs	r3, #0
 800775e:	2200      	movs	r2, #0
 8007760:	2100      	movs	r1, #0
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fd81 	bl	800826a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007778:	2200      	movs	r2, #0
 800777a:	4912      	ldr	r1, [pc, #72]	; (80077c4 <MX_USB_Device_Init+0x50>)
 800777c:	4812      	ldr	r0, [pc, #72]	; (80077c8 <MX_USB_Device_Init+0x54>)
 800777e:	f7fe ff09 	bl	8006594 <USBD_Init>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007788:	f7f8 fe42 	bl	8000410 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800778c:	490f      	ldr	r1, [pc, #60]	; (80077cc <MX_USB_Device_Init+0x58>)
 800778e:	480e      	ldr	r0, [pc, #56]	; (80077c8 <MX_USB_Device_Init+0x54>)
 8007790:	f7fe ff30 	bl	80065f4 <USBD_RegisterClass>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800779a:	f7f8 fe39 	bl	8000410 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800779e:	490c      	ldr	r1, [pc, #48]	; (80077d0 <MX_USB_Device_Init+0x5c>)
 80077a0:	4809      	ldr	r0, [pc, #36]	; (80077c8 <MX_USB_Device_Init+0x54>)
 80077a2:	f7fe fe5b 	bl	800645c <USBD_CDC_RegisterInterface>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80077ac:	f7f8 fe30 	bl	8000410 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80077b0:	4805      	ldr	r0, [pc, #20]	; (80077c8 <MX_USB_Device_Init+0x54>)
 80077b2:	f7fe ff46 	bl	8006642 <USBD_Start>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80077bc:	f7f8 fe28 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80077c0:	bf00      	nop
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000130 	.word	0x20000130
 80077c8:	20000440 	.word	0x20000440
 80077cc:	20000018 	.word	0x20000018
 80077d0:	2000011c 	.word	0x2000011c

080077d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  uint16_t i;

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077da:	2200      	movs	r2, #0
 80077dc:	490f      	ldr	r1, [pc, #60]	; (800781c <CDC_Init_FS+0x48>)
 80077de:	4810      	ldr	r0, [pc, #64]	; (8007820 <CDC_Init_FS+0x4c>)
 80077e0:	f7fe fe51 	bl	8006486 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077e4:	490f      	ldr	r1, [pc, #60]	; (8007824 <CDC_Init_FS+0x50>)
 80077e6:	480e      	ldr	r0, [pc, #56]	; (8007820 <CDC_Init_FS+0x4c>)
 80077e8:	f7fe fe66 	bl	80064b8 <USBD_CDC_SetRxBuffer>

  // Initialize USB TX and RX buffer management
  g_RX_buf_in = 0;
 80077ec:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <CDC_Init_FS+0x54>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
  g_RX_buf_out = 0;
 80077f2:	4b0e      	ldr	r3, [pc, #56]	; (800782c <CDC_Init_FS+0x58>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]

  for (i=0; i < kRX_BUF_SIZE; i++)
 80077f8:	2300      	movs	r3, #0
 80077fa:	80fb      	strh	r3, [r7, #6]
 80077fc:	e006      	b.n	800780c <CDC_Init_FS+0x38>
  {
    g_RX_buf[i] = 0;
 80077fe:	88fb      	ldrh	r3, [r7, #6]
 8007800:	4a0b      	ldr	r2, [pc, #44]	; (8007830 <CDC_Init_FS+0x5c>)
 8007802:	2100      	movs	r1, #0
 8007804:	54d1      	strb	r1, [r2, r3]
  for (i=0; i < kRX_BUF_SIZE; i++)
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	3301      	adds	r3, #1
 800780a:	80fb      	strh	r3, [r7, #6]
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	2bfe      	cmp	r3, #254	; 0xfe
 8007810:	d9f5      	bls.n	80077fe <CDC_Init_FS+0x2a>
  }

  return (USBD_OK);
 8007812:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20001010 	.word	0x20001010
 8007820:	20000440 	.word	0x20000440
 8007824:	20000810 	.word	0x20000810
 8007828:	20001811 	.word	0x20001811
 800782c:	20001810 	.word	0x20001810
 8007830:	20000710 	.word	0x20000710

08007834 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007838:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800783a:	4618      	mov	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	6039      	str	r1, [r7, #0]
 800784e:	71fb      	strb	r3, [r7, #7]
 8007850:	4613      	mov	r3, r2
 8007852:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	2b23      	cmp	r3, #35	; 0x23
 8007858:	d84a      	bhi.n	80078f0 <CDC_Control_FS+0xac>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <CDC_Control_FS+0x1c>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	080078f1 	.word	0x080078f1
 8007864:	080078f1 	.word	0x080078f1
 8007868:	080078f1 	.word	0x080078f1
 800786c:	080078f1 	.word	0x080078f1
 8007870:	080078f1 	.word	0x080078f1
 8007874:	080078f1 	.word	0x080078f1
 8007878:	080078f1 	.word	0x080078f1
 800787c:	080078f1 	.word	0x080078f1
 8007880:	080078f1 	.word	0x080078f1
 8007884:	080078f1 	.word	0x080078f1
 8007888:	080078f1 	.word	0x080078f1
 800788c:	080078f1 	.word	0x080078f1
 8007890:	080078f1 	.word	0x080078f1
 8007894:	080078f1 	.word	0x080078f1
 8007898:	080078f1 	.word	0x080078f1
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	080078f1 	.word	0x080078f1
 80078a4:	080078f1 	.word	0x080078f1
 80078a8:	080078f1 	.word	0x080078f1
 80078ac:	080078f1 	.word	0x080078f1
 80078b0:	080078f1 	.word	0x080078f1
 80078b4:	080078f1 	.word	0x080078f1
 80078b8:	080078f1 	.word	0x080078f1
 80078bc:	080078f1 	.word	0x080078f1
 80078c0:	080078f1 	.word	0x080078f1
 80078c4:	080078f1 	.word	0x080078f1
 80078c8:	080078f1 	.word	0x080078f1
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	080078f1 	.word	0x080078f1
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f1 	.word	0x080078f1
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	080078f1 	.word	0x080078f1
 80078e8:	080078f1 	.word	0x080078f1
 80078ec:	080078f1 	.word	0x080078f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078f0:	bf00      	nop
  }

  return (USBD_OK);
 80078f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  static bool in_esc = false;
  static uint8_t esc_sequence[3] = {0};
  uint8_t byte_cnt;
  uint8_t tst_char;

  if (*Len > 0)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80ae 	beq.w	8007a70 <CDC_Receive_FS+0x170>
  {
    for(byte_cnt = 0; byte_cnt < *Len; byte_cnt++)
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
 8007918:	e0a4      	b.n	8007a64 <CDC_Receive_FS+0x164>
    {
      tst_char = Buf[byte_cnt];
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	73bb      	strb	r3, [r7, #14]

      // Check to see if we are in a CR/LF situation
      if (
        !in_cr
 8007924:	4b7b      	ldr	r3, [pc, #492]	; (8007b14 <CDC_Receive_FS+0x214>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f083 0301 	eor.w	r3, r3, #1
 800792c:	b2db      	uxtb	r3, r3
      if (
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01e      	beq.n	8007970 <CDC_Receive_FS+0x70>
        &&
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b0d      	cmp	r3, #13
 8007936:	d002      	beq.n	800793e <CDC_Receive_FS+0x3e>
        (
          kCR == tst_char
          ||
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b0a      	cmp	r3, #10
 800793c:	d118      	bne.n	8007970 <CDC_Receive_FS+0x70>
          kLF == tst_char
        )
      )
      {
        in_cr = true;
 800793e:	4b75      	ldr	r3, [pc, #468]	; (8007b14 <CDC_Receive_FS+0x214>)
 8007940:	2201      	movs	r2, #1
 8007942:	701a      	strb	r2, [r3, #0]
        g_RX_buf[g_RX_buf_in] = kCR;
 8007944:	4b74      	ldr	r3, [pc, #464]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	4b74      	ldr	r3, [pc, #464]	; (8007b1c <CDC_Receive_FS+0x21c>)
 800794c:	210d      	movs	r1, #13
 800794e:	5499      	strb	r1, [r3, r2]
        g_RX_buf_in++;
 8007950:	4b71      	ldr	r3, [pc, #452]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	4b6f      	ldr	r3, [pc, #444]	; (8007b18 <CDC_Receive_FS+0x218>)
 800795a:	701a      	strb	r2, [r3, #0]
        // Now, if we've gotten a full command (user send <CR>) then
        // go call the code that deals with that command, and then
        // keep parsing. (This allows multiple small commands per packet)
///        parsePacket();

        printf("Hey!\n\r");
 800795c:	4870      	ldr	r0, [pc, #448]	; (8007b20 <CDC_Receive_FS+0x220>)
 800795e:	f000 fd6b 	bl	8008438 <iprintf>
///        CDC_Transmit_FS((uint8_t*)"HEY!", 4);

        g_RX_buf_in = 0;
 8007962:	4b6d      	ldr	r3, [pc, #436]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007964:	2200      	movs	r2, #0
 8007966:	701a      	strb	r2, [r3, #0]
        g_RX_buf_out = 0;
 8007968:	4b6e      	ldr	r3, [pc, #440]	; (8007b24 <CDC_Receive_FS+0x224>)
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e065      	b.n	8007a3c <CDC_Receive_FS+0x13c>
      }
      else if (tst_char == 27 && in_esc == false)
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b1b      	cmp	r3, #27
 8007974:	d113      	bne.n	800799e <CDC_Receive_FS+0x9e>
 8007976:	4b6c      	ldr	r3, [pc, #432]	; (8007b28 <CDC_Receive_FS+0x228>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f083 0301 	eor.w	r3, r3, #1
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <CDC_Receive_FS+0x9e>
      {
        in_esc = true;
 8007984:	4b68      	ldr	r3, [pc, #416]	; (8007b28 <CDC_Receive_FS+0x228>)
 8007986:	2201      	movs	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
        esc_sequence[0] = 27;
 800798a:	4b68      	ldr	r3, [pc, #416]	; (8007b2c <CDC_Receive_FS+0x22c>)
 800798c:	221b      	movs	r2, #27
 800798e:	701a      	strb	r2, [r3, #0]
        esc_sequence[1] = 0;
 8007990:	4b66      	ldr	r3, [pc, #408]	; (8007b2c <CDC_Receive_FS+0x22c>)
 8007992:	2200      	movs	r2, #0
 8007994:	705a      	strb	r2, [r3, #1]
        esc_sequence[2] = 0;
 8007996:	4b65      	ldr	r3, [pc, #404]	; (8007b2c <CDC_Receive_FS+0x22c>)
 8007998:	2200      	movs	r2, #0
 800799a:	709a      	strb	r2, [r3, #2]
 800799c:	e04e      	b.n	8007a3c <CDC_Receive_FS+0x13c>
      }
      else if (
        in_esc == true
 800799e:	4b62      	ldr	r3, [pc, #392]	; (8007b28 <CDC_Receive_FS+0x228>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
      else if (
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <CDC_Receive_FS+0xc4>
        &&
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b5b      	cmp	r3, #91	; 0x5b
 80079aa:	d10b      	bne.n	80079c4 <CDC_Receive_FS+0xc4>
        tst_char == 91
        &&
        esc_sequence[0] == 27
 80079ac:	4b5f      	ldr	r3, [pc, #380]	; (8007b2c <CDC_Receive_FS+0x22c>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
        &&
 80079b0:	2b1b      	cmp	r3, #27
 80079b2:	d107      	bne.n	80079c4 <CDC_Receive_FS+0xc4>
        &&
        esc_sequence[1] == 0
 80079b4:	4b5d      	ldr	r3, [pc, #372]	; (8007b2c <CDC_Receive_FS+0x22c>)
 80079b6:	785b      	ldrb	r3, [r3, #1]
        &&
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <CDC_Receive_FS+0xc4>
      )
      {
        /// TODO: What is this for?
        esc_sequence[1] = 91;
 80079bc:	4b5b      	ldr	r3, [pc, #364]	; (8007b2c <CDC_Receive_FS+0x22c>)
 80079be:	225b      	movs	r2, #91	; 0x5b
 80079c0:	705a      	strb	r2, [r3, #1]
 80079c2:	e03b      	b.n	8007a3c <CDC_Receive_FS+0x13c>
      }
      else if (tst_char == 8 && g_RX_buf_in > 0)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d114      	bne.n	80079f4 <CDC_Receive_FS+0xf4>
 80079ca:	4b53      	ldr	r3, [pc, #332]	; (8007b18 <CDC_Receive_FS+0x218>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <CDC_Receive_FS+0xf4>
      {
        // Handle the backspace thing
        g_RX_buf_in--;
 80079d2:	4b51      	ldr	r3, [pc, #324]	; (8007b18 <CDC_Receive_FS+0x218>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	4b4f      	ldr	r3, [pc, #316]	; (8007b18 <CDC_Receive_FS+0x218>)
 80079dc:	701a      	strb	r2, [r3, #0]
        g_RX_buf[g_RX_buf_in] = 0x00;
 80079de:	4b4e      	ldr	r3, [pc, #312]	; (8007b18 <CDC_Receive_FS+0x218>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	4b4d      	ldr	r3, [pc, #308]	; (8007b1c <CDC_Receive_FS+0x21c>)
 80079e6:	2100      	movs	r1, #0
 80079e8:	5499      	strb	r1, [r3, r2]
        CDC_Transmit_FS((uint8_t*)" \b", 2);
 80079ea:	2102      	movs	r1, #2
 80079ec:	4850      	ldr	r0, [pc, #320]	; (8007b30 <CDC_Receive_FS+0x230>)
 80079ee:	f000 f8b3 	bl	8007b58 <CDC_Transmit_FS>
 80079f2:	e023      	b.n	8007a3c <CDC_Receive_FS+0x13c>
      }
      else if (
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b0d      	cmp	r3, #13
 80079f8:	d020      	beq.n	8007a3c <CDC_Receive_FS+0x13c>
        tst_char != kCR
        &&
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b0a      	cmp	r3, #10
 80079fe:	d01d      	beq.n	8007a3c <CDC_Receive_FS+0x13c>
        tst_char != kLF
        &&
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b1f      	cmp	r3, #31
 8007a04:	d91a      	bls.n	8007a3c <CDC_Receive_FS+0x13c>
        tst_char >= 32
      )
      {
        esc_sequence[0] = 0;
 8007a06:	4b49      	ldr	r3, [pc, #292]	; (8007b2c <CDC_Receive_FS+0x22c>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
        esc_sequence[1] = 0;
 8007a0c:	4b47      	ldr	r3, [pc, #284]	; (8007b2c <CDC_Receive_FS+0x22c>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	705a      	strb	r2, [r3, #1]
        esc_sequence[2] = 0;
 8007a12:	4b46      	ldr	r3, [pc, #280]	; (8007b2c <CDC_Receive_FS+0x22c>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	709a      	strb	r2, [r3, #2]
        in_esc = false;
 8007a18:	4b43      	ldr	r3, [pc, #268]	; (8007b28 <CDC_Receive_FS+0x228>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]

        // Only add a byte if it is not a CR or LF
        g_RX_buf[g_RX_buf_in] = tst_char;
 8007a1e:	4b3e      	ldr	r3, [pc, #248]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	4619      	mov	r1, r3
 8007a24:	4a3d      	ldr	r2, [pc, #244]	; (8007b1c <CDC_Receive_FS+0x21c>)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	5453      	strb	r3, [r2, r1]
        in_cr = false;
 8007a2a:	4b3a      	ldr	r3, [pc, #232]	; (8007b14 <CDC_Receive_FS+0x214>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
        g_RX_buf_in++;
 8007a30:	4b39      	ldr	r3, [pc, #228]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	3301      	adds	r3, #1
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	4b37      	ldr	r3, [pc, #220]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007a3a:	701a      	strb	r2, [r3, #0]
      }
      // Check for buffer wraparound
      if (kRX_BUF_SIZE == g_RX_buf_in)
 8007a3c:	4b36      	ldr	r3, [pc, #216]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2bff      	cmp	r3, #255	; 0xff
 8007a42:	d10c      	bne.n	8007a5e <CDC_Receive_FS+0x15e>
      {
        bitset (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN);
 8007a44:	4b3b      	ldr	r3, [pc, #236]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f043 0308 	orr.w	r3, r3, #8
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	4b39      	ldr	r3, [pc, #228]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007a50:	701a      	strb	r2, [r3, #0]
        g_RX_buf_in = 0;
 8007a52:	4b31      	ldr	r3, [pc, #196]	; (8007b18 <CDC_Receive_FS+0x218>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
        g_RX_buf_out = 0;
 8007a58:	4b32      	ldr	r3, [pc, #200]	; (8007b24 <CDC_Receive_FS+0x224>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
    for(byte_cnt = 0; byte_cnt < *Len; byte_cnt++)
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	3301      	adds	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
 8007a64:	7bfa      	ldrb	r2, [r7, #15]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	f4ff af55 	bcc.w	800791a <CDC_Receive_FS+0x1a>
    }
  }

/// TODO: Make this into a function
  // Check for any errors logged in error_byte that need to be sent out
  if (error_byte)
 8007a70:	4b30      	ldr	r3, [pc, #192]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d040      	beq.n	8007afa <CDC_Receive_FS+0x1fa>
  {
    if (bittst (error_byte, 0))
 8007a78:	4b2e      	ldr	r3, [pc, #184]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <CDC_Receive_FS+0x18a>
    {
      // Unused as of yet
      printf ((char *)"!0 \r\n");
 8007a84:	482c      	ldr	r0, [pc, #176]	; (8007b38 <CDC_Receive_FS+0x238>)
 8007a86:	f000 fd4b 	bl	8008520 <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_STEPS_TO_FAST))
 8007a8a:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <CDC_Receive_FS+0x19c>
    {
      // Unused as of yet
      printf ((char *)"!1 Err: Can't step that fast\r\n");
 8007a96:	4829      	ldr	r0, [pc, #164]	; (8007b3c <CDC_Receive_FS+0x23c>)
 8007a98:	f000 fd42 	bl	8008520 <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_TX_BUF_OVERRUN))
 8007a9c:	4b25      	ldr	r3, [pc, #148]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <CDC_Receive_FS+0x1ae>
    {
      printf ((char *)"!2 Err: TX Buffer overrun\r\n");
 8007aa8:	4825      	ldr	r0, [pc, #148]	; (8007b40 <CDC_Receive_FS+0x240>)
 8007aaa:	f000 fd39 	bl	8008520 <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_RX_BUFFER_OVERRUN))
 8007aae:	4b21      	ldr	r3, [pc, #132]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <CDC_Receive_FS+0x1c0>
    {
      printf ((char *)"!3 Err: RX Buffer overrun\r\n");
 8007aba:	4822      	ldr	r0, [pc, #136]	; (8007b44 <CDC_Receive_FS+0x244>)
 8007abc:	f000 fd30 	bl	8008520 <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_MISSING_PARAMETER))
 8007ac0:	4b1c      	ldr	r3, [pc, #112]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 0310 	and.w	r3, r3, #16
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <CDC_Receive_FS+0x1d2>
    {
      printf ((char *)"!4 Err: Missing parameter(s)\r\n");
 8007acc:	481e      	ldr	r0, [pc, #120]	; (8007b48 <CDC_Receive_FS+0x248>)
 8007ace:	f000 fd27 	bl	8008520 <puts>
    if (bittst (error_byte, kERROR_BYTE_PRINTED_ERROR))
    {
      // We don't need to do anything since something has already been printed out
      //printf ((rom char *)"!5\r\n");
    }
    if (bittst (error_byte, kERROR_BYTE_PARAMETER_OUTSIDE_LIMIT))
 8007ad2:	4b18      	ldr	r3, [pc, #96]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <CDC_Receive_FS+0x1e4>
    {
      printf ((char *)"!6 Err: Invalid paramter value\r\n");
 8007ade:	481b      	ldr	r0, [pc, #108]	; (8007b4c <CDC_Receive_FS+0x24c>)
 8007ae0:	f000 fd1e 	bl	8008520 <puts>
    }
    if (bittst (error_byte, kERROR_BYTE_EXTRA_CHARACTERS))
 8007ae4:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	b25b      	sxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da02      	bge.n	8007af4 <CDC_Receive_FS+0x1f4>
    {
      printf ((char *)"!7 Err: Extra parmater\r\n");
 8007aee:	4818      	ldr	r0, [pc, #96]	; (8007b50 <CDC_Receive_FS+0x250>)
 8007af0:	f000 fd16 	bl	8008520 <puts>
    }
    error_byte = 0;
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <CDC_Receive_FS+0x234>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4815      	ldr	r0, [pc, #84]	; (8007b54 <CDC_Receive_FS+0x254>)
 8007afe:	f7fe fcdb 	bl	80064b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b02:	4814      	ldr	r0, [pc, #80]	; (8007b54 <CDC_Receive_FS+0x254>)
 8007b04:	f7fe fd1c 	bl	8006540 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007b08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000209 	.word	0x20000209
 8007b18:	20001811 	.word	0x20001811
 8007b1c:	20000710 	.word	0x20000710
 8007b20:	08009440 	.word	0x08009440
 8007b24:	20001810 	.word	0x20001810
 8007b28:	2000020a 	.word	0x2000020a
 8007b2c:	2000020c 	.word	0x2000020c
 8007b30:	08009448 	.word	0x08009448
 8007b34:	20000438 	.word	0x20000438
 8007b38:	0800944c 	.word	0x0800944c
 8007b3c:	08009454 	.word	0x08009454
 8007b40:	08009474 	.word	0x08009474
 8007b44:	08009490 	.word	0x08009490
 8007b48:	080094ac 	.word	0x080094ac
 8007b4c:	080094cc 	.word	0x080094cc
 8007b50:	080094ec 	.word	0x080094ec
 8007b54:	20000440 	.word	0x20000440

08007b58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b68:	4b10      	ldr	r3, [pc, #64]	; (8007bac <CDC_Transmit_FS+0x54>)
 8007b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <CDC_Transmit_FS+0x34>
  {
    bitset (error_byte, kERROR_BYTE_TX_BUF_OVERRUN);
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <CDC_Transmit_FS+0x58>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f043 0304 	orr.w	r3, r3, #4
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <CDC_Transmit_FS+0x58>)
 8007b86:	701a      	strb	r2, [r3, #0]
    return USBD_BUSY;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e00b      	b.n	8007ba4 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4806      	ldr	r0, [pc, #24]	; (8007bac <CDC_Transmit_FS+0x54>)
 8007b94:	f7fe fc77 	bl	8006486 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b98:	4804      	ldr	r0, [pc, #16]	; (8007bac <CDC_Transmit_FS+0x54>)
 8007b9a:	f7fe fca1 	bl	80064e0 <USBD_CDC_TransmitPacket>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20000440 	.word	0x20000440
 8007bb0:	20000438 	.word	0x20000438

08007bb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	6039      	str	r1, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2212      	movs	r2, #18
 8007be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8007bea:	4b03      	ldr	r3, [pc, #12]	; (8007bf8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000150 	.word	0x20000150

08007bfc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	20000164 	.word	0x20000164

08007c20 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	4907      	ldr	r1, [pc, #28]	; (8007c54 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007c36:	4808      	ldr	r0, [pc, #32]	; (8007c58 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007c38:	f7ff fcbb 	bl	80075b2 <USBD_GetString>
 8007c3c:	e004      	b.n	8007c48 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	4904      	ldr	r1, [pc, #16]	; (8007c54 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007c42:	4805      	ldr	r0, [pc, #20]	; (8007c58 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007c44:	f7ff fcb5 	bl	80075b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c48:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20001814 	.word	0x20001814
 8007c58:	08009504 	.word	0x08009504

08007c5c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	4904      	ldr	r1, [pc, #16]	; (8007c7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8007c6c:	4804      	ldr	r0, [pc, #16]	; (8007c80 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8007c6e:	f7ff fca0 	bl	80075b2 <USBD_GetString>
  return USBD_StrDesc;
 8007c72:	4b02      	ldr	r3, [pc, #8]	; (8007c7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20001814 	.word	0x20001814
 8007c80:	0800951c 	.word	0x0800951c

08007c84 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	221a      	movs	r2, #26
 8007c94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c96:	f000 f843 	bl	8007d20 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007c9a:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000168 	.word	0x20000168

08007ca8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4907      	ldr	r1, [pc, #28]	; (8007cdc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007cbe:	4808      	ldr	r0, [pc, #32]	; (8007ce0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007cc0:	f7ff fc77 	bl	80075b2 <USBD_GetString>
 8007cc4:	e004      	b.n	8007cd0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4904      	ldr	r1, [pc, #16]	; (8007cdc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007cca:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007ccc:	f7ff fc71 	bl	80075b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20001814 	.word	0x20001814
 8007ce0:	08009530 	.word	0x08009530

08007ce4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d105      	bne.n	8007d02 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	4907      	ldr	r1, [pc, #28]	; (8007d18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007cfa:	4808      	ldr	r0, [pc, #32]	; (8007d1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007cfc:	f7ff fc59 	bl	80075b2 <USBD_GetString>
 8007d00:	e004      	b.n	8007d0c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4904      	ldr	r1, [pc, #16]	; (8007d18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007d06:	4805      	ldr	r0, [pc, #20]	; (8007d1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007d08:	f7ff fc53 	bl	80075b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20001814 	.word	0x20001814
 8007d1c:	0800953c 	.word	0x0800953c

08007d20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <Get_SerialNum+0x44>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <Get_SerialNum+0x48>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d32:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <Get_SerialNum+0x4c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d46:	2208      	movs	r2, #8
 8007d48:	4909      	ldr	r1, [pc, #36]	; (8007d70 <Get_SerialNum+0x50>)
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f814 	bl	8007d78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d50:	2204      	movs	r2, #4
 8007d52:	4908      	ldr	r1, [pc, #32]	; (8007d74 <Get_SerialNum+0x54>)
 8007d54:	68b8      	ldr	r0, [r7, #8]
 8007d56:	f000 f80f 	bl	8007d78 <IntToUnicode>
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	1fff7590 	.word	0x1fff7590
 8007d68:	1fff7594 	.word	0x1fff7594
 8007d6c:	1fff7598 	.word	0x1fff7598
 8007d70:	2000016a 	.word	0x2000016a
 8007d74:	2000017a 	.word	0x2000017a

08007d78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]
 8007d8e:	e027      	b.n	8007de0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	0f1b      	lsrs	r3, r3, #28
 8007d94:	2b09      	cmp	r3, #9
 8007d96:	d80b      	bhi.n	8007db0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	0f1b      	lsrs	r3, r3, #28
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	4619      	mov	r1, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	440b      	add	r3, r1
 8007da8:	3230      	adds	r2, #48	; 0x30
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e00a      	b.n	8007dc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	0f1b      	lsrs	r3, r3, #28
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3237      	adds	r2, #55	; 0x37
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
 8007de0:	7dfa      	ldrb	r2, [r7, #23]
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3d3      	bcc.n	8007d90 <IntToUnicode+0x18>
  }
}
 8007de8:	bf00      	nop
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a0d      	ldr	r2, [pc, #52]	; (8007e38 <HAL_PCD_MspInit+0x44>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d113      	bne.n	8007e2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <HAL_PCD_MspInit+0x48>)
 8007e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <HAL_PCD_MspInit+0x48>)
 8007e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e10:	6593      	str	r3, [r2, #88]	; 0x58
 8007e12:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <HAL_PCD_MspInit+0x48>)
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	2014      	movs	r0, #20
 8007e24:	f7f8 fdcc 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007e28:	2014      	movs	r0, #20
 8007e2a:	f7f8 fdf3 	bl	8000a14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40005c00 	.word	0x40005c00
 8007e3c:	40021000 	.word	0x40021000

08007e40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7fe fc3e 	bl	80066d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	440b      	add	r3, r1
 8007e84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f7fe fc76 	bl	800677e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	440b      	add	r3, r1
 8007eba:	333c      	adds	r3, #60	; 0x3c
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	f7fe fcbf 	bl	8006844 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fdc3 	bl	8006a68 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d001      	beq.n	8007f02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007efe:	f7f8 fa87 	bl	8000410 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007f08:	7bfa      	ldrb	r2, [r7, #15]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fd70 	bl	80069f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fd29 	bl	8006970 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fd6b 	bl	8006a12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f44:	4b04      	ldr	r3, [pc, #16]	; (8007f58 <HAL_PCD_SuspendCallback+0x30>)
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	4a03      	ldr	r2, [pc, #12]	; (8007f58 <HAL_PCD_SuspendCallback+0x30>)
 8007f4a:	f043 0306 	orr.w	r3, r3, #6
 8007f4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	e000ed00 	.word	0xe000ed00

08007f5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f6c:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <HAL_PCD_ResumeCallback+0x34>)
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	4a07      	ldr	r2, [pc, #28]	; (8007f90 <HAL_PCD_ResumeCallback+0x34>)
 8007f72:	f023 0306 	bic.w	r3, r3, #6
 8007f76:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007f78:	f000 f9fa 	bl	8008370 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fd5a 	bl	8006a3c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	e000ed00 	.word	0xe000ed00

08007f94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007f9c:	4a2b      	ldr	r2, [pc, #172]	; (800804c <USBD_LL_Init+0xb8>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a29      	ldr	r2, [pc, #164]	; (800804c <USBD_LL_Init+0xb8>)
 8007fa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007fac:	4b27      	ldr	r3, [pc, #156]	; (800804c <USBD_LL_Init+0xb8>)
 8007fae:	4a28      	ldr	r2, [pc, #160]	; (8008050 <USBD_LL_Init+0xbc>)
 8007fb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <USBD_LL_Init+0xb8>)
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fb8:	4b24      	ldr	r3, [pc, #144]	; (800804c <USBD_LL_Init+0xb8>)
 8007fba:	2202      	movs	r2, #2
 8007fbc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fbe:	4b23      	ldr	r3, [pc, #140]	; (800804c <USBD_LL_Init+0xb8>)
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007fc4:	4b21      	ldr	r3, [pc, #132]	; (800804c <USBD_LL_Init+0xb8>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <USBD_LL_Init+0xb8>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fd0:	4b1e      	ldr	r3, [pc, #120]	; (800804c <USBD_LL_Init+0xb8>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <USBD_LL_Init+0xb8>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007fdc:	481b      	ldr	r0, [pc, #108]	; (800804c <USBD_LL_Init+0xb8>)
 8007fde:	f7f8 ffc5 	bl	8000f6c <HAL_PCD_Init>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007fe8:	f7f8 fa12 	bl	8000410 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ff2:	2318      	movs	r3, #24
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	f7fa fac0 	bl	800257c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008002:	2358      	movs	r3, #88	; 0x58
 8008004:	2200      	movs	r2, #0
 8008006:	2180      	movs	r1, #128	; 0x80
 8008008:	f7fa fab8 	bl	800257c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008012:	23c0      	movs	r3, #192	; 0xc0
 8008014:	2200      	movs	r2, #0
 8008016:	2181      	movs	r1, #129	; 0x81
 8008018:	f7fa fab0 	bl	800257c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008022:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008026:	2200      	movs	r2, #0
 8008028:	2101      	movs	r1, #1
 800802a:	f7fa faa7 	bl	800257c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008038:	2200      	movs	r2, #0
 800803a:	2182      	movs	r1, #130	; 0x82
 800803c:	f7fa fa9e 	bl	800257c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20001a14 	.word	0x20001a14
 8008050:	40005c00 	.word	0x40005c00

08008054 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800806a:	4618      	mov	r0, r3
 800806c:	f7f9 f870 	bl	8001150 <HAL_PCD_Start>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 f980 	bl	800837c <USBD_Get_USB_Status>
 800807c:	4603      	mov	r3, r0
 800807e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008080:	7bbb      	ldrb	r3, [r7, #14]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	4608      	mov	r0, r1
 8008094:	4611      	mov	r1, r2
 8008096:	461a      	mov	r2, r3
 8008098:	4603      	mov	r3, r0
 800809a:	70fb      	strb	r3, [r7, #3]
 800809c:	460b      	mov	r3, r1
 800809e:	70bb      	strb	r3, [r7, #2]
 80080a0:	4613      	mov	r3, r2
 80080a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080b2:	78bb      	ldrb	r3, [r7, #2]
 80080b4:	883a      	ldrh	r2, [r7, #0]
 80080b6:	78f9      	ldrb	r1, [r7, #3]
 80080b8:	f7f9 f9df 	bl	800147a <HAL_PCD_EP_Open>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f95a 	bl	800837c <USBD_Get_USB_Status>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7f9 fa26 	bl	8001546 <HAL_PCD_EP_Close>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f93b 	bl	800837c <USBD_Get_USB_Status>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810a:	7bbb      	ldrb	r3, [r7, #14]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7f9 fae7 	bl	8001706 <HAL_PCD_EP_SetStall>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f91c 	bl	800837c <USBD_Get_USB_Status>
 8008144:	4603      	mov	r3, r0
 8008146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008148:	7bbb      	ldrb	r3, [r7, #14]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	4611      	mov	r1, r2
 8008170:	4618      	mov	r0, r3
 8008172:	f7f9 fb28 	bl	80017c6 <HAL_PCD_EP_ClrStall>
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 f8fd 	bl	800837c <USBD_Get_USB_Status>
 8008182:	4603      	mov	r3, r0
 8008184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008186:	7bbb      	ldrb	r3, [r7, #14]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	da0c      	bge.n	80081c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	440b      	add	r3, r1
 80081c0:	3302      	adds	r3, #2
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	e00b      	b.n	80081de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	440b      	add	r3, r1
 80081d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80081dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008204:	78fa      	ldrb	r2, [r7, #3]
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f7f9 f911 	bl	8001430 <HAL_PCD_SetAddress>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f8b1 	bl	800837c <USBD_Get_USB_Status>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800821e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	460b      	mov	r3, r1
 8008236:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008246:	7af9      	ldrb	r1, [r7, #11]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	f7f9 fa18 	bl	8001680 <HAL_PCD_EP_Transmit>
 8008250:	4603      	mov	r3, r0
 8008252:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f890 	bl	800837c <USBD_Get_USB_Status>
 800825c:	4603      	mov	r3, r0
 800825e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008260:	7dbb      	ldrb	r3, [r7, #22]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	460b      	mov	r3, r1
 8008278:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008288:	7af9      	ldrb	r1, [r7, #11]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	f7f9 f9a2 	bl	80015d6 <HAL_PCD_EP_Receive>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f86f 	bl	800837c <USBD_Get_USB_Status>
 800829e:	4603      	mov	r3, r0
 80082a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f9 f9c4 	bl	8001650 <HAL_PCD_EP_GetRxCount>
 80082c8:	4603      	mov	r3, r0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_PCDEx_LPM_Callback+0x18>
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d013      	beq.n	8008312 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80082ea:	e023      	b.n	8008334 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80082f4:	f000 f83c 	bl	8008370 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082f8:	4b10      	ldr	r3, [pc, #64]	; (800833c <HAL_PCDEx_LPM_Callback+0x68>)
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	4a0f      	ldr	r2, [pc, #60]	; (800833c <HAL_PCDEx_LPM_Callback+0x68>)
 80082fe:	f023 0306 	bic.w	r3, r3, #6
 8008302:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fb96 	bl	8006a3c <USBD_LL_Resume>
    break;
 8008310:	e010      	b.n	8008334 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fb7a 	bl	8006a12 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <HAL_PCDEx_LPM_Callback+0x68>)
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	4a04      	ldr	r2, [pc, #16]	; (800833c <HAL_PCDEx_LPM_Callback+0x68>)
 800832c:	f043 0306 	orr.w	r3, r3, #6
 8008330:	6113      	str	r3, [r2, #16]
    break;
 8008332:	bf00      	nop
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	e000ed00 	.word	0xe000ed00

08008340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008348:	4b03      	ldr	r3, [pc, #12]	; (8008358 <USBD_static_malloc+0x18>)
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000210 	.word	0x20000210

0800835c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]

}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008374:	f7f7 ffb1 	bl	80002da <SystemClock_Config>
}
 8008378:	bf00      	nop
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	2b03      	cmp	r3, #3
 800838e:	d817      	bhi.n	80083c0 <USBD_Get_USB_Status+0x44>
 8008390:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <USBD_Get_USB_Status+0x1c>)
 8008392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008396:	bf00      	nop
 8008398:	080083a9 	.word	0x080083a9
 800839c:	080083af 	.word	0x080083af
 80083a0:	080083b5 	.word	0x080083b5
 80083a4:	080083bb 	.word	0x080083bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]
    break;
 80083ac:	e00b      	b.n	80083c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083ae:	2303      	movs	r3, #3
 80083b0:	73fb      	strb	r3, [r7, #15]
    break;
 80083b2:	e008      	b.n	80083c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
    break;
 80083b8:	e005      	b.n	80083c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ba:	2303      	movs	r3, #3
 80083bc:	73fb      	strb	r3, [r7, #15]
    break;
 80083be:	e002      	b.n	80083c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	73fb      	strb	r3, [r7, #15]
    break;
 80083c4:	bf00      	nop
  }
  return usb_status;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <__errno>:
 80083d4:	4b01      	ldr	r3, [pc, #4]	; (80083dc <__errno+0x8>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20000184 	.word	0x20000184

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	4e0d      	ldr	r6, [pc, #52]	; (8008418 <__libc_init_array+0x38>)
 80083e4:	4c0d      	ldr	r4, [pc, #52]	; (800841c <__libc_init_array+0x3c>)
 80083e6:	1ba4      	subs	r4, r4, r6
 80083e8:	10a4      	asrs	r4, r4, #2
 80083ea:	2500      	movs	r5, #0
 80083ec:	42a5      	cmp	r5, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	4e0b      	ldr	r6, [pc, #44]	; (8008420 <__libc_init_array+0x40>)
 80083f2:	4c0c      	ldr	r4, [pc, #48]	; (8008424 <__libc_init_array+0x44>)
 80083f4:	f000 ff68 	bl	80092c8 <_init>
 80083f8:	1ba4      	subs	r4, r4, r6
 80083fa:	10a4      	asrs	r4, r4, #2
 80083fc:	2500      	movs	r5, #0
 80083fe:	42a5      	cmp	r5, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008408:	4798      	blx	r3
 800840a:	3501      	adds	r5, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008412:	4798      	blx	r3
 8008414:	3501      	adds	r5, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	080095f4 	.word	0x080095f4
 800841c:	080095f4 	.word	0x080095f4
 8008420:	080095f4 	.word	0x080095f4
 8008424:	080095f8 	.word	0x080095f8

08008428 <memset>:
 8008428:	4402      	add	r2, r0
 800842a:	4603      	mov	r3, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <iprintf>:
 8008438:	b40f      	push	{r0, r1, r2, r3}
 800843a:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <iprintf+0x2c>)
 800843c:	b513      	push	{r0, r1, r4, lr}
 800843e:	681c      	ldr	r4, [r3, #0]
 8008440:	b124      	cbz	r4, 800844c <iprintf+0x14>
 8008442:	69a3      	ldr	r3, [r4, #24]
 8008444:	b913      	cbnz	r3, 800844c <iprintf+0x14>
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fa22 	bl	8008890 <__sinit>
 800844c:	ab05      	add	r3, sp, #20
 800844e:	9a04      	ldr	r2, [sp, #16]
 8008450:	68a1      	ldr	r1, [r4, #8]
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	4620      	mov	r0, r4
 8008456:	f000 fbdb 	bl	8008c10 <_vfiprintf_r>
 800845a:	b002      	add	sp, #8
 800845c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008460:	b004      	add	sp, #16
 8008462:	4770      	bx	lr
 8008464:	20000184 	.word	0x20000184

08008468 <_puts_r>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	460e      	mov	r6, r1
 800846c:	4605      	mov	r5, r0
 800846e:	b118      	cbz	r0, 8008478 <_puts_r+0x10>
 8008470:	6983      	ldr	r3, [r0, #24]
 8008472:	b90b      	cbnz	r3, 8008478 <_puts_r+0x10>
 8008474:	f000 fa0c 	bl	8008890 <__sinit>
 8008478:	69ab      	ldr	r3, [r5, #24]
 800847a:	68ac      	ldr	r4, [r5, #8]
 800847c:	b913      	cbnz	r3, 8008484 <_puts_r+0x1c>
 800847e:	4628      	mov	r0, r5
 8008480:	f000 fa06 	bl	8008890 <__sinit>
 8008484:	4b23      	ldr	r3, [pc, #140]	; (8008514 <_puts_r+0xac>)
 8008486:	429c      	cmp	r4, r3
 8008488:	d117      	bne.n	80084ba <_puts_r+0x52>
 800848a:	686c      	ldr	r4, [r5, #4]
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	071b      	lsls	r3, r3, #28
 8008490:	d51d      	bpl.n	80084ce <_puts_r+0x66>
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	b1db      	cbz	r3, 80084ce <_puts_r+0x66>
 8008496:	3e01      	subs	r6, #1
 8008498:	68a3      	ldr	r3, [r4, #8]
 800849a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800849e:	3b01      	subs	r3, #1
 80084a0:	60a3      	str	r3, [r4, #8]
 80084a2:	b9e9      	cbnz	r1, 80084e0 <_puts_r+0x78>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	da2e      	bge.n	8008506 <_puts_r+0x9e>
 80084a8:	4622      	mov	r2, r4
 80084aa:	210a      	movs	r1, #10
 80084ac:	4628      	mov	r0, r5
 80084ae:	f000 f83f 	bl	8008530 <__swbuf_r>
 80084b2:	3001      	adds	r0, #1
 80084b4:	d011      	beq.n	80084da <_puts_r+0x72>
 80084b6:	200a      	movs	r0, #10
 80084b8:	e011      	b.n	80084de <_puts_r+0x76>
 80084ba:	4b17      	ldr	r3, [pc, #92]	; (8008518 <_puts_r+0xb0>)
 80084bc:	429c      	cmp	r4, r3
 80084be:	d101      	bne.n	80084c4 <_puts_r+0x5c>
 80084c0:	68ac      	ldr	r4, [r5, #8]
 80084c2:	e7e3      	b.n	800848c <_puts_r+0x24>
 80084c4:	4b15      	ldr	r3, [pc, #84]	; (800851c <_puts_r+0xb4>)
 80084c6:	429c      	cmp	r4, r3
 80084c8:	bf08      	it	eq
 80084ca:	68ec      	ldreq	r4, [r5, #12]
 80084cc:	e7de      	b.n	800848c <_puts_r+0x24>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 f87f 	bl	80085d4 <__swsetup_r>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0dd      	beq.n	8008496 <_puts_r+0x2e>
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	da04      	bge.n	80084ee <_puts_r+0x86>
 80084e4:	69a2      	ldr	r2, [r4, #24]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	dc06      	bgt.n	80084f8 <_puts_r+0x90>
 80084ea:	290a      	cmp	r1, #10
 80084ec:	d004      	beq.n	80084f8 <_puts_r+0x90>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	7019      	strb	r1, [r3, #0]
 80084f6:	e7cf      	b.n	8008498 <_puts_r+0x30>
 80084f8:	4622      	mov	r2, r4
 80084fa:	4628      	mov	r0, r5
 80084fc:	f000 f818 	bl	8008530 <__swbuf_r>
 8008500:	3001      	adds	r0, #1
 8008502:	d1c9      	bne.n	8008498 <_puts_r+0x30>
 8008504:	e7e9      	b.n	80084da <_puts_r+0x72>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	200a      	movs	r0, #10
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	6022      	str	r2, [r4, #0]
 800850e:	7018      	strb	r0, [r3, #0]
 8008510:	e7e5      	b.n	80084de <_puts_r+0x76>
 8008512:	bf00      	nop
 8008514:	08009580 	.word	0x08009580
 8008518:	080095a0 	.word	0x080095a0
 800851c:	08009560 	.word	0x08009560

08008520 <puts>:
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <puts+0xc>)
 8008522:	4601      	mov	r1, r0
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f7ff bf9f 	b.w	8008468 <_puts_r>
 800852a:	bf00      	nop
 800852c:	20000184 	.word	0x20000184

08008530 <__swbuf_r>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	460e      	mov	r6, r1
 8008534:	4614      	mov	r4, r2
 8008536:	4605      	mov	r5, r0
 8008538:	b118      	cbz	r0, 8008542 <__swbuf_r+0x12>
 800853a:	6983      	ldr	r3, [r0, #24]
 800853c:	b90b      	cbnz	r3, 8008542 <__swbuf_r+0x12>
 800853e:	f000 f9a7 	bl	8008890 <__sinit>
 8008542:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <__swbuf_r+0x98>)
 8008544:	429c      	cmp	r4, r3
 8008546:	d12a      	bne.n	800859e <__swbuf_r+0x6e>
 8008548:	686c      	ldr	r4, [r5, #4]
 800854a:	69a3      	ldr	r3, [r4, #24]
 800854c:	60a3      	str	r3, [r4, #8]
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	071a      	lsls	r2, r3, #28
 8008552:	d52e      	bpl.n	80085b2 <__swbuf_r+0x82>
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	b363      	cbz	r3, 80085b2 <__swbuf_r+0x82>
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	6820      	ldr	r0, [r4, #0]
 800855c:	1ac0      	subs	r0, r0, r3
 800855e:	6963      	ldr	r3, [r4, #20]
 8008560:	b2f6      	uxtb	r6, r6
 8008562:	4283      	cmp	r3, r0
 8008564:	4637      	mov	r7, r6
 8008566:	dc04      	bgt.n	8008572 <__swbuf_r+0x42>
 8008568:	4621      	mov	r1, r4
 800856a:	4628      	mov	r0, r5
 800856c:	f000 f926 	bl	80087bc <_fflush_r>
 8008570:	bb28      	cbnz	r0, 80085be <__swbuf_r+0x8e>
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	3b01      	subs	r3, #1
 8008576:	60a3      	str	r3, [r4, #8]
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	6022      	str	r2, [r4, #0]
 800857e:	701e      	strb	r6, [r3, #0]
 8008580:	6963      	ldr	r3, [r4, #20]
 8008582:	3001      	adds	r0, #1
 8008584:	4283      	cmp	r3, r0
 8008586:	d004      	beq.n	8008592 <__swbuf_r+0x62>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	07db      	lsls	r3, r3, #31
 800858c:	d519      	bpl.n	80085c2 <__swbuf_r+0x92>
 800858e:	2e0a      	cmp	r6, #10
 8008590:	d117      	bne.n	80085c2 <__swbuf_r+0x92>
 8008592:	4621      	mov	r1, r4
 8008594:	4628      	mov	r0, r5
 8008596:	f000 f911 	bl	80087bc <_fflush_r>
 800859a:	b190      	cbz	r0, 80085c2 <__swbuf_r+0x92>
 800859c:	e00f      	b.n	80085be <__swbuf_r+0x8e>
 800859e:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <__swbuf_r+0x9c>)
 80085a0:	429c      	cmp	r4, r3
 80085a2:	d101      	bne.n	80085a8 <__swbuf_r+0x78>
 80085a4:	68ac      	ldr	r4, [r5, #8]
 80085a6:	e7d0      	b.n	800854a <__swbuf_r+0x1a>
 80085a8:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <__swbuf_r+0xa0>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	bf08      	it	eq
 80085ae:	68ec      	ldreq	r4, [r5, #12]
 80085b0:	e7cb      	b.n	800854a <__swbuf_r+0x1a>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 f80d 	bl	80085d4 <__swsetup_r>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0cc      	beq.n	8008558 <__swbuf_r+0x28>
 80085be:	f04f 37ff 	mov.w	r7, #4294967295
 80085c2:	4638      	mov	r0, r7
 80085c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c6:	bf00      	nop
 80085c8:	08009580 	.word	0x08009580
 80085cc:	080095a0 	.word	0x080095a0
 80085d0:	08009560 	.word	0x08009560

080085d4 <__swsetup_r>:
 80085d4:	4b32      	ldr	r3, [pc, #200]	; (80086a0 <__swsetup_r+0xcc>)
 80085d6:	b570      	push	{r4, r5, r6, lr}
 80085d8:	681d      	ldr	r5, [r3, #0]
 80085da:	4606      	mov	r6, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	b125      	cbz	r5, 80085ea <__swsetup_r+0x16>
 80085e0:	69ab      	ldr	r3, [r5, #24]
 80085e2:	b913      	cbnz	r3, 80085ea <__swsetup_r+0x16>
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 f953 	bl	8008890 <__sinit>
 80085ea:	4b2e      	ldr	r3, [pc, #184]	; (80086a4 <__swsetup_r+0xd0>)
 80085ec:	429c      	cmp	r4, r3
 80085ee:	d10f      	bne.n	8008610 <__swsetup_r+0x3c>
 80085f0:	686c      	ldr	r4, [r5, #4]
 80085f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	0715      	lsls	r5, r2, #28
 80085fa:	d42c      	bmi.n	8008656 <__swsetup_r+0x82>
 80085fc:	06d0      	lsls	r0, r2, #27
 80085fe:	d411      	bmi.n	8008624 <__swsetup_r+0x50>
 8008600:	2209      	movs	r2, #9
 8008602:	6032      	str	r2, [r6, #0]
 8008604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	f04f 30ff 	mov.w	r0, #4294967295
 800860e:	e03e      	b.n	800868e <__swsetup_r+0xba>
 8008610:	4b25      	ldr	r3, [pc, #148]	; (80086a8 <__swsetup_r+0xd4>)
 8008612:	429c      	cmp	r4, r3
 8008614:	d101      	bne.n	800861a <__swsetup_r+0x46>
 8008616:	68ac      	ldr	r4, [r5, #8]
 8008618:	e7eb      	b.n	80085f2 <__swsetup_r+0x1e>
 800861a:	4b24      	ldr	r3, [pc, #144]	; (80086ac <__swsetup_r+0xd8>)
 800861c:	429c      	cmp	r4, r3
 800861e:	bf08      	it	eq
 8008620:	68ec      	ldreq	r4, [r5, #12]
 8008622:	e7e6      	b.n	80085f2 <__swsetup_r+0x1e>
 8008624:	0751      	lsls	r1, r2, #29
 8008626:	d512      	bpl.n	800864e <__swsetup_r+0x7a>
 8008628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800862a:	b141      	cbz	r1, 800863e <__swsetup_r+0x6a>
 800862c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008630:	4299      	cmp	r1, r3
 8008632:	d002      	beq.n	800863a <__swsetup_r+0x66>
 8008634:	4630      	mov	r0, r6
 8008636:	f000 fa19 	bl	8008a6c <_free_r>
 800863a:	2300      	movs	r3, #0
 800863c:	6363      	str	r3, [r4, #52]	; 0x34
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	2300      	movs	r3, #0
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f043 0308 	orr.w	r3, r3, #8
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	b94b      	cbnz	r3, 800866e <__swsetup_r+0x9a>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008664:	d003      	beq.n	800866e <__swsetup_r+0x9a>
 8008666:	4621      	mov	r1, r4
 8008668:	4630      	mov	r0, r6
 800866a:	f000 f9bf 	bl	80089ec <__smakebuf_r>
 800866e:	89a2      	ldrh	r2, [r4, #12]
 8008670:	f012 0301 	ands.w	r3, r2, #1
 8008674:	d00c      	beq.n	8008690 <__swsetup_r+0xbc>
 8008676:	2300      	movs	r3, #0
 8008678:	60a3      	str	r3, [r4, #8]
 800867a:	6963      	ldr	r3, [r4, #20]
 800867c:	425b      	negs	r3, r3
 800867e:	61a3      	str	r3, [r4, #24]
 8008680:	6923      	ldr	r3, [r4, #16]
 8008682:	b953      	cbnz	r3, 800869a <__swsetup_r+0xc6>
 8008684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008688:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800868c:	d1ba      	bne.n	8008604 <__swsetup_r+0x30>
 800868e:	bd70      	pop	{r4, r5, r6, pc}
 8008690:	0792      	lsls	r2, r2, #30
 8008692:	bf58      	it	pl
 8008694:	6963      	ldrpl	r3, [r4, #20]
 8008696:	60a3      	str	r3, [r4, #8]
 8008698:	e7f2      	b.n	8008680 <__swsetup_r+0xac>
 800869a:	2000      	movs	r0, #0
 800869c:	e7f7      	b.n	800868e <__swsetup_r+0xba>
 800869e:	bf00      	nop
 80086a0:	20000184 	.word	0x20000184
 80086a4:	08009580 	.word	0x08009580
 80086a8:	080095a0 	.word	0x080095a0
 80086ac:	08009560 	.word	0x08009560

080086b0 <__sflush_r>:
 80086b0:	898a      	ldrh	r2, [r1, #12]
 80086b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b6:	4605      	mov	r5, r0
 80086b8:	0710      	lsls	r0, r2, #28
 80086ba:	460c      	mov	r4, r1
 80086bc:	d458      	bmi.n	8008770 <__sflush_r+0xc0>
 80086be:	684b      	ldr	r3, [r1, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dc05      	bgt.n	80086d0 <__sflush_r+0x20>
 80086c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	dc02      	bgt.n	80086d0 <__sflush_r+0x20>
 80086ca:	2000      	movs	r0, #0
 80086cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	d0f9      	beq.n	80086ca <__sflush_r+0x1a>
 80086d6:	2300      	movs	r3, #0
 80086d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086dc:	682f      	ldr	r7, [r5, #0]
 80086de:	6a21      	ldr	r1, [r4, #32]
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	d032      	beq.n	800874a <__sflush_r+0x9a>
 80086e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	075a      	lsls	r2, r3, #29
 80086ea:	d505      	bpl.n	80086f8 <__sflush_r+0x48>
 80086ec:	6863      	ldr	r3, [r4, #4]
 80086ee:	1ac0      	subs	r0, r0, r3
 80086f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086f2:	b10b      	cbz	r3, 80086f8 <__sflush_r+0x48>
 80086f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086f6:	1ac0      	subs	r0, r0, r3
 80086f8:	2300      	movs	r3, #0
 80086fa:	4602      	mov	r2, r0
 80086fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086fe:	6a21      	ldr	r1, [r4, #32]
 8008700:	4628      	mov	r0, r5
 8008702:	47b0      	blx	r6
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	d106      	bne.n	8008718 <__sflush_r+0x68>
 800870a:	6829      	ldr	r1, [r5, #0]
 800870c:	291d      	cmp	r1, #29
 800870e:	d848      	bhi.n	80087a2 <__sflush_r+0xf2>
 8008710:	4a29      	ldr	r2, [pc, #164]	; (80087b8 <__sflush_r+0x108>)
 8008712:	40ca      	lsrs	r2, r1
 8008714:	07d6      	lsls	r6, r2, #31
 8008716:	d544      	bpl.n	80087a2 <__sflush_r+0xf2>
 8008718:	2200      	movs	r2, #0
 800871a:	6062      	str	r2, [r4, #4]
 800871c:	04d9      	lsls	r1, r3, #19
 800871e:	6922      	ldr	r2, [r4, #16]
 8008720:	6022      	str	r2, [r4, #0]
 8008722:	d504      	bpl.n	800872e <__sflush_r+0x7e>
 8008724:	1c42      	adds	r2, r0, #1
 8008726:	d101      	bne.n	800872c <__sflush_r+0x7c>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b903      	cbnz	r3, 800872e <__sflush_r+0x7e>
 800872c:	6560      	str	r0, [r4, #84]	; 0x54
 800872e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008730:	602f      	str	r7, [r5, #0]
 8008732:	2900      	cmp	r1, #0
 8008734:	d0c9      	beq.n	80086ca <__sflush_r+0x1a>
 8008736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800873a:	4299      	cmp	r1, r3
 800873c:	d002      	beq.n	8008744 <__sflush_r+0x94>
 800873e:	4628      	mov	r0, r5
 8008740:	f000 f994 	bl	8008a6c <_free_r>
 8008744:	2000      	movs	r0, #0
 8008746:	6360      	str	r0, [r4, #52]	; 0x34
 8008748:	e7c0      	b.n	80086cc <__sflush_r+0x1c>
 800874a:	2301      	movs	r3, #1
 800874c:	4628      	mov	r0, r5
 800874e:	47b0      	blx	r6
 8008750:	1c41      	adds	r1, r0, #1
 8008752:	d1c8      	bne.n	80086e6 <__sflush_r+0x36>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0c5      	beq.n	80086e6 <__sflush_r+0x36>
 800875a:	2b1d      	cmp	r3, #29
 800875c:	d001      	beq.n	8008762 <__sflush_r+0xb2>
 800875e:	2b16      	cmp	r3, #22
 8008760:	d101      	bne.n	8008766 <__sflush_r+0xb6>
 8008762:	602f      	str	r7, [r5, #0]
 8008764:	e7b1      	b.n	80086ca <__sflush_r+0x1a>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	e7ad      	b.n	80086cc <__sflush_r+0x1c>
 8008770:	690f      	ldr	r7, [r1, #16]
 8008772:	2f00      	cmp	r7, #0
 8008774:	d0a9      	beq.n	80086ca <__sflush_r+0x1a>
 8008776:	0793      	lsls	r3, r2, #30
 8008778:	680e      	ldr	r6, [r1, #0]
 800877a:	bf08      	it	eq
 800877c:	694b      	ldreq	r3, [r1, #20]
 800877e:	600f      	str	r7, [r1, #0]
 8008780:	bf18      	it	ne
 8008782:	2300      	movne	r3, #0
 8008784:	eba6 0807 	sub.w	r8, r6, r7
 8008788:	608b      	str	r3, [r1, #8]
 800878a:	f1b8 0f00 	cmp.w	r8, #0
 800878e:	dd9c      	ble.n	80086ca <__sflush_r+0x1a>
 8008790:	4643      	mov	r3, r8
 8008792:	463a      	mov	r2, r7
 8008794:	6a21      	ldr	r1, [r4, #32]
 8008796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008798:	4628      	mov	r0, r5
 800879a:	47b0      	blx	r6
 800879c:	2800      	cmp	r0, #0
 800879e:	dc06      	bgt.n	80087ae <__sflush_r+0xfe>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	e78e      	b.n	80086cc <__sflush_r+0x1c>
 80087ae:	4407      	add	r7, r0
 80087b0:	eba8 0800 	sub.w	r8, r8, r0
 80087b4:	e7e9      	b.n	800878a <__sflush_r+0xda>
 80087b6:	bf00      	nop
 80087b8:	20400001 	.word	0x20400001

080087bc <_fflush_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	690b      	ldr	r3, [r1, #16]
 80087c0:	4605      	mov	r5, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	b1db      	cbz	r3, 80087fe <_fflush_r+0x42>
 80087c6:	b118      	cbz	r0, 80087d0 <_fflush_r+0x14>
 80087c8:	6983      	ldr	r3, [r0, #24]
 80087ca:	b90b      	cbnz	r3, 80087d0 <_fflush_r+0x14>
 80087cc:	f000 f860 	bl	8008890 <__sinit>
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <_fflush_r+0x48>)
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d109      	bne.n	80087ea <_fflush_r+0x2e>
 80087d6:	686c      	ldr	r4, [r5, #4]
 80087d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087dc:	b17b      	cbz	r3, 80087fe <_fflush_r+0x42>
 80087de:	4621      	mov	r1, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e6:	f7ff bf63 	b.w	80086b0 <__sflush_r>
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <_fflush_r+0x4c>)
 80087ec:	429c      	cmp	r4, r3
 80087ee:	d101      	bne.n	80087f4 <_fflush_r+0x38>
 80087f0:	68ac      	ldr	r4, [r5, #8]
 80087f2:	e7f1      	b.n	80087d8 <_fflush_r+0x1c>
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <_fflush_r+0x50>)
 80087f6:	429c      	cmp	r4, r3
 80087f8:	bf08      	it	eq
 80087fa:	68ec      	ldreq	r4, [r5, #12]
 80087fc:	e7ec      	b.n	80087d8 <_fflush_r+0x1c>
 80087fe:	2000      	movs	r0, #0
 8008800:	bd38      	pop	{r3, r4, r5, pc}
 8008802:	bf00      	nop
 8008804:	08009580 	.word	0x08009580
 8008808:	080095a0 	.word	0x080095a0
 800880c:	08009560 	.word	0x08009560

08008810 <std>:
 8008810:	2300      	movs	r3, #0
 8008812:	b510      	push	{r4, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	e9c0 3300 	strd	r3, r3, [r0]
 800881a:	6083      	str	r3, [r0, #8]
 800881c:	8181      	strh	r1, [r0, #12]
 800881e:	6643      	str	r3, [r0, #100]	; 0x64
 8008820:	81c2      	strh	r2, [r0, #14]
 8008822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008826:	6183      	str	r3, [r0, #24]
 8008828:	4619      	mov	r1, r3
 800882a:	2208      	movs	r2, #8
 800882c:	305c      	adds	r0, #92	; 0x5c
 800882e:	f7ff fdfb 	bl	8008428 <memset>
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <std+0x38>)
 8008834:	6263      	str	r3, [r4, #36]	; 0x24
 8008836:	4b05      	ldr	r3, [pc, #20]	; (800884c <std+0x3c>)
 8008838:	62a3      	str	r3, [r4, #40]	; 0x28
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <std+0x40>)
 800883c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <std+0x44>)
 8008840:	6224      	str	r4, [r4, #32]
 8008842:	6323      	str	r3, [r4, #48]	; 0x30
 8008844:	bd10      	pop	{r4, pc}
 8008846:	bf00      	nop
 8008848:	0800916d 	.word	0x0800916d
 800884c:	0800918f 	.word	0x0800918f
 8008850:	080091c7 	.word	0x080091c7
 8008854:	080091eb 	.word	0x080091eb

08008858 <_cleanup_r>:
 8008858:	4901      	ldr	r1, [pc, #4]	; (8008860 <_cleanup_r+0x8>)
 800885a:	f000 b885 	b.w	8008968 <_fwalk_reent>
 800885e:	bf00      	nop
 8008860:	080087bd 	.word	0x080087bd

08008864 <__sfmoreglue>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	1e4a      	subs	r2, r1, #1
 8008868:	2568      	movs	r5, #104	; 0x68
 800886a:	4355      	muls	r5, r2
 800886c:	460e      	mov	r6, r1
 800886e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008872:	f000 f949 	bl	8008b08 <_malloc_r>
 8008876:	4604      	mov	r4, r0
 8008878:	b140      	cbz	r0, 800888c <__sfmoreglue+0x28>
 800887a:	2100      	movs	r1, #0
 800887c:	e9c0 1600 	strd	r1, r6, [r0]
 8008880:	300c      	adds	r0, #12
 8008882:	60a0      	str	r0, [r4, #8]
 8008884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008888:	f7ff fdce 	bl	8008428 <memset>
 800888c:	4620      	mov	r0, r4
 800888e:	bd70      	pop	{r4, r5, r6, pc}

08008890 <__sinit>:
 8008890:	6983      	ldr	r3, [r0, #24]
 8008892:	b510      	push	{r4, lr}
 8008894:	4604      	mov	r4, r0
 8008896:	bb33      	cbnz	r3, 80088e6 <__sinit+0x56>
 8008898:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800889c:	6503      	str	r3, [r0, #80]	; 0x50
 800889e:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <__sinit+0x58>)
 80088a0:	4a12      	ldr	r2, [pc, #72]	; (80088ec <__sinit+0x5c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6282      	str	r2, [r0, #40]	; 0x28
 80088a6:	4298      	cmp	r0, r3
 80088a8:	bf04      	itt	eq
 80088aa:	2301      	moveq	r3, #1
 80088ac:	6183      	streq	r3, [r0, #24]
 80088ae:	f000 f81f 	bl	80088f0 <__sfp>
 80088b2:	6060      	str	r0, [r4, #4]
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 f81b 	bl	80088f0 <__sfp>
 80088ba:	60a0      	str	r0, [r4, #8]
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 f817 	bl	80088f0 <__sfp>
 80088c2:	2200      	movs	r2, #0
 80088c4:	60e0      	str	r0, [r4, #12]
 80088c6:	2104      	movs	r1, #4
 80088c8:	6860      	ldr	r0, [r4, #4]
 80088ca:	f7ff ffa1 	bl	8008810 <std>
 80088ce:	2201      	movs	r2, #1
 80088d0:	2109      	movs	r1, #9
 80088d2:	68a0      	ldr	r0, [r4, #8]
 80088d4:	f7ff ff9c 	bl	8008810 <std>
 80088d8:	2202      	movs	r2, #2
 80088da:	2112      	movs	r1, #18
 80088dc:	68e0      	ldr	r0, [r4, #12]
 80088de:	f7ff ff97 	bl	8008810 <std>
 80088e2:	2301      	movs	r3, #1
 80088e4:	61a3      	str	r3, [r4, #24]
 80088e6:	bd10      	pop	{r4, pc}
 80088e8:	0800955c 	.word	0x0800955c
 80088ec:	08008859 	.word	0x08008859

080088f0 <__sfp>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <__sfp+0x70>)
 80088f4:	681e      	ldr	r6, [r3, #0]
 80088f6:	69b3      	ldr	r3, [r6, #24]
 80088f8:	4607      	mov	r7, r0
 80088fa:	b913      	cbnz	r3, 8008902 <__sfp+0x12>
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7ff ffc7 	bl	8008890 <__sinit>
 8008902:	3648      	adds	r6, #72	; 0x48
 8008904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008908:	3b01      	subs	r3, #1
 800890a:	d503      	bpl.n	8008914 <__sfp+0x24>
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	b133      	cbz	r3, 800891e <__sfp+0x2e>
 8008910:	6836      	ldr	r6, [r6, #0]
 8008912:	e7f7      	b.n	8008904 <__sfp+0x14>
 8008914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008918:	b16d      	cbz	r5, 8008936 <__sfp+0x46>
 800891a:	3468      	adds	r4, #104	; 0x68
 800891c:	e7f4      	b.n	8008908 <__sfp+0x18>
 800891e:	2104      	movs	r1, #4
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ff9f 	bl	8008864 <__sfmoreglue>
 8008926:	6030      	str	r0, [r6, #0]
 8008928:	2800      	cmp	r0, #0
 800892a:	d1f1      	bne.n	8008910 <__sfp+0x20>
 800892c:	230c      	movs	r3, #12
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	4604      	mov	r4, r0
 8008932:	4620      	mov	r0, r4
 8008934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008936:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <__sfp+0x74>)
 8008938:	6665      	str	r5, [r4, #100]	; 0x64
 800893a:	e9c4 5500 	strd	r5, r5, [r4]
 800893e:	60a5      	str	r5, [r4, #8]
 8008940:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008944:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008948:	2208      	movs	r2, #8
 800894a:	4629      	mov	r1, r5
 800894c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008950:	f7ff fd6a 	bl	8008428 <memset>
 8008954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800895c:	e7e9      	b.n	8008932 <__sfp+0x42>
 800895e:	bf00      	nop
 8008960:	0800955c 	.word	0x0800955c
 8008964:	ffff0001 	.word	0xffff0001

08008968 <_fwalk_reent>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4680      	mov	r8, r0
 800896e:	4689      	mov	r9, r1
 8008970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008974:	2600      	movs	r6, #0
 8008976:	b914      	cbnz	r4, 800897e <_fwalk_reent+0x16>
 8008978:	4630      	mov	r0, r6
 800897a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800897e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008982:	3f01      	subs	r7, #1
 8008984:	d501      	bpl.n	800898a <_fwalk_reent+0x22>
 8008986:	6824      	ldr	r4, [r4, #0]
 8008988:	e7f5      	b.n	8008976 <_fwalk_reent+0xe>
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d907      	bls.n	80089a0 <_fwalk_reent+0x38>
 8008990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008994:	3301      	adds	r3, #1
 8008996:	d003      	beq.n	80089a0 <_fwalk_reent+0x38>
 8008998:	4629      	mov	r1, r5
 800899a:	4640      	mov	r0, r8
 800899c:	47c8      	blx	r9
 800899e:	4306      	orrs	r6, r0
 80089a0:	3568      	adds	r5, #104	; 0x68
 80089a2:	e7ee      	b.n	8008982 <_fwalk_reent+0x1a>

080089a4 <__swhatbuf_r>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	460e      	mov	r6, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	b096      	sub	sp, #88	; 0x58
 80089b0:	4614      	mov	r4, r2
 80089b2:	461d      	mov	r5, r3
 80089b4:	da07      	bge.n	80089c6 <__swhatbuf_r+0x22>
 80089b6:	2300      	movs	r3, #0
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	89b3      	ldrh	r3, [r6, #12]
 80089bc:	061a      	lsls	r2, r3, #24
 80089be:	d410      	bmi.n	80089e2 <__swhatbuf_r+0x3e>
 80089c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c4:	e00e      	b.n	80089e4 <__swhatbuf_r+0x40>
 80089c6:	466a      	mov	r2, sp
 80089c8:	f000 fc36 	bl	8009238 <_fstat_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	dbf2      	blt.n	80089b6 <__swhatbuf_r+0x12>
 80089d0:	9a01      	ldr	r2, [sp, #4]
 80089d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089da:	425a      	negs	r2, r3
 80089dc:	415a      	adcs	r2, r3
 80089de:	602a      	str	r2, [r5, #0]
 80089e0:	e7ee      	b.n	80089c0 <__swhatbuf_r+0x1c>
 80089e2:	2340      	movs	r3, #64	; 0x40
 80089e4:	2000      	movs	r0, #0
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	b016      	add	sp, #88	; 0x58
 80089ea:	bd70      	pop	{r4, r5, r6, pc}

080089ec <__smakebuf_r>:
 80089ec:	898b      	ldrh	r3, [r1, #12]
 80089ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089f0:	079d      	lsls	r5, r3, #30
 80089f2:	4606      	mov	r6, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	d507      	bpl.n	8008a08 <__smakebuf_r+0x1c>
 80089f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	6123      	str	r3, [r4, #16]
 8008a00:	2301      	movs	r3, #1
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	b002      	add	sp, #8
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	ab01      	add	r3, sp, #4
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f7ff ffca 	bl	80089a4 <__swhatbuf_r>
 8008a10:	9900      	ldr	r1, [sp, #0]
 8008a12:	4605      	mov	r5, r0
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f877 	bl	8008b08 <_malloc_r>
 8008a1a:	b948      	cbnz	r0, 8008a30 <__smakebuf_r+0x44>
 8008a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a20:	059a      	lsls	r2, r3, #22
 8008a22:	d4ef      	bmi.n	8008a04 <__smakebuf_r+0x18>
 8008a24:	f023 0303 	bic.w	r3, r3, #3
 8008a28:	f043 0302 	orr.w	r3, r3, #2
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	e7e3      	b.n	80089f8 <__smakebuf_r+0xc>
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <__smakebuf_r+0x7c>)
 8008a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	6020      	str	r0, [r4, #0]
 8008a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	6163      	str	r3, [r4, #20]
 8008a42:	9b01      	ldr	r3, [sp, #4]
 8008a44:	6120      	str	r0, [r4, #16]
 8008a46:	b15b      	cbz	r3, 8008a60 <__smakebuf_r+0x74>
 8008a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 fc05 	bl	800925c <_isatty_r>
 8008a52:	b128      	cbz	r0, 8008a60 <__smakebuf_r+0x74>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	431d      	orrs	r5, r3
 8008a64:	81a5      	strh	r5, [r4, #12]
 8008a66:	e7cd      	b.n	8008a04 <__smakebuf_r+0x18>
 8008a68:	08008859 	.word	0x08008859

08008a6c <_free_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4605      	mov	r5, r0
 8008a70:	2900      	cmp	r1, #0
 8008a72:	d045      	beq.n	8008b00 <_free_r+0x94>
 8008a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a78:	1f0c      	subs	r4, r1, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	bfb8      	it	lt
 8008a7e:	18e4      	addlt	r4, r4, r3
 8008a80:	f000 fc0e 	bl	80092a0 <__malloc_lock>
 8008a84:	4a1f      	ldr	r2, [pc, #124]	; (8008b04 <_free_r+0x98>)
 8008a86:	6813      	ldr	r3, [r2, #0]
 8008a88:	4610      	mov	r0, r2
 8008a8a:	b933      	cbnz	r3, 8008a9a <_free_r+0x2e>
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	6014      	str	r4, [r2, #0]
 8008a90:	4628      	mov	r0, r5
 8008a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a96:	f000 bc04 	b.w	80092a2 <__malloc_unlock>
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	d90c      	bls.n	8008ab8 <_free_r+0x4c>
 8008a9e:	6821      	ldr	r1, [r4, #0]
 8008aa0:	1862      	adds	r2, r4, r1
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	bf04      	itt	eq
 8008aa6:	681a      	ldreq	r2, [r3, #0]
 8008aa8:	685b      	ldreq	r3, [r3, #4]
 8008aaa:	6063      	str	r3, [r4, #4]
 8008aac:	bf04      	itt	eq
 8008aae:	1852      	addeq	r2, r2, r1
 8008ab0:	6022      	streq	r2, [r4, #0]
 8008ab2:	6004      	str	r4, [r0, #0]
 8008ab4:	e7ec      	b.n	8008a90 <_free_r+0x24>
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	b10a      	cbz	r2, 8008ac0 <_free_r+0x54>
 8008abc:	42a2      	cmp	r2, r4
 8008abe:	d9fa      	bls.n	8008ab6 <_free_r+0x4a>
 8008ac0:	6819      	ldr	r1, [r3, #0]
 8008ac2:	1858      	adds	r0, r3, r1
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d10b      	bne.n	8008ae0 <_free_r+0x74>
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	4401      	add	r1, r0
 8008acc:	1858      	adds	r0, r3, r1
 8008ace:	4282      	cmp	r2, r0
 8008ad0:	6019      	str	r1, [r3, #0]
 8008ad2:	d1dd      	bne.n	8008a90 <_free_r+0x24>
 8008ad4:	6810      	ldr	r0, [r2, #0]
 8008ad6:	6852      	ldr	r2, [r2, #4]
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	4401      	add	r1, r0
 8008adc:	6019      	str	r1, [r3, #0]
 8008ade:	e7d7      	b.n	8008a90 <_free_r+0x24>
 8008ae0:	d902      	bls.n	8008ae8 <_free_r+0x7c>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	e7d3      	b.n	8008a90 <_free_r+0x24>
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	1821      	adds	r1, r4, r0
 8008aec:	428a      	cmp	r2, r1
 8008aee:	bf04      	itt	eq
 8008af0:	6811      	ldreq	r1, [r2, #0]
 8008af2:	6852      	ldreq	r2, [r2, #4]
 8008af4:	6062      	str	r2, [r4, #4]
 8008af6:	bf04      	itt	eq
 8008af8:	1809      	addeq	r1, r1, r0
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	605c      	str	r4, [r3, #4]
 8008afe:	e7c7      	b.n	8008a90 <_free_r+0x24>
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop
 8008b04:	20000430 	.word	0x20000430

08008b08 <_malloc_r>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	1ccd      	adds	r5, r1, #3
 8008b0c:	f025 0503 	bic.w	r5, r5, #3
 8008b10:	3508      	adds	r5, #8
 8008b12:	2d0c      	cmp	r5, #12
 8008b14:	bf38      	it	cc
 8008b16:	250c      	movcc	r5, #12
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	db01      	blt.n	8008b22 <_malloc_r+0x1a>
 8008b1e:	42a9      	cmp	r1, r5
 8008b20:	d903      	bls.n	8008b2a <_malloc_r+0x22>
 8008b22:	230c      	movs	r3, #12
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	2000      	movs	r0, #0
 8008b28:	bd70      	pop	{r4, r5, r6, pc}
 8008b2a:	f000 fbb9 	bl	80092a0 <__malloc_lock>
 8008b2e:	4a21      	ldr	r2, [pc, #132]	; (8008bb4 <_malloc_r+0xac>)
 8008b30:	6814      	ldr	r4, [r2, #0]
 8008b32:	4621      	mov	r1, r4
 8008b34:	b991      	cbnz	r1, 8008b5c <_malloc_r+0x54>
 8008b36:	4c20      	ldr	r4, [pc, #128]	; (8008bb8 <_malloc_r+0xb0>)
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	b91b      	cbnz	r3, 8008b44 <_malloc_r+0x3c>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f000 fb05 	bl	800914c <_sbrk_r>
 8008b42:	6020      	str	r0, [r4, #0]
 8008b44:	4629      	mov	r1, r5
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 fb00 	bl	800914c <_sbrk_r>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d124      	bne.n	8008b9a <_malloc_r+0x92>
 8008b50:	230c      	movs	r3, #12
 8008b52:	6033      	str	r3, [r6, #0]
 8008b54:	4630      	mov	r0, r6
 8008b56:	f000 fba4 	bl	80092a2 <__malloc_unlock>
 8008b5a:	e7e4      	b.n	8008b26 <_malloc_r+0x1e>
 8008b5c:	680b      	ldr	r3, [r1, #0]
 8008b5e:	1b5b      	subs	r3, r3, r5
 8008b60:	d418      	bmi.n	8008b94 <_malloc_r+0x8c>
 8008b62:	2b0b      	cmp	r3, #11
 8008b64:	d90f      	bls.n	8008b86 <_malloc_r+0x7e>
 8008b66:	600b      	str	r3, [r1, #0]
 8008b68:	50cd      	str	r5, [r1, r3]
 8008b6a:	18cc      	adds	r4, r1, r3
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f000 fb98 	bl	80092a2 <__malloc_unlock>
 8008b72:	f104 000b 	add.w	r0, r4, #11
 8008b76:	1d23      	adds	r3, r4, #4
 8008b78:	f020 0007 	bic.w	r0, r0, #7
 8008b7c:	1ac3      	subs	r3, r0, r3
 8008b7e:	d0d3      	beq.n	8008b28 <_malloc_r+0x20>
 8008b80:	425a      	negs	r2, r3
 8008b82:	50e2      	str	r2, [r4, r3]
 8008b84:	e7d0      	b.n	8008b28 <_malloc_r+0x20>
 8008b86:	428c      	cmp	r4, r1
 8008b88:	684b      	ldr	r3, [r1, #4]
 8008b8a:	bf16      	itet	ne
 8008b8c:	6063      	strne	r3, [r4, #4]
 8008b8e:	6013      	streq	r3, [r2, #0]
 8008b90:	460c      	movne	r4, r1
 8008b92:	e7eb      	b.n	8008b6c <_malloc_r+0x64>
 8008b94:	460c      	mov	r4, r1
 8008b96:	6849      	ldr	r1, [r1, #4]
 8008b98:	e7cc      	b.n	8008b34 <_malloc_r+0x2c>
 8008b9a:	1cc4      	adds	r4, r0, #3
 8008b9c:	f024 0403 	bic.w	r4, r4, #3
 8008ba0:	42a0      	cmp	r0, r4
 8008ba2:	d005      	beq.n	8008bb0 <_malloc_r+0xa8>
 8008ba4:	1a21      	subs	r1, r4, r0
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 fad0 	bl	800914c <_sbrk_r>
 8008bac:	3001      	adds	r0, #1
 8008bae:	d0cf      	beq.n	8008b50 <_malloc_r+0x48>
 8008bb0:	6025      	str	r5, [r4, #0]
 8008bb2:	e7db      	b.n	8008b6c <_malloc_r+0x64>
 8008bb4:	20000430 	.word	0x20000430
 8008bb8:	20000434 	.word	0x20000434

08008bbc <__sfputc_r>:
 8008bbc:	6893      	ldr	r3, [r2, #8]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	b410      	push	{r4}
 8008bc4:	6093      	str	r3, [r2, #8]
 8008bc6:	da08      	bge.n	8008bda <__sfputc_r+0x1e>
 8008bc8:	6994      	ldr	r4, [r2, #24]
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	db01      	blt.n	8008bd2 <__sfputc_r+0x16>
 8008bce:	290a      	cmp	r1, #10
 8008bd0:	d103      	bne.n	8008bda <__sfputc_r+0x1e>
 8008bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd6:	f7ff bcab 	b.w	8008530 <__swbuf_r>
 8008bda:	6813      	ldr	r3, [r2, #0]
 8008bdc:	1c58      	adds	r0, r3, #1
 8008bde:	6010      	str	r0, [r2, #0]
 8008be0:	7019      	strb	r1, [r3, #0]
 8008be2:	4608      	mov	r0, r1
 8008be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <__sfputs_r>:
 8008bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bec:	4606      	mov	r6, r0
 8008bee:	460f      	mov	r7, r1
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	18d5      	adds	r5, r2, r3
 8008bf4:	42ac      	cmp	r4, r5
 8008bf6:	d101      	bne.n	8008bfc <__sfputs_r+0x12>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e007      	b.n	8008c0c <__sfputs_r+0x22>
 8008bfc:	463a      	mov	r2, r7
 8008bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ffda 	bl	8008bbc <__sfputc_r>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d1f3      	bne.n	8008bf4 <__sfputs_r+0xa>
 8008c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c10 <_vfiprintf_r>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	460c      	mov	r4, r1
 8008c16:	b09d      	sub	sp, #116	; 0x74
 8008c18:	4617      	mov	r7, r2
 8008c1a:	461d      	mov	r5, r3
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	b118      	cbz	r0, 8008c28 <_vfiprintf_r+0x18>
 8008c20:	6983      	ldr	r3, [r0, #24]
 8008c22:	b90b      	cbnz	r3, 8008c28 <_vfiprintf_r+0x18>
 8008c24:	f7ff fe34 	bl	8008890 <__sinit>
 8008c28:	4b7c      	ldr	r3, [pc, #496]	; (8008e1c <_vfiprintf_r+0x20c>)
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	d158      	bne.n	8008ce0 <_vfiprintf_r+0xd0>
 8008c2e:	6874      	ldr	r4, [r6, #4]
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	0718      	lsls	r0, r3, #28
 8008c34:	d55e      	bpl.n	8008cf4 <_vfiprintf_r+0xe4>
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d05b      	beq.n	8008cf4 <_vfiprintf_r+0xe4>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c40:	2320      	movs	r3, #32
 8008c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c46:	2330      	movs	r3, #48	; 0x30
 8008c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c4c:	9503      	str	r5, [sp, #12]
 8008c4e:	f04f 0b01 	mov.w	fp, #1
 8008c52:	46b8      	mov	r8, r7
 8008c54:	4645      	mov	r5, r8
 8008c56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c5a:	b10b      	cbz	r3, 8008c60 <_vfiprintf_r+0x50>
 8008c5c:	2b25      	cmp	r3, #37	; 0x25
 8008c5e:	d154      	bne.n	8008d0a <_vfiprintf_r+0xfa>
 8008c60:	ebb8 0a07 	subs.w	sl, r8, r7
 8008c64:	d00b      	beq.n	8008c7e <_vfiprintf_r+0x6e>
 8008c66:	4653      	mov	r3, sl
 8008c68:	463a      	mov	r2, r7
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff ffbc 	bl	8008bea <__sfputs_r>
 8008c72:	3001      	adds	r0, #1
 8008c74:	f000 80c2 	beq.w	8008dfc <_vfiprintf_r+0x1ec>
 8008c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7a:	4453      	add	r3, sl
 8008c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7e:	f898 3000 	ldrb.w	r3, [r8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 80ba 	beq.w	8008dfc <_vfiprintf_r+0x1ec>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9c:	46a8      	mov	r8, r5
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008ca4:	485e      	ldr	r0, [pc, #376]	; (8008e20 <_vfiprintf_r+0x210>)
 8008ca6:	f7f7 fabb 	bl	8000220 <memchr>
 8008caa:	9b04      	ldr	r3, [sp, #16]
 8008cac:	bb78      	cbnz	r0, 8008d0e <_vfiprintf_r+0xfe>
 8008cae:	06d9      	lsls	r1, r3, #27
 8008cb0:	bf44      	itt	mi
 8008cb2:	2220      	movmi	r2, #32
 8008cb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cb8:	071a      	lsls	r2, r3, #28
 8008cba:	bf44      	itt	mi
 8008cbc:	222b      	movmi	r2, #43	; 0x2b
 8008cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cc2:	782a      	ldrb	r2, [r5, #0]
 8008cc4:	2a2a      	cmp	r2, #42	; 0x2a
 8008cc6:	d02a      	beq.n	8008d1e <_vfiprintf_r+0x10e>
 8008cc8:	9a07      	ldr	r2, [sp, #28]
 8008cca:	46a8      	mov	r8, r5
 8008ccc:	2000      	movs	r0, #0
 8008cce:	250a      	movs	r5, #10
 8008cd0:	4641      	mov	r1, r8
 8008cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd6:	3b30      	subs	r3, #48	; 0x30
 8008cd8:	2b09      	cmp	r3, #9
 8008cda:	d969      	bls.n	8008db0 <_vfiprintf_r+0x1a0>
 8008cdc:	b360      	cbz	r0, 8008d38 <_vfiprintf_r+0x128>
 8008cde:	e024      	b.n	8008d2a <_vfiprintf_r+0x11a>
 8008ce0:	4b50      	ldr	r3, [pc, #320]	; (8008e24 <_vfiprintf_r+0x214>)
 8008ce2:	429c      	cmp	r4, r3
 8008ce4:	d101      	bne.n	8008cea <_vfiprintf_r+0xda>
 8008ce6:	68b4      	ldr	r4, [r6, #8]
 8008ce8:	e7a2      	b.n	8008c30 <_vfiprintf_r+0x20>
 8008cea:	4b4f      	ldr	r3, [pc, #316]	; (8008e28 <_vfiprintf_r+0x218>)
 8008cec:	429c      	cmp	r4, r3
 8008cee:	bf08      	it	eq
 8008cf0:	68f4      	ldreq	r4, [r6, #12]
 8008cf2:	e79d      	b.n	8008c30 <_vfiprintf_r+0x20>
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff fc6c 	bl	80085d4 <__swsetup_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d09d      	beq.n	8008c3c <_vfiprintf_r+0x2c>
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	b01d      	add	sp, #116	; 0x74
 8008d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0a:	46a8      	mov	r8, r5
 8008d0c:	e7a2      	b.n	8008c54 <_vfiprintf_r+0x44>
 8008d0e:	4a44      	ldr	r2, [pc, #272]	; (8008e20 <_vfiprintf_r+0x210>)
 8008d10:	1a80      	subs	r0, r0, r2
 8008d12:	fa0b f000 	lsl.w	r0, fp, r0
 8008d16:	4318      	orrs	r0, r3
 8008d18:	9004      	str	r0, [sp, #16]
 8008d1a:	4645      	mov	r5, r8
 8008d1c:	e7be      	b.n	8008c9c <_vfiprintf_r+0x8c>
 8008d1e:	9a03      	ldr	r2, [sp, #12]
 8008d20:	1d11      	adds	r1, r2, #4
 8008d22:	6812      	ldr	r2, [r2, #0]
 8008d24:	9103      	str	r1, [sp, #12]
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	db01      	blt.n	8008d2e <_vfiprintf_r+0x11e>
 8008d2a:	9207      	str	r2, [sp, #28]
 8008d2c:	e004      	b.n	8008d38 <_vfiprintf_r+0x128>
 8008d2e:	4252      	negs	r2, r2
 8008d30:	f043 0302 	orr.w	r3, r3, #2
 8008d34:	9207      	str	r2, [sp, #28]
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	f898 3000 	ldrb.w	r3, [r8]
 8008d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d3e:	d10e      	bne.n	8008d5e <_vfiprintf_r+0x14e>
 8008d40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d44:	2b2a      	cmp	r3, #42	; 0x2a
 8008d46:	d138      	bne.n	8008dba <_vfiprintf_r+0x1aa>
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	1d1a      	adds	r2, r3, #4
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	9203      	str	r2, [sp, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	bfb8      	it	lt
 8008d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d58:	f108 0802 	add.w	r8, r8, #2
 8008d5c:	9305      	str	r3, [sp, #20]
 8008d5e:	4d33      	ldr	r5, [pc, #204]	; (8008e2c <_vfiprintf_r+0x21c>)
 8008d60:	f898 1000 	ldrb.w	r1, [r8]
 8008d64:	2203      	movs	r2, #3
 8008d66:	4628      	mov	r0, r5
 8008d68:	f7f7 fa5a 	bl	8000220 <memchr>
 8008d6c:	b140      	cbz	r0, 8008d80 <_vfiprintf_r+0x170>
 8008d6e:	2340      	movs	r3, #64	; 0x40
 8008d70:	1b40      	subs	r0, r0, r5
 8008d72:	fa03 f000 	lsl.w	r0, r3, r0
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	4303      	orrs	r3, r0
 8008d7a:	f108 0801 	add.w	r8, r8, #1
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	f898 1000 	ldrb.w	r1, [r8]
 8008d84:	482a      	ldr	r0, [pc, #168]	; (8008e30 <_vfiprintf_r+0x220>)
 8008d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d8a:	2206      	movs	r2, #6
 8008d8c:	f108 0701 	add.w	r7, r8, #1
 8008d90:	f7f7 fa46 	bl	8000220 <memchr>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d037      	beq.n	8008e08 <_vfiprintf_r+0x1f8>
 8008d98:	4b26      	ldr	r3, [pc, #152]	; (8008e34 <_vfiprintf_r+0x224>)
 8008d9a:	bb1b      	cbnz	r3, 8008de4 <_vfiprintf_r+0x1d4>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	3307      	adds	r3, #7
 8008da0:	f023 0307 	bic.w	r3, r3, #7
 8008da4:	3308      	adds	r3, #8
 8008da6:	9303      	str	r3, [sp, #12]
 8008da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008daa:	444b      	add	r3, r9
 8008dac:	9309      	str	r3, [sp, #36]	; 0x24
 8008dae:	e750      	b.n	8008c52 <_vfiprintf_r+0x42>
 8008db0:	fb05 3202 	mla	r2, r5, r2, r3
 8008db4:	2001      	movs	r0, #1
 8008db6:	4688      	mov	r8, r1
 8008db8:	e78a      	b.n	8008cd0 <_vfiprintf_r+0xc0>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f108 0801 	add.w	r8, r8, #1
 8008dc0:	9305      	str	r3, [sp, #20]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	250a      	movs	r5, #10
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dcc:	3a30      	subs	r2, #48	; 0x30
 8008dce:	2a09      	cmp	r2, #9
 8008dd0:	d903      	bls.n	8008dda <_vfiprintf_r+0x1ca>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0c3      	beq.n	8008d5e <_vfiprintf_r+0x14e>
 8008dd6:	9105      	str	r1, [sp, #20]
 8008dd8:	e7c1      	b.n	8008d5e <_vfiprintf_r+0x14e>
 8008dda:	fb05 2101 	mla	r1, r5, r1, r2
 8008dde:	2301      	movs	r3, #1
 8008de0:	4680      	mov	r8, r0
 8008de2:	e7f0      	b.n	8008dc6 <_vfiprintf_r+0x1b6>
 8008de4:	ab03      	add	r3, sp, #12
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4622      	mov	r2, r4
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <_vfiprintf_r+0x228>)
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	4630      	mov	r0, r6
 8008df0:	f3af 8000 	nop.w
 8008df4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008df8:	4681      	mov	r9, r0
 8008dfa:	d1d5      	bne.n	8008da8 <_vfiprintf_r+0x198>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	065b      	lsls	r3, r3, #25
 8008e00:	f53f af7e 	bmi.w	8008d00 <_vfiprintf_r+0xf0>
 8008e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e06:	e77d      	b.n	8008d04 <_vfiprintf_r+0xf4>
 8008e08:	ab03      	add	r3, sp, #12
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <_vfiprintf_r+0x228>)
 8008e10:	a904      	add	r1, sp, #16
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 f888 	bl	8008f28 <_printf_i>
 8008e18:	e7ec      	b.n	8008df4 <_vfiprintf_r+0x1e4>
 8008e1a:	bf00      	nop
 8008e1c:	08009580 	.word	0x08009580
 8008e20:	080095c0 	.word	0x080095c0
 8008e24:	080095a0 	.word	0x080095a0
 8008e28:	08009560 	.word	0x08009560
 8008e2c:	080095c6 	.word	0x080095c6
 8008e30:	080095ca 	.word	0x080095ca
 8008e34:	00000000 	.word	0x00000000
 8008e38:	08008beb 	.word	0x08008beb

08008e3c <_printf_common>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	4691      	mov	r9, r2
 8008e42:	461f      	mov	r7, r3
 8008e44:	688a      	ldr	r2, [r1, #8]
 8008e46:	690b      	ldr	r3, [r1, #16]
 8008e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	bfb8      	it	lt
 8008e50:	4613      	movlt	r3, r2
 8008e52:	f8c9 3000 	str.w	r3, [r9]
 8008e56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	b112      	cbz	r2, 8008e66 <_printf_common+0x2a>
 8008e60:	3301      	adds	r3, #1
 8008e62:	f8c9 3000 	str.w	r3, [r9]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	0699      	lsls	r1, r3, #26
 8008e6a:	bf42      	ittt	mi
 8008e6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e70:	3302      	addmi	r3, #2
 8008e72:	f8c9 3000 	strmi.w	r3, [r9]
 8008e76:	6825      	ldr	r5, [r4, #0]
 8008e78:	f015 0506 	ands.w	r5, r5, #6
 8008e7c:	d107      	bne.n	8008e8e <_printf_common+0x52>
 8008e7e:	f104 0a19 	add.w	sl, r4, #25
 8008e82:	68e3      	ldr	r3, [r4, #12]
 8008e84:	f8d9 2000 	ldr.w	r2, [r9]
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	42ab      	cmp	r3, r5
 8008e8c:	dc28      	bgt.n	8008ee0 <_printf_common+0xa4>
 8008e8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e92:	6822      	ldr	r2, [r4, #0]
 8008e94:	3300      	adds	r3, #0
 8008e96:	bf18      	it	ne
 8008e98:	2301      	movne	r3, #1
 8008e9a:	0692      	lsls	r2, r2, #26
 8008e9c:	d42d      	bmi.n	8008efa <_printf_common+0xbe>
 8008e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	47c0      	blx	r8
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d020      	beq.n	8008eee <_printf_common+0xb2>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	68e5      	ldr	r5, [r4, #12]
 8008eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8008eb4:	f003 0306 	and.w	r3, r3, #6
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	bf08      	it	eq
 8008ebc:	1aad      	subeq	r5, r5, r2
 8008ebe:	68a3      	ldr	r3, [r4, #8]
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	bf0c      	ite	eq
 8008ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ec8:	2500      	movne	r5, #0
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	bfc4      	itt	gt
 8008ece:	1a9b      	subgt	r3, r3, r2
 8008ed0:	18ed      	addgt	r5, r5, r3
 8008ed2:	f04f 0900 	mov.w	r9, #0
 8008ed6:	341a      	adds	r4, #26
 8008ed8:	454d      	cmp	r5, r9
 8008eda:	d11a      	bne.n	8008f12 <_printf_common+0xd6>
 8008edc:	2000      	movs	r0, #0
 8008ede:	e008      	b.n	8008ef2 <_printf_common+0xb6>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	4652      	mov	r2, sl
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	47c0      	blx	r8
 8008eea:	3001      	adds	r0, #1
 8008eec:	d103      	bne.n	8008ef6 <_printf_common+0xba>
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef6:	3501      	adds	r5, #1
 8008ef8:	e7c3      	b.n	8008e82 <_printf_common+0x46>
 8008efa:	18e1      	adds	r1, r4, r3
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	2030      	movs	r0, #48	; 0x30
 8008f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f04:	4422      	add	r2, r4
 8008f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f0e:	3302      	adds	r3, #2
 8008f10:	e7c5      	b.n	8008e9e <_printf_common+0x62>
 8008f12:	2301      	movs	r3, #1
 8008f14:	4622      	mov	r2, r4
 8008f16:	4639      	mov	r1, r7
 8008f18:	4630      	mov	r0, r6
 8008f1a:	47c0      	blx	r8
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d0e6      	beq.n	8008eee <_printf_common+0xb2>
 8008f20:	f109 0901 	add.w	r9, r9, #1
 8008f24:	e7d8      	b.n	8008ed8 <_printf_common+0x9c>
	...

08008f28 <_printf_i>:
 8008f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f30:	460c      	mov	r4, r1
 8008f32:	7e09      	ldrb	r1, [r1, #24]
 8008f34:	b085      	sub	sp, #20
 8008f36:	296e      	cmp	r1, #110	; 0x6e
 8008f38:	4617      	mov	r7, r2
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	4698      	mov	r8, r3
 8008f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f40:	f000 80b3 	beq.w	80090aa <_printf_i+0x182>
 8008f44:	d822      	bhi.n	8008f8c <_printf_i+0x64>
 8008f46:	2963      	cmp	r1, #99	; 0x63
 8008f48:	d036      	beq.n	8008fb8 <_printf_i+0x90>
 8008f4a:	d80a      	bhi.n	8008f62 <_printf_i+0x3a>
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	f000 80b9 	beq.w	80090c4 <_printf_i+0x19c>
 8008f52:	2958      	cmp	r1, #88	; 0x58
 8008f54:	f000 8083 	beq.w	800905e <_printf_i+0x136>
 8008f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f60:	e032      	b.n	8008fc8 <_printf_i+0xa0>
 8008f62:	2964      	cmp	r1, #100	; 0x64
 8008f64:	d001      	beq.n	8008f6a <_printf_i+0x42>
 8008f66:	2969      	cmp	r1, #105	; 0x69
 8008f68:	d1f6      	bne.n	8008f58 <_printf_i+0x30>
 8008f6a:	6820      	ldr	r0, [r4, #0]
 8008f6c:	6813      	ldr	r3, [r2, #0]
 8008f6e:	0605      	lsls	r5, r0, #24
 8008f70:	f103 0104 	add.w	r1, r3, #4
 8008f74:	d52a      	bpl.n	8008fcc <_printf_i+0xa4>
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	da03      	bge.n	8008f86 <_printf_i+0x5e>
 8008f7e:	222d      	movs	r2, #45	; 0x2d
 8008f80:	425b      	negs	r3, r3
 8008f82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f86:	486f      	ldr	r0, [pc, #444]	; (8009144 <_printf_i+0x21c>)
 8008f88:	220a      	movs	r2, #10
 8008f8a:	e039      	b.n	8009000 <_printf_i+0xd8>
 8008f8c:	2973      	cmp	r1, #115	; 0x73
 8008f8e:	f000 809d 	beq.w	80090cc <_printf_i+0x1a4>
 8008f92:	d808      	bhi.n	8008fa6 <_printf_i+0x7e>
 8008f94:	296f      	cmp	r1, #111	; 0x6f
 8008f96:	d020      	beq.n	8008fda <_printf_i+0xb2>
 8008f98:	2970      	cmp	r1, #112	; 0x70
 8008f9a:	d1dd      	bne.n	8008f58 <_printf_i+0x30>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	f043 0320 	orr.w	r3, r3, #32
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	e003      	b.n	8008fae <_printf_i+0x86>
 8008fa6:	2975      	cmp	r1, #117	; 0x75
 8008fa8:	d017      	beq.n	8008fda <_printf_i+0xb2>
 8008faa:	2978      	cmp	r1, #120	; 0x78
 8008fac:	d1d4      	bne.n	8008f58 <_printf_i+0x30>
 8008fae:	2378      	movs	r3, #120	; 0x78
 8008fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fb4:	4864      	ldr	r0, [pc, #400]	; (8009148 <_printf_i+0x220>)
 8008fb6:	e055      	b.n	8009064 <_printf_i+0x13c>
 8008fb8:	6813      	ldr	r3, [r2, #0]
 8008fba:	1d19      	adds	r1, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6011      	str	r1, [r2, #0]
 8008fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e08c      	b.n	80090e6 <_printf_i+0x1be>
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6011      	str	r1, [r2, #0]
 8008fd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fd4:	bf18      	it	ne
 8008fd6:	b21b      	sxthne	r3, r3
 8008fd8:	e7cf      	b.n	8008f7a <_printf_i+0x52>
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1d18      	adds	r0, r3, #4
 8008fe0:	6010      	str	r0, [r2, #0]
 8008fe2:	0628      	lsls	r0, r5, #24
 8008fe4:	d501      	bpl.n	8008fea <_printf_i+0xc2>
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	e002      	b.n	8008ff0 <_printf_i+0xc8>
 8008fea:	0668      	lsls	r0, r5, #25
 8008fec:	d5fb      	bpl.n	8008fe6 <_printf_i+0xbe>
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	4854      	ldr	r0, [pc, #336]	; (8009144 <_printf_i+0x21c>)
 8008ff2:	296f      	cmp	r1, #111	; 0x6f
 8008ff4:	bf14      	ite	ne
 8008ff6:	220a      	movne	r2, #10
 8008ff8:	2208      	moveq	r2, #8
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009000:	6865      	ldr	r5, [r4, #4]
 8009002:	60a5      	str	r5, [r4, #8]
 8009004:	2d00      	cmp	r5, #0
 8009006:	f2c0 8095 	blt.w	8009134 <_printf_i+0x20c>
 800900a:	6821      	ldr	r1, [r4, #0]
 800900c:	f021 0104 	bic.w	r1, r1, #4
 8009010:	6021      	str	r1, [r4, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d13d      	bne.n	8009092 <_printf_i+0x16a>
 8009016:	2d00      	cmp	r5, #0
 8009018:	f040 808e 	bne.w	8009138 <_printf_i+0x210>
 800901c:	4665      	mov	r5, ip
 800901e:	2a08      	cmp	r2, #8
 8009020:	d10b      	bne.n	800903a <_printf_i+0x112>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	07db      	lsls	r3, r3, #31
 8009026:	d508      	bpl.n	800903a <_printf_i+0x112>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	6862      	ldr	r2, [r4, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	bfde      	ittt	le
 8009030:	2330      	movle	r3, #48	; 0x30
 8009032:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009036:	f105 35ff 	addle.w	r5, r5, #4294967295
 800903a:	ebac 0305 	sub.w	r3, ip, r5
 800903e:	6123      	str	r3, [r4, #16]
 8009040:	f8cd 8000 	str.w	r8, [sp]
 8009044:	463b      	mov	r3, r7
 8009046:	aa03      	add	r2, sp, #12
 8009048:	4621      	mov	r1, r4
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff fef6 	bl	8008e3c <_printf_common>
 8009050:	3001      	adds	r0, #1
 8009052:	d14d      	bne.n	80090f0 <_printf_i+0x1c8>
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	b005      	add	sp, #20
 800905a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800905e:	4839      	ldr	r0, [pc, #228]	; (8009144 <_printf_i+0x21c>)
 8009060:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009064:	6813      	ldr	r3, [r2, #0]
 8009066:	6821      	ldr	r1, [r4, #0]
 8009068:	1d1d      	adds	r5, r3, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6015      	str	r5, [r2, #0]
 800906e:	060a      	lsls	r2, r1, #24
 8009070:	d50b      	bpl.n	800908a <_printf_i+0x162>
 8009072:	07ca      	lsls	r2, r1, #31
 8009074:	bf44      	itt	mi
 8009076:	f041 0120 	orrmi.w	r1, r1, #32
 800907a:	6021      	strmi	r1, [r4, #0]
 800907c:	b91b      	cbnz	r3, 8009086 <_printf_i+0x15e>
 800907e:	6822      	ldr	r2, [r4, #0]
 8009080:	f022 0220 	bic.w	r2, r2, #32
 8009084:	6022      	str	r2, [r4, #0]
 8009086:	2210      	movs	r2, #16
 8009088:	e7b7      	b.n	8008ffa <_printf_i+0xd2>
 800908a:	064d      	lsls	r5, r1, #25
 800908c:	bf48      	it	mi
 800908e:	b29b      	uxthmi	r3, r3
 8009090:	e7ef      	b.n	8009072 <_printf_i+0x14a>
 8009092:	4665      	mov	r5, ip
 8009094:	fbb3 f1f2 	udiv	r1, r3, r2
 8009098:	fb02 3311 	mls	r3, r2, r1, r3
 800909c:	5cc3      	ldrb	r3, [r0, r3]
 800909e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80090a2:	460b      	mov	r3, r1
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d1f5      	bne.n	8009094 <_printf_i+0x16c>
 80090a8:	e7b9      	b.n	800901e <_printf_i+0xf6>
 80090aa:	6813      	ldr	r3, [r2, #0]
 80090ac:	6825      	ldr	r5, [r4, #0]
 80090ae:	6961      	ldr	r1, [r4, #20]
 80090b0:	1d18      	adds	r0, r3, #4
 80090b2:	6010      	str	r0, [r2, #0]
 80090b4:	0628      	lsls	r0, r5, #24
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	d501      	bpl.n	80090be <_printf_i+0x196>
 80090ba:	6019      	str	r1, [r3, #0]
 80090bc:	e002      	b.n	80090c4 <_printf_i+0x19c>
 80090be:	066a      	lsls	r2, r5, #25
 80090c0:	d5fb      	bpl.n	80090ba <_printf_i+0x192>
 80090c2:	8019      	strh	r1, [r3, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	4665      	mov	r5, ip
 80090ca:	e7b9      	b.n	8009040 <_printf_i+0x118>
 80090cc:	6813      	ldr	r3, [r2, #0]
 80090ce:	1d19      	adds	r1, r3, #4
 80090d0:	6011      	str	r1, [r2, #0]
 80090d2:	681d      	ldr	r5, [r3, #0]
 80090d4:	6862      	ldr	r2, [r4, #4]
 80090d6:	2100      	movs	r1, #0
 80090d8:	4628      	mov	r0, r5
 80090da:	f7f7 f8a1 	bl	8000220 <memchr>
 80090de:	b108      	cbz	r0, 80090e4 <_printf_i+0x1bc>
 80090e0:	1b40      	subs	r0, r0, r5
 80090e2:	6060      	str	r0, [r4, #4]
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	6123      	str	r3, [r4, #16]
 80090e8:	2300      	movs	r3, #0
 80090ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ee:	e7a7      	b.n	8009040 <_printf_i+0x118>
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	462a      	mov	r2, r5
 80090f4:	4639      	mov	r1, r7
 80090f6:	4630      	mov	r0, r6
 80090f8:	47c0      	blx	r8
 80090fa:	3001      	adds	r0, #1
 80090fc:	d0aa      	beq.n	8009054 <_printf_i+0x12c>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	079b      	lsls	r3, r3, #30
 8009102:	d413      	bmi.n	800912c <_printf_i+0x204>
 8009104:	68e0      	ldr	r0, [r4, #12]
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	4298      	cmp	r0, r3
 800910a:	bfb8      	it	lt
 800910c:	4618      	movlt	r0, r3
 800910e:	e7a3      	b.n	8009058 <_printf_i+0x130>
 8009110:	2301      	movs	r3, #1
 8009112:	464a      	mov	r2, r9
 8009114:	4639      	mov	r1, r7
 8009116:	4630      	mov	r0, r6
 8009118:	47c0      	blx	r8
 800911a:	3001      	adds	r0, #1
 800911c:	d09a      	beq.n	8009054 <_printf_i+0x12c>
 800911e:	3501      	adds	r5, #1
 8009120:	68e3      	ldr	r3, [r4, #12]
 8009122:	9a03      	ldr	r2, [sp, #12]
 8009124:	1a9b      	subs	r3, r3, r2
 8009126:	42ab      	cmp	r3, r5
 8009128:	dcf2      	bgt.n	8009110 <_printf_i+0x1e8>
 800912a:	e7eb      	b.n	8009104 <_printf_i+0x1dc>
 800912c:	2500      	movs	r5, #0
 800912e:	f104 0919 	add.w	r9, r4, #25
 8009132:	e7f5      	b.n	8009120 <_printf_i+0x1f8>
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1ac      	bne.n	8009092 <_printf_i+0x16a>
 8009138:	7803      	ldrb	r3, [r0, #0]
 800913a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800913e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009142:	e76c      	b.n	800901e <_printf_i+0xf6>
 8009144:	080095d1 	.word	0x080095d1
 8009148:	080095e2 	.word	0x080095e2

0800914c <_sbrk_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4c06      	ldr	r4, [pc, #24]	; (8009168 <_sbrk_r+0x1c>)
 8009150:	2300      	movs	r3, #0
 8009152:	4605      	mov	r5, r0
 8009154:	4608      	mov	r0, r1
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	f7f7 fa5c 	bl	8000614 <_sbrk>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_sbrk_r+0x1a>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	b103      	cbz	r3, 8009166 <_sbrk_r+0x1a>
 8009164:	602b      	str	r3, [r5, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	20001d08 	.word	0x20001d08

0800916c <__sread>:
 800916c:	b510      	push	{r4, lr}
 800916e:	460c      	mov	r4, r1
 8009170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009174:	f000 f896 	bl	80092a4 <_read_r>
 8009178:	2800      	cmp	r0, #0
 800917a:	bfab      	itete	ge
 800917c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800917e:	89a3      	ldrhlt	r3, [r4, #12]
 8009180:	181b      	addge	r3, r3, r0
 8009182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009186:	bfac      	ite	ge
 8009188:	6563      	strge	r3, [r4, #84]	; 0x54
 800918a:	81a3      	strhlt	r3, [r4, #12]
 800918c:	bd10      	pop	{r4, pc}

0800918e <__swrite>:
 800918e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009192:	461f      	mov	r7, r3
 8009194:	898b      	ldrh	r3, [r1, #12]
 8009196:	05db      	lsls	r3, r3, #23
 8009198:	4605      	mov	r5, r0
 800919a:	460c      	mov	r4, r1
 800919c:	4616      	mov	r6, r2
 800919e:	d505      	bpl.n	80091ac <__swrite+0x1e>
 80091a0:	2302      	movs	r3, #2
 80091a2:	2200      	movs	r2, #0
 80091a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a8:	f000 f868 	bl	800927c <_lseek_r>
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091b6:	81a3      	strh	r3, [r4, #12]
 80091b8:	4632      	mov	r2, r6
 80091ba:	463b      	mov	r3, r7
 80091bc:	4628      	mov	r0, r5
 80091be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091c2:	f000 b817 	b.w	80091f4 <_write_r>

080091c6 <__sseek>:
 80091c6:	b510      	push	{r4, lr}
 80091c8:	460c      	mov	r4, r1
 80091ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ce:	f000 f855 	bl	800927c <_lseek_r>
 80091d2:	1c43      	adds	r3, r0, #1
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	bf15      	itete	ne
 80091d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80091da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091e2:	81a3      	strheq	r3, [r4, #12]
 80091e4:	bf18      	it	ne
 80091e6:	81a3      	strhne	r3, [r4, #12]
 80091e8:	bd10      	pop	{r4, pc}

080091ea <__sclose>:
 80091ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ee:	f000 b813 	b.w	8009218 <_close_r>
	...

080091f4 <_write_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4c07      	ldr	r4, [pc, #28]	; (8009214 <_write_r+0x20>)
 80091f8:	4605      	mov	r5, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f7 f933 	bl	800046e <_write>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_write_r+0x1e>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	b103      	cbz	r3, 8009212 <_write_r+0x1e>
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20001d08 	.word	0x20001d08

08009218 <_close_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4c06      	ldr	r4, [pc, #24]	; (8009234 <_close_r+0x1c>)
 800921c:	2300      	movs	r3, #0
 800921e:	4605      	mov	r5, r0
 8009220:	4608      	mov	r0, r1
 8009222:	6023      	str	r3, [r4, #0]
 8009224:	f7f7 f949 	bl	80004ba <_close>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_close_r+0x1a>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	b103      	cbz	r3, 8009232 <_close_r+0x1a>
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	20001d08 	.word	0x20001d08

08009238 <_fstat_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4c07      	ldr	r4, [pc, #28]	; (8009258 <_fstat_r+0x20>)
 800923c:	2300      	movs	r3, #0
 800923e:	4605      	mov	r5, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	f7f7 f96d 	bl	8000524 <_fstat>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d102      	bne.n	8009254 <_fstat_r+0x1c>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	b103      	cbz	r3, 8009254 <_fstat_r+0x1c>
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	20001d08 	.word	0x20001d08

0800925c <_isatty_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4c06      	ldr	r4, [pc, #24]	; (8009278 <_isatty_r+0x1c>)
 8009260:	2300      	movs	r3, #0
 8009262:	4605      	mov	r5, r0
 8009264:	4608      	mov	r0, r1
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	f7f7 f8eb 	bl	8000442 <_isatty>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_isatty_r+0x1a>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	b103      	cbz	r3, 8009276 <_isatty_r+0x1a>
 8009274:	602b      	str	r3, [r5, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	20001d08 	.word	0x20001d08

0800927c <_lseek_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4c07      	ldr	r4, [pc, #28]	; (800929c <_lseek_r+0x20>)
 8009280:	4605      	mov	r5, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	6022      	str	r2, [r4, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f7 f92c 	bl	80004e8 <_lseek>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_lseek_r+0x1e>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	b103      	cbz	r3, 800929a <_lseek_r+0x1e>
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20001d08 	.word	0x20001d08

080092a0 <__malloc_lock>:
 80092a0:	4770      	bx	lr

080092a2 <__malloc_unlock>:
 80092a2:	4770      	bx	lr

080092a4 <_read_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4c07      	ldr	r4, [pc, #28]	; (80092c4 <_read_r+0x20>)
 80092a8:	4605      	mov	r5, r0
 80092aa:	4608      	mov	r0, r1
 80092ac:	4611      	mov	r1, r2
 80092ae:	2200      	movs	r2, #0
 80092b0:	6022      	str	r2, [r4, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f7f7 f929 	bl	800050a <_read>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d102      	bne.n	80092c2 <_read_r+0x1e>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	b103      	cbz	r3, 80092c2 <_read_r+0x1e>
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
 80092c4:	20001d08 	.word	0x20001d08

080092c8 <_init>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	bf00      	nop
 80092cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ce:	bc08      	pop	{r3}
 80092d0:	469e      	mov	lr, r3
 80092d2:	4770      	bx	lr

080092d4 <_fini>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	bf00      	nop
 80092d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092da:	bc08      	pop	{r3}
 80092dc:	469e      	mov	lr, r3
 80092de:	4770      	bx	lr
