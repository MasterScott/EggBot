
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040fc  080040fc  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080040fc  080040fc  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040fc  080040fc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08004104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a08  20000184  08004288  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b8c  08004288  00021b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d26  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003150  00000000  00000000  00036eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  0003ac90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002687a  00000000  00000000  0003bb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d578  00000000  00000000  0006238a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e51fb  00000000  00000000  0006f902  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c50  00000000  00000000  00154b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008d59  00000000  00000000  001567c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800408c 	.word	0x0800408c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800408c 	.word	0x0800408c

08000218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000218:	b510      	push	{r4, lr}
 800021a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021c:	2400      	movs	r4, #0
 800021e:	9401      	str	r4, [sp, #4]
 8000220:	9402      	str	r4, [sp, #8]
 8000222:	9403      	str	r4, [sp, #12]
 8000224:	9404      	str	r4, [sp, #16]
 8000226:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x4c>)
 800022a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022c:	f042 0201 	orr.w	r2, r2, #1
 8000230:	64da      	str	r2, [r3, #76]	; 0x4c
 8000232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800023c:	4622      	mov	r2, r4
 800023e:	2120      	movs	r1, #32
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f000 fa46 	bl	80006d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000248:	2320      	movs	r3, #32
 800024a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024c:	2301      	movs	r3, #1
 800024e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000250:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000252:	2303      	movs	r3, #3
 8000254:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000256:	a901      	add	r1, sp, #4
 8000258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025c:	f000 f96a 	bl	8000534 <HAL_GPIO_Init>

}
 8000260:	b006      	add	sp, #24
 8000262:	bd10      	pop	{r4, pc}
 8000264:	40021000 	.word	0x40021000

08000268 <SystemClock_Config>:
{
 8000268:	b510      	push	{r4, lr}
 800026a:	b0a8      	sub	sp, #160	; 0xa0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026c:	2238      	movs	r2, #56	; 0x38
 800026e:	2100      	movs	r1, #0
 8000270:	a81a      	add	r0, sp, #104	; 0x68
 8000272:	f003 ff03 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	2400      	movs	r4, #0
 8000278:	9415      	str	r4, [sp, #84]	; 0x54
 800027a:	9416      	str	r4, [sp, #88]	; 0x58
 800027c:	9417      	str	r4, [sp, #92]	; 0x5c
 800027e:	9418      	str	r4, [sp, #96]	; 0x60
 8000280:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000282:	2254      	movs	r2, #84	; 0x54
 8000284:	4621      	mov	r1, r4
 8000286:	4668      	mov	r0, sp
 8000288:	f003 fef8 	bl	800407c <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800028c:	4620      	mov	r0, r4
 800028e:	f001 f8df 	bl	8001450 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000292:	2322      	movs	r3, #34	; 0x22
 8000294:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029a:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	2340      	movs	r3, #64	; 0x40
 800029e:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002a0:	2201      	movs	r2, #1
 80002a2:	9220      	str	r2, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	2302      	movs	r3, #2
 80002a6:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a8:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002aa:	9223      	str	r2, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80002ac:	2215      	movs	r2, #21
 80002ae:	9224      	str	r2, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b0:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b2:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b4:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	a81a      	add	r0, sp, #104	; 0x68
 80002b8:	f001 f984 	bl	80015c4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	230f      	movs	r3, #15
 80002be:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c0:	2303      	movs	r3, #3
 80002c2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ca:	2104      	movs	r1, #4
 80002cc:	a815      	add	r0, sp, #84	; 0x54
 80002ce:	f001 fc31 	bl	8001b34 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d6:	9300      	str	r3, [sp, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80002d8:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002da:	4668      	mov	r0, sp
 80002dc:	f001 fd28 	bl	8001d30 <HAL_RCCEx_PeriphCLKConfig>
}
 80002e0:	b028      	add	sp, #160	; 0xa0
 80002e2:	bd10      	pop	{r4, pc}

080002e4 <main>:
{
 80002e4:	b508      	push	{r3, lr}
  HAL_Init();
 80002e6:	f000 f899 	bl	800041c <HAL_Init>
  SystemClock_Config();
 80002ea:	f7ff ffbd 	bl	8000268 <SystemClock_Config>
  MX_GPIO_Init();
 80002ee:	f7ff ff93 	bl	8000218 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80002f2:	f003 fc67 	bl	8003bc4 <MX_USB_Device_Init>
 80002f6:	e7fe      	b.n	80002f6 <main+0x12>

080002f8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002f8:	4770      	bx	lr
	...

080002fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fc:	b500      	push	{lr}
 80002fe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <HAL_MspInit+0x34>)
 8000302:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000304:	f042 0201 	orr.w	r2, r2, #1
 8000308:	661a      	str	r2, [r3, #96]	; 0x60
 800030a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800030c:	f002 0201 	and.w	r2, r2, #1
 8000310:	9200      	str	r2, [sp, #0]
 8000312:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000316:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800031a:	659a      	str	r2, [r3, #88]	; 0x58
 800031c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000326:	f001 f919 	bl	800155c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032a:	b003      	add	sp, #12
 800032c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000330:	40021000 	.word	0x40021000

08000334 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000334:	4770      	bx	lr

08000336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000336:	e7fe      	b.n	8000336 <HardFault_Handler>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	e7fe      	b.n	8000338 <MemManage_Handler>

0800033a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033a:	e7fe      	b.n	800033a <BusFault_Handler>

0800033c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033c:	e7fe      	b.n	800033c <UsageFault_Handler>

0800033e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033e:	4770      	bx	lr

08000340 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000340:	4770      	bx	lr

08000342 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000342:	4770      	bx	lr

08000344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000346:	f000 f879 	bl	800043c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034a:	bd08      	pop	{r3, pc}

0800034c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800034c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <USB_LP_IRQHandler+0xc>)
 8000350:	f000 fe33 	bl	8000fba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000354:	bd08      	pop	{r3, pc}
 8000356:	bf00      	nop
 8000358:	20001898 	.word	0x20001898

0800035c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <SystemInit+0x18>)
 800035e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000362:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800036a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800036e:	609a      	str	r2, [r3, #8]
#endif
}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490e      	ldr	r1, [pc, #56]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0b      	ldr	r4, [pc, #44]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a2:	f7ff ffdb 	bl	800035c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a6:	f003 fe45 	bl	8004034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003aa:	f7ff ff9b 	bl	80002e4 <main>

080003ae <LoopForever>:

LoopForever:
    b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80003bc:	08004104 	.word	0x08004104
  ldr r2, =_sbss
 80003c0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80003c4:	20001b8c 	.word	0x20001b8c

080003c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC1_2_IRQHandler>
	...

080003cc <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <HAL_InitTick+0x44>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	b90b      	cbnz	r3, 80003d6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80003d2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80003d4:	4770      	bx	lr
{
 80003d6:	b510      	push	{r4, lr}
 80003d8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80003da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003de:	fbb0 f3f3 	udiv	r3, r0, r3
 80003e2:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <HAL_InitTick+0x48>)
 80003e4:	6810      	ldr	r0, [r2, #0]
 80003e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80003ea:	f000 f88d 	bl	8000508 <HAL_SYSTICK_Config>
 80003ee:	b968      	cbnz	r0, 800040c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003f0:	2c0f      	cmp	r4, #15
 80003f2:	d901      	bls.n	80003f8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80003f4:	2001      	movs	r0, #1
 80003f6:	e00a      	b.n	800040e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003f8:	2200      	movs	r2, #0
 80003fa:	4621      	mov	r1, r4
 80003fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000400:	f000 f840 	bl	8000484 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <HAL_InitTick+0x4c>)
 8000406:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000408:	2000      	movs	r0, #0
 800040a:	e000      	b.n	800040e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800040c:	2001      	movs	r0, #1
}
 800040e:	bd10      	pop	{r4, pc}
 8000410:	20000004 	.word	0x20000004
 8000414:	20000000 	.word	0x20000000
 8000418:	20000008 	.word	0x20000008

0800041c <HAL_Init>:
{
 800041c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800041e:	2003      	movs	r0, #3
 8000420:	f000 f81e 	bl	8000460 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000424:	2000      	movs	r0, #0
 8000426:	f7ff ffd1 	bl	80003cc <HAL_InitTick>
 800042a:	b110      	cbz	r0, 8000432 <HAL_Init+0x16>
    status = HAL_ERROR;
 800042c:	2401      	movs	r4, #1
}
 800042e:	4620      	mov	r0, r4
 8000430:	bd10      	pop	{r4, pc}
 8000432:	4604      	mov	r4, r0
    HAL_MspInit();
 8000434:	f7ff ff62 	bl	80002fc <HAL_MspInit>
 8000438:	e7f9      	b.n	800042e <HAL_Init+0x12>
	...

0800043c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800043c:	4a03      	ldr	r2, [pc, #12]	; (800044c <HAL_IncTick+0x10>)
 800043e:	6813      	ldr	r3, [r2, #0]
 8000440:	4903      	ldr	r1, [pc, #12]	; (8000450 <HAL_IncTick+0x14>)
 8000442:	6809      	ldr	r1, [r1, #0]
 8000444:	440b      	add	r3, r1
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	200003c4 	.word	0x200003c4
 8000450:	20000004 	.word	0x20000004

08000454 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000454:	4b01      	ldr	r3, [pc, #4]	; (800045c <HAL_GetTick+0x8>)
 8000456:	6818      	ldr	r0, [r3, #0]
}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200003c4 	.word	0x200003c4

08000460 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000460:	4a07      	ldr	r2, [pc, #28]	; (8000480 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000462:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000464:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000468:	041b      	lsls	r3, r3, #16
 800046a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800046c:	0200      	lsls	r0, r0, #8
 800046e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000472:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000474:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000478:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800047c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800047e:	4770      	bx	lr
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000484:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <HAL_NVIC_SetPriority+0x60>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800048e:	f1c3 0407 	rsb	r4, r3, #7
 8000492:	2c04      	cmp	r4, #4
 8000494:	bf28      	it	cs
 8000496:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000498:	1d1d      	adds	r5, r3, #4
 800049a:	2d06      	cmp	r5, #6
 800049c:	d918      	bls.n	80004d0 <HAL_NVIC_SetPriority+0x4c>
 800049e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	f04f 35ff 	mov.w	r5, #4294967295
 80004a4:	fa05 f404 	lsl.w	r4, r5, r4
 80004a8:	ea21 0104 	bic.w	r1, r1, r4
 80004ac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004ae:	fa05 f303 	lsl.w	r3, r5, r3
 80004b2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80004b8:	2800      	cmp	r0, #0
 80004ba:	db0b      	blt.n	80004d4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	0109      	lsls	r1, r1, #4
 80004be:	b2c9      	uxtb	r1, r1
 80004c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80004c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80004c8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80004cc:	bc30      	pop	{r4, r5}
 80004ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004d0:	2300      	movs	r3, #0
 80004d2:	e7e5      	b.n	80004a0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	f000 000f 	and.w	r0, r0, #15
 80004d8:	0109      	lsls	r1, r1, #4
 80004da:	b2c9      	uxtb	r1, r1
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <HAL_NVIC_SetPriority+0x64>)
 80004de:	5419      	strb	r1, [r3, r0]
 80004e0:	e7f4      	b.n	80004cc <HAL_NVIC_SetPriority+0x48>
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00
 80004e8:	e000ed14 	.word	0xe000ed14

080004ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80004ec:	2800      	cmp	r0, #0
 80004ee:	db07      	blt.n	8000500 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004f0:	f000 021f 	and.w	r2, r0, #31
 80004f4:	0940      	lsrs	r0, r0, #5
 80004f6:	2301      	movs	r3, #1
 80004f8:	4093      	lsls	r3, r2
 80004fa:	4a02      	ldr	r2, [pc, #8]	; (8000504 <HAL_NVIC_EnableIRQ+0x18>)
 80004fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000e100 	.word	0xe000e100

08000508 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000508:	3801      	subs	r0, #1
 800050a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800050e:	d20a      	bcs.n	8000526 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_SYSTICK_Config+0x24>)
 8000512:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <HAL_SYSTICK_Config+0x28>)
 8000516:	21f0      	movs	r1, #240	; 0xf0
 8000518:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800051c:	2000      	movs	r0, #0
 800051e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000520:	2207      	movs	r2, #7
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000526:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000e010 	.word	0xe000e010
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000538:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800053a:	e036      	b.n	80005aa <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800053c:	2405      	movs	r4, #5
 800053e:	e000      	b.n	8000542 <HAL_GPIO_Init+0xe>
 8000540:	2400      	movs	r4, #0
 8000542:	40b4      	lsls	r4, r6
 8000544:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000546:	3502      	adds	r5, #2
 8000548:	4e5e      	ldr	r6, [pc, #376]	; (80006c4 <HAL_GPIO_Init+0x190>)
 800054a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800054e:	4c5e      	ldr	r4, [pc, #376]	; (80006c8 <HAL_GPIO_Init+0x194>)
 8000550:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000552:	43d4      	mvns	r4, r2
 8000554:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000558:	684f      	ldr	r7, [r1, #4]
 800055a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800055e:	d001      	beq.n	8000564 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8000560:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8000564:	4d58      	ldr	r5, [pc, #352]	; (80006c8 <HAL_GPIO_Init+0x194>)
 8000566:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8000568:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800056a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800056e:	684f      	ldr	r7, [r1, #4]
 8000570:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000574:	d001      	beq.n	800057a <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8000576:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800057a:	4d53      	ldr	r5, [pc, #332]	; (80006c8 <HAL_GPIO_Init+0x194>)
 800057c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800057e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8000580:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000584:	684f      	ldr	r7, [r1, #4]
 8000586:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800058a:	d001      	beq.n	8000590 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 800058c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000590:	4d4d      	ldr	r5, [pc, #308]	; (80006c8 <HAL_GPIO_Init+0x194>)
 8000592:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8000594:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000596:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000598:	684e      	ldr	r6, [r1, #4]
 800059a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800059e:	d001      	beq.n	80005a4 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80005a0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x194>)
 80005a6:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80005a8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80005aa:	680a      	ldr	r2, [r1, #0]
 80005ac:	fa32 f403 	lsrs.w	r4, r2, r3
 80005b0:	f000 8086 	beq.w	80006c0 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80005b4:	2401      	movs	r4, #1
 80005b6:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80005b8:	4022      	ands	r2, r4
 80005ba:	d0f5      	beq.n	80005a8 <HAL_GPIO_Init+0x74>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005bc:	684d      	ldr	r5, [r1, #4]
 80005be:	1e6e      	subs	r6, r5, #1
 80005c0:	2e01      	cmp	r6, #1
 80005c2:	d903      	bls.n	80005cc <HAL_GPIO_Init+0x98>
 80005c4:	2d11      	cmp	r5, #17
 80005c6:	d001      	beq.n	80005cc <HAL_GPIO_Init+0x98>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005c8:	2d12      	cmp	r5, #18
 80005ca:	d112      	bne.n	80005f2 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 80005cc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80005ce:	005f      	lsls	r7, r3, #1
 80005d0:	2503      	movs	r5, #3
 80005d2:	40bd      	lsls	r5, r7
 80005d4:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005d8:	68cd      	ldr	r5, [r1, #12]
 80005da:	40bd      	lsls	r5, r7
 80005dc:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80005de:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80005e0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80005e2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005e6:	684d      	ldr	r5, [r1, #4]
 80005e8:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80005ec:	409c      	lsls	r4, r3
 80005ee:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80005f0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80005f2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005f4:	005f      	lsls	r7, r3, #1
 80005f6:	2403      	movs	r4, #3
 80005f8:	40bc      	lsls	r4, r7
 80005fa:	43e4      	mvns	r4, r4
 80005fc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fe:	688e      	ldr	r6, [r1, #8]
 8000600:	40be      	lsls	r6, r7
 8000602:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8000604:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000606:	684d      	ldr	r5, [r1, #4]
 8000608:	2d02      	cmp	r5, #2
 800060a:	d001      	beq.n	8000610 <HAL_GPIO_Init+0xdc>
 800060c:	2d12      	cmp	r5, #18
 800060e:	d113      	bne.n	8000638 <HAL_GPIO_Init+0x104>
        temp = GPIOx->AFR[position >> 3U];
 8000610:	08de      	lsrs	r6, r3, #3
 8000612:	3608      	adds	r6, #8
 8000614:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000618:	f003 0507 	and.w	r5, r3, #7
 800061c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8000620:	250f      	movs	r5, #15
 8000622:	fa05 f50c 	lsl.w	r5, r5, ip
 8000626:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800062a:	690d      	ldr	r5, [r1, #16]
 800062c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000630:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000634:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000638:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800063a:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800063c:	684d      	ldr	r5, [r1, #4]
 800063e:	f005 0503 	and.w	r5, r5, #3
 8000642:	40bd      	lsls	r5, r7
 8000644:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8000646:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000648:	684c      	ldr	r4, [r1, #4]
 800064a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800064e:	d0ab      	beq.n	80005a8 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	4c1e      	ldr	r4, [pc, #120]	; (80006cc <HAL_GPIO_Init+0x198>)
 8000652:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8000654:	f045 0501 	orr.w	r5, r5, #1
 8000658:	6625      	str	r5, [r4, #96]	; 0x60
 800065a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800065c:	f004 0401 	and.w	r4, r4, #1
 8000660:	9401      	str	r4, [sp, #4]
 8000662:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000664:	089d      	lsrs	r5, r3, #2
 8000666:	1cae      	adds	r6, r5, #2
 8000668:	4c16      	ldr	r4, [pc, #88]	; (80006c4 <HAL_GPIO_Init+0x190>)
 800066a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800066e:	f003 0403 	and.w	r4, r3, #3
 8000672:	00a6      	lsls	r6, r4, #2
 8000674:	240f      	movs	r4, #15
 8000676:	40b4      	lsls	r4, r6
 8000678:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800067c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000680:	f43f af5e 	beq.w	8000540 <HAL_GPIO_Init+0xc>
 8000684:	4c12      	ldr	r4, [pc, #72]	; (80006d0 <HAL_GPIO_Init+0x19c>)
 8000686:	42a0      	cmp	r0, r4
 8000688:	d012      	beq.n	80006b0 <HAL_GPIO_Init+0x17c>
 800068a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800068e:	42a0      	cmp	r0, r4
 8000690:	d010      	beq.n	80006b4 <HAL_GPIO_Init+0x180>
 8000692:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000696:	42a0      	cmp	r0, r4
 8000698:	d00e      	beq.n	80006b8 <HAL_GPIO_Init+0x184>
 800069a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800069e:	42a0      	cmp	r0, r4
 80006a0:	d00c      	beq.n	80006bc <HAL_GPIO_Init+0x188>
 80006a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80006a6:	42a0      	cmp	r0, r4
 80006a8:	f43f af48 	beq.w	800053c <HAL_GPIO_Init+0x8>
 80006ac:	2406      	movs	r4, #6
 80006ae:	e748      	b.n	8000542 <HAL_GPIO_Init+0xe>
 80006b0:	2401      	movs	r4, #1
 80006b2:	e746      	b.n	8000542 <HAL_GPIO_Init+0xe>
 80006b4:	2402      	movs	r4, #2
 80006b6:	e744      	b.n	8000542 <HAL_GPIO_Init+0xe>
 80006b8:	2403      	movs	r4, #3
 80006ba:	e742      	b.n	8000542 <HAL_GPIO_Init+0xe>
 80006bc:	2404      	movs	r4, #4
 80006be:	e740      	b.n	8000542 <HAL_GPIO_Init+0xe>
  }
}
 80006c0:	b003      	add	sp, #12
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	40010000 	.word	0x40010000
 80006c8:	40010400 	.word	0x40010400
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006d4:	b90a      	cbnz	r2, 80006da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80006d6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80006d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80006da:	6181      	str	r1, [r0, #24]
 80006dc:	4770      	bx	lr

080006de <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80006de:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80006e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80006e4:	d040      	beq.n	8000768 <HAL_PCD_EP_DB_Receive+0x8a>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80006e6:	6804      	ldr	r4, [r0, #0]
 80006e8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80006ec:	780d      	ldrb	r5, [r1, #0]
 80006ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80006f2:	4423      	add	r3, r4
 80006f4:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 80006f8:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80006fc:	698b      	ldr	r3, [r1, #24]
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d328      	bcc.n	8000754 <HAL_PCD_EP_DB_Receive+0x76>
    {
      ep->xfer_len -= count;
 8000702:	1b1b      	subs	r3, r3, r4
 8000704:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8000706:	698b      	ldr	r3, [r1, #24]
 8000708:	b97b      	cbnz	r3, 800072a <HAL_PCD_EP_DB_Receive+0x4c>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800070a:	6806      	ldr	r6, [r0, #0]
 800070c:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8000710:	b29b      	uxth	r3, r3
 8000712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800071a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800071e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000726:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800072a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800072e:	d00e      	beq.n	800074e <HAL_PCD_EP_DB_Receive+0x70>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000730:	6802      	ldr	r2, [r0, #0]
 8000732:	780d      	ldrb	r5, [r1, #0]
 8000734:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8000738:	b29b      	uxth	r3, r3
 800073a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800073e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000746:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800074a:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 800074e:	b924      	cbnz	r4, 800075a <HAL_PCD_EP_DB_Receive+0x7c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8000750:	4620      	mov	r0, r4
 8000752:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	618b      	str	r3, [r1, #24]
 8000758:	e7d5      	b.n	8000706 <HAL_PCD_EP_DB_Receive+0x28>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800075a:	4623      	mov	r3, r4
 800075c:	890a      	ldrh	r2, [r1, #8]
 800075e:	6949      	ldr	r1, [r1, #20]
 8000760:	6800      	ldr	r0, [r0, #0]
 8000762:	f002 fb7b 	bl	8002e5c <USB_ReadPMA>
 8000766:	e7f3      	b.n	8000750 <HAL_PCD_EP_DB_Receive+0x72>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000768:	6804      	ldr	r4, [r0, #0]
 800076a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800076e:	780d      	ldrb	r5, [r1, #0]
 8000770:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8000774:	4423      	add	r3, r4
 8000776:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 800077a:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 800077e:	698b      	ldr	r3, [r1, #24]
 8000780:	42a3      	cmp	r3, r4
 8000782:	d32e      	bcc.n	80007e2 <HAL_PCD_EP_DB_Receive+0x104>
      ep->xfer_len -= count;
 8000784:	1b1b      	subs	r3, r3, r4
 8000786:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8000788:	698b      	ldr	r3, [r1, #24]
 800078a:	b97b      	cbnz	r3, 80007ac <HAL_PCD_EP_DB_Receive+0xce>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800078c:	6806      	ldr	r6, [r0, #0]
 800078e:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8000792:	b29b      	uxth	r3, r3
 8000794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800079c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80007a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80007ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80007b0:	d10e      	bne.n	80007d0 <HAL_PCD_EP_DB_Receive+0xf2>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80007b2:	6802      	ldr	r2, [r0, #0]
 80007b4:	780d      	ldrb	r5, [r1, #0]
 80007b6:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80007c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007cc:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 80007d0:	2c00      	cmp	r4, #0
 80007d2:	d0bd      	beq.n	8000750 <HAL_PCD_EP_DB_Receive+0x72>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80007d4:	4623      	mov	r3, r4
 80007d6:	894a      	ldrh	r2, [r1, #10]
 80007d8:	6949      	ldr	r1, [r1, #20]
 80007da:	6800      	ldr	r0, [r0, #0]
 80007dc:	f002 fb3e 	bl	8002e5c <USB_ReadPMA>
 80007e0:	e7b6      	b.n	8000750 <HAL_PCD_EP_DB_Receive+0x72>
      ep->xfer_len = 0U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	618b      	str	r3, [r1, #24]
 80007e6:	e7cf      	b.n	8000788 <HAL_PCD_EP_DB_Receive+0xaa>

080007e8 <HAL_PCD_Init>:
  if (hpcd == NULL)
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d068      	beq.n	80008be <HAL_PCD_Init+0xd6>
{
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	b087      	sub	sp, #28
 80007f0:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007f2:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80007f6:	b13b      	cbz	r3, 8000808 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80007f8:	2303      	movs	r3, #3
 80007fa:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80007fe:	6820      	ldr	r0, [r4, #0]
 8000800:	f001 fc5b 	bl	80020ba <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000804:	2300      	movs	r3, #0
 8000806:	e01f      	b.n	8000848 <HAL_PCD_Init+0x60>
    hpcd->Lock = HAL_UNLOCKED;
 8000808:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800080c:	f003 faca 	bl	8003da4 <HAL_PCD_MspInit>
 8000810:	e7f2      	b.n	80007f8 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 8000812:	1c58      	adds	r0, r3, #1
 8000814:	0081      	lsls	r1, r0, #2
 8000816:	180d      	adds	r5, r1, r0
 8000818:	00ea      	lsls	r2, r5, #3
 800081a:	4422      	add	r2, r4
 800081c:	2501      	movs	r5, #1
 800081e:	7055      	strb	r5, [r2, #1]
    hpcd->IN_ep[i].num = i;
 8000820:	180d      	adds	r5, r1, r0
 8000822:	00ea      	lsls	r2, r5, #3
 8000824:	54a3      	strb	r3, [r4, r2]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000826:	009d      	lsls	r5, r3, #2
 8000828:	18ee      	adds	r6, r5, r3
 800082a:	00f2      	lsls	r2, r6, #3
 800082c:	4422      	add	r2, r4
 800082e:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000830:	4401      	add	r1, r0
 8000832:	00ce      	lsls	r6, r1, #3
 8000834:	4426      	add	r6, r4
 8000836:	2100      	movs	r1, #0
 8000838:	70f1      	strb	r1, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800083a:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800083c:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800083e:	442b      	add	r3, r5
 8000840:	00da      	lsls	r2, r3, #3
 8000842:	4422      	add	r2, r4
 8000844:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000846:	b2c3      	uxtb	r3, r0
 8000848:	6865      	ldr	r5, [r4, #4]
 800084a:	42ab      	cmp	r3, r5
 800084c:	d3e1      	bcc.n	8000812 <HAL_PCD_Init+0x2a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800084e:	2300      	movs	r3, #0
 8000850:	e015      	b.n	800087e <HAL_PCD_Init+0x96>
    hpcd->OUT_ep[i].is_in = 0U;
 8000852:	0098      	lsls	r0, r3, #2
 8000854:	18c1      	adds	r1, r0, r3
 8000856:	00ca      	lsls	r2, r1, #3
 8000858:	4422      	add	r2, r4
 800085a:	2100      	movs	r1, #0
 800085c:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000860:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000864:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000868:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800086c:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000870:	18c2      	adds	r2, r0, r3
 8000872:	00d0      	lsls	r0, r2, #3
 8000874:	4420      	add	r0, r4
 8000876:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800087a:	3301      	adds	r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	429d      	cmp	r5, r3
 8000880:	d8e7      	bhi.n	8000852 <HAL_PCD_Init+0x6a>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000882:	4625      	mov	r5, r4
 8000884:	f855 7b10 	ldr.w	r7, [r5], #16
 8000888:	466e      	mov	r6, sp
 800088a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800088e:	682b      	ldr	r3, [r5, #0]
 8000890:	6033      	str	r3, [r6, #0]
 8000892:	1d23      	adds	r3, r4, #4
 8000894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000896:	4638      	mov	r0, r7
 8000898:	f001 fc19 	bl	80020ce <USB_DevInit>
  hpcd->USB_Address = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80008a2:	2301      	movs	r3, #1
 80008a4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 80008a8:	69e3      	ldr	r3, [r4, #28]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d002      	beq.n	80008b4 <HAL_PCD_Init+0xcc>
  return HAL_OK;
 80008ae:	2000      	movs	r0, #0
}
 80008b0:	b007      	add	sp, #28
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80008b4:	4620      	mov	r0, r4
 80008b6:	f000 fdb7 	bl	8001428 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80008ba:	2000      	movs	r0, #0
 80008bc:	e7f8      	b.n	80008b0 <HAL_PCD_Init+0xc8>
    return HAL_ERROR;
 80008be:	2001      	movs	r0, #1
}
 80008c0:	4770      	bx	lr

080008c2 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 80008c2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d00e      	beq.n	80008e8 <HAL_PCD_Start+0x26>
{
 80008ca:	b510      	push	{r4, lr}
 80008cc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80008ce:	2301      	movs	r3, #1
 80008d0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80008d4:	6800      	ldr	r0, [r0, #0]
 80008d6:	f001 fbe7 	bl	80020a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80008da:	6820      	ldr	r0, [r4, #0]
 80008dc:	f001 ff0b 	bl	80026f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80008e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80008e8:	2002      	movs	r0, #2
}
 80008ea:	4770      	bx	lr

080008ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	4605      	mov	r5, r0
 80008f0:	460c      	mov	r4, r1
 80008f2:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80008f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80008f8:	f000 80b2 	beq.w	8000a60 <HAL_PCD_EP_DB_Transmit+0x174>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80008fc:	6802      	ldr	r2, [r0, #0]
 80008fe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000902:	7809      	ldrb	r1, [r1, #0]
 8000904:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000908:	4413      	add	r3, r2
 800090a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800090e:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8000912:	69a3      	ldr	r3, [r4, #24]
 8000914:	4293      	cmp	r3, r2
 8000916:	d92b      	bls.n	8000970 <HAL_PCD_EP_DB_Transmit+0x84>
    {
      ep->xfer_len -= TxByteNbre;
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800091c:	69a3      	ldr	r3, [r4, #24]
 800091e:	b353      	cbz	r3, 8000976 <HAL_PCD_EP_DB_Transmit+0x8a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000920:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000924:	d00d      	beq.n	8000942 <HAL_PCD_EP_DB_Transmit+0x56>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000926:	6828      	ldr	r0, [r5, #0]
 8000928:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800092c:	b29b      	uxth	r3, r3
 800092e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8000942:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000946:	2b01      	cmp	r3, #1
 8000948:	d02b      	beq.n	80009a2 <HAL_PCD_EP_DB_Transmit+0xb6>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800094a:	682a      	ldr	r2, [r5, #0]
 800094c:	7821      	ldrb	r1, [r4, #0]
 800094e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000952:	b29b      	uxth	r3, r3
 8000954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800095c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800096c:	2000      	movs	r0, #0
 800096e:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	61a3      	str	r3, [r4, #24]
 8000974:	e7d2      	b.n	800091c <HAL_PCD_EP_DB_Transmit+0x30>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000976:	4628      	mov	r0, r5
 8000978:	f003 fa48 	bl	8003e0c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800097c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000980:	d0e3      	beq.n	800094a <HAL_PCD_EP_DB_Transmit+0x5e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000982:	682a      	ldr	r2, [r5, #0]
 8000984:	7821      	ldrb	r1, [r4, #0]
 8000986:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800098a:	b29b      	uxth	r3, r3
 800098c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80009a0:	e7d3      	b.n	800094a <HAL_PCD_EP_DB_Transmit+0x5e>
        ep->xfer_buff += TxByteNbre;
 80009a2:	6963      	ldr	r3, [r4, #20]
 80009a4:	4413      	add	r3, r2
 80009a6:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 80009a8:	69e3      	ldr	r3, [r4, #28]
 80009aa:	4413      	add	r3, r2
 80009ac:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80009ae:	6a21      	ldr	r1, [r4, #32]
 80009b0:	6923      	ldr	r3, [r4, #16]
 80009b2:	4299      	cmp	r1, r3
 80009b4:	d31b      	bcc.n	80009ee <HAL_PCD_EP_DB_Transmit+0x102>
          ep->xfer_len_db -= len;
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80009ba:	7862      	ldrb	r2, [r4, #1]
 80009bc:	2a00      	cmp	r2, #0
 80009be:	d13b      	bne.n	8000a38 <HAL_PCD_EP_DB_Transmit+0x14c>
 80009c0:	682a      	ldr	r2, [r5, #0]
 80009c2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80009c6:	440a      	add	r2, r1
 80009c8:	7821      	ldrb	r1, [r4, #0]
 80009ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80009ce:	b9d3      	cbnz	r3, 8000a06 <HAL_PCD_EP_DB_Transmit+0x11a>
 80009d0:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80009d4:	b289      	uxth	r1, r1
 80009d6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80009da:	b289      	uxth	r1, r1
 80009dc:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80009e0:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80009e4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80009e8:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80009ec:	e026      	b.n	8000a3c <HAL_PCD_EP_DB_Transmit+0x150>
        else if (ep->xfer_len_db == 0U)
 80009ee:	b921      	cbnz	r1, 80009fa <HAL_PCD_EP_DB_Transmit+0x10e>
          ep->xfer_fill_db = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80009f6:	4613      	mov	r3, r2
 80009f8:	e7df      	b.n	80009ba <HAL_PCD_EP_DB_Transmit+0xce>
          ep->xfer_fill_db = 0U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8000a00:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8000a02:	460b      	mov	r3, r1
 8000a04:	e7d9      	b.n	80009ba <HAL_PCD_EP_DB_Transmit+0xce>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000a06:	2b3e      	cmp	r3, #62	; 0x3e
 8000a08:	d809      	bhi.n	8000a1e <HAL_PCD_EP_DB_Transmit+0x132>
 8000a0a:	0859      	lsrs	r1, r3, #1
 8000a0c:	f013 0f01 	tst.w	r3, #1
 8000a10:	d000      	beq.n	8000a14 <HAL_PCD_EP_DB_Transmit+0x128>
 8000a12:	3101      	adds	r1, #1
 8000a14:	0289      	lsls	r1, r1, #10
 8000a16:	b289      	uxth	r1, r1
 8000a18:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8000a1c:	e00e      	b.n	8000a3c <HAL_PCD_EP_DB_Transmit+0x150>
 8000a1e:	0959      	lsrs	r1, r3, #5
 8000a20:	f013 0f1f 	tst.w	r3, #31
 8000a24:	d100      	bne.n	8000a28 <HAL_PCD_EP_DB_Transmit+0x13c>
 8000a26:	3901      	subs	r1, #1
 8000a28:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8000a2c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000a30:	b289      	uxth	r1, r1
 8000a32:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8000a36:	e001      	b.n	8000a3c <HAL_PCD_EP_DB_Transmit+0x150>
 8000a38:	2a01      	cmp	r2, #1
 8000a3a:	d006      	beq.n	8000a4a <HAL_PCD_EP_DB_Transmit+0x15e>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	8922      	ldrh	r2, [r4, #8]
 8000a40:	6961      	ldr	r1, [r4, #20]
 8000a42:	6828      	ldr	r0, [r5, #0]
 8000a44:	f001 fe64 	bl	8002710 <USB_WritePMA>
 8000a48:	e77f      	b.n	800094a <HAL_PCD_EP_DB_Transmit+0x5e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000a4a:	682a      	ldr	r2, [r5, #0]
 8000a4c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000a50:	440a      	add	r2, r1
 8000a52:	7821      	ldrb	r1, [r4, #0]
 8000a54:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8000a58:	b299      	uxth	r1, r3
 8000a5a:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8000a5e:	e7ed      	b.n	8000a3c <HAL_PCD_EP_DB_Transmit+0x150>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000a60:	6802      	ldr	r2, [r0, #0]
 8000a62:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a66:	7809      	ldrb	r1, [r1, #0]
 8000a68:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000a72:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8000a76:	69a3      	ldr	r3, [r4, #24]
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d340      	bcc.n	8000afe <HAL_PCD_EP_DB_Transmit+0x212>
      ep->xfer_len -= TxByteNbre;
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8000a80:	69a3      	ldr	r3, [r4, #24]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d03e      	beq.n	8000b04 <HAL_PCD_EP_DB_Transmit+0x218>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000a86:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000a8a:	d10d      	bne.n	8000aa8 <HAL_PCD_EP_DB_Transmit+0x1bc>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000a8c:	6828      	ldr	r0, [r5, #0]
 8000a8e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000aa8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	f47f af4c 	bne.w	800094a <HAL_PCD_EP_DB_Transmit+0x5e>
        ep->xfer_buff += TxByteNbre;
 8000ab2:	6963      	ldr	r3, [r4, #20]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8000ab8:	69e3      	ldr	r3, [r4, #28]
 8000aba:	4413      	add	r3, r2
 8000abc:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8000abe:	6a21      	ldr	r1, [r4, #32]
 8000ac0:	6923      	ldr	r3, [r4, #16]
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	d335      	bcc.n	8000b32 <HAL_PCD_EP_DB_Transmit+0x246>
          ep->xfer_len_db -= len;
 8000ac6:	1ac9      	subs	r1, r1, r3
 8000ac8:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000aca:	682a      	ldr	r2, [r5, #0]
 8000acc:	7861      	ldrb	r1, [r4, #1]
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d154      	bne.n	8000b7c <HAL_PCD_EP_DB_Transmit+0x290>
 8000ad2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000ad6:	440a      	add	r2, r1
 8000ad8:	7821      	ldrb	r1, [r4, #0]
 8000ada:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8000ade:	bba3      	cbnz	r3, 8000b4a <HAL_PCD_EP_DB_Transmit+0x25e>
 8000ae0:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8000ae4:	b289      	uxth	r1, r1
 8000ae6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8000aea:	b289      	uxth	r1, r1
 8000aec:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8000af0:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8000af4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000af8:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8000afc:	e040      	b.n	8000b80 <HAL_PCD_EP_DB_Transmit+0x294>
      ep->xfer_len = 0U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61a3      	str	r3, [r4, #24]
 8000b02:	e7bd      	b.n	8000a80 <HAL_PCD_EP_DB_Transmit+0x194>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b04:	4628      	mov	r0, r5
 8000b06:	f003 f981 	bl	8003e0c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000b0a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000b0e:	f47f af1c 	bne.w	800094a <HAL_PCD_EP_DB_Transmit+0x5e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000b12:	682a      	ldr	r2, [r5, #0]
 8000b14:	7821      	ldrb	r1, [r4, #0]
 8000b16:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b30:	e70b      	b.n	800094a <HAL_PCD_EP_DB_Transmit+0x5e>
        else if (ep->xfer_len_db == 0U)
 8000b32:	b921      	cbnz	r1, 8000b3e <HAL_PCD_EP_DB_Transmit+0x252>
          ep->xfer_fill_db = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	e7c5      	b.n	8000aca <HAL_PCD_EP_DB_Transmit+0x1de>
          ep->xfer_len_db = 0U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8000b42:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8000b46:	460b      	mov	r3, r1
 8000b48:	e7bf      	b.n	8000aca <HAL_PCD_EP_DB_Transmit+0x1de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8000b4c:	d809      	bhi.n	8000b62 <HAL_PCD_EP_DB_Transmit+0x276>
 8000b4e:	0859      	lsrs	r1, r3, #1
 8000b50:	f013 0f01 	tst.w	r3, #1
 8000b54:	d000      	beq.n	8000b58 <HAL_PCD_EP_DB_Transmit+0x26c>
 8000b56:	3101      	adds	r1, #1
 8000b58:	0289      	lsls	r1, r1, #10
 8000b5a:	b289      	uxth	r1, r1
 8000b5c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8000b60:	e00e      	b.n	8000b80 <HAL_PCD_EP_DB_Transmit+0x294>
 8000b62:	0959      	lsrs	r1, r3, #5
 8000b64:	f013 0f1f 	tst.w	r3, #31
 8000b68:	d100      	bne.n	8000b6c <HAL_PCD_EP_DB_Transmit+0x280>
 8000b6a:	3901      	subs	r1, #1
 8000b6c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8000b70:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000b74:	b289      	uxth	r1, r1
 8000b76:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8000b7a:	e001      	b.n	8000b80 <HAL_PCD_EP_DB_Transmit+0x294>
 8000b7c:	2901      	cmp	r1, #1
 8000b7e:	d006      	beq.n	8000b8e <HAL_PCD_EP_DB_Transmit+0x2a2>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	8962      	ldrh	r2, [r4, #10]
 8000b84:	6961      	ldr	r1, [r4, #20]
 8000b86:	6828      	ldr	r0, [r5, #0]
 8000b88:	f001 fdc2 	bl	8002710 <USB_WritePMA>
 8000b8c:	e6dd      	b.n	800094a <HAL_PCD_EP_DB_Transmit+0x5e>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000b8e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000b92:	440a      	add	r2, r1
 8000b94:	7821      	ldrb	r1, [r4, #0]
 8000b96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8000ba0:	e7ee      	b.n	8000b80 <HAL_PCD_EP_DB_Transmit+0x294>

08000ba2 <PCD_EP_ISR_Handler>:
{
 8000ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ba6:	4604      	mov	r4, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000bae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000bb2:	f000 81eb 	beq.w	8000f8c <PCD_EP_ISR_Handler+0x3ea>
    wIstr = hpcd->Instance->ISTR;
 8000bb6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000bba:	b29b      	uxth	r3, r3
    if (epindex == 0U)
 8000bbc:	f013 050f 	ands.w	r5, r3, #15
 8000bc0:	f040 80c7 	bne.w	8000d52 <PCD_EP_ISR_Handler+0x1b0>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000bc4:	f013 0f10 	tst.w	r3, #16
 8000bc8:	d056      	beq.n	8000c78 <PCD_EP_ISR_Handler+0xd6>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000bca:	8803      	ldrh	r3, [r0, #0]
 8000bcc:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000bce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8000bd2:	f040 8085 	bne.w	8000ce0 <PCD_EP_ISR_Handler+0x13e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000bd6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000bda:	d0e5      	beq.n	8000ba8 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bdc:	8803      	ldrh	r3, [r0, #0]
 8000bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000be2:	051b      	lsls	r3, r3, #20
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bea:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000bf2:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bfa:	4403      	add	r3, r0
 8000bfc:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c04:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000c08:	b18b      	cbz	r3, 8000c2e <PCD_EP_ISR_Handler+0x8c>
 8000c0a:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8000c0e:	b171      	cbz	r1, 8000c2e <PCD_EP_ISR_Handler+0x8c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000c10:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000c14:	f002 f922 	bl	8002e5c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000c18:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8000c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8000c20:	4413      	add	r3, r2
 8000c22:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000c26:	2100      	movs	r1, #0
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f003 f8e3 	bl	8003df4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8000c34:	4413      	add	r3, r2
 8000c36:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d170      	bne.n	8000d20 <PCD_EP_ISR_Handler+0x17e>
 8000c3e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c42:	b292      	uxth	r2, r2
 8000c44:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8000c4e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c56:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c5a:	6822      	ldr	r2, [r4, #0]
 8000c5c:	8813      	ldrh	r3, [r2, #0]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c68:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	8013      	strh	r3, [r2, #0]
 8000c76:	e797      	b.n	8000ba8 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c78:	8803      	ldrh	r3, [r0, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c90:	6822      	ldr	r2, [r4, #0]
 8000c92:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000c96:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000c9a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ca8:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000caa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000cac:	4413      	add	r3, r2
 8000cae:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f003 f8aa 	bl	8003e0c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000cb8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f43f af73 	beq.w	8000ba8 <PCD_EP_ISR_Handler+0x6>
 8000cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f af6f 	bne.w	8000ba8 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000cca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000cce:	6822      	ldr	r2, [r4, #0]
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000cde:	e763      	b.n	8000ba8 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ce0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ce4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cec:	4403      	add	r3, r0
 8000cee:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cf6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000cfa:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000cfe:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000d02:	f002 f8ab 	bl	8002e5c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d06:	6822      	ldr	r2, [r4, #0]
 8000d08:	8813      	ldrh	r3, [r2, #0]
 8000d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d0e:	051b      	lsls	r3, r3, #20
 8000d10:	0d1b      	lsrs	r3, r3, #20
 8000d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d16:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f003 f863 	bl	8003de4 <HAL_PCD_SetupStageCallback>
 8000d1e:	e743      	b.n	8000ba8 <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d20:	2a3e      	cmp	r2, #62	; 0x3e
 8000d22:	d809      	bhi.n	8000d38 <PCD_EP_ISR_Handler+0x196>
 8000d24:	0851      	lsrs	r1, r2, #1
 8000d26:	f012 0f01 	tst.w	r2, #1
 8000d2a:	d000      	beq.n	8000d2e <PCD_EP_ISR_Handler+0x18c>
 8000d2c:	3101      	adds	r1, #1
 8000d2e:	0289      	lsls	r1, r1, #10
 8000d30:	b289      	uxth	r1, r1
 8000d32:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8000d36:	e790      	b.n	8000c5a <PCD_EP_ISR_Handler+0xb8>
 8000d38:	0951      	lsrs	r1, r2, #5
 8000d3a:	f012 0f1f 	tst.w	r2, #31
 8000d3e:	d100      	bne.n	8000d42 <PCD_EP_ISR_Handler+0x1a0>
 8000d40:	3901      	subs	r1, #1
 8000d42:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8000d46:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8000d50:	e783      	b.n	8000c5a <PCD_EP_ISR_Handler+0xb8>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000d52:	f830 6025 	ldrh.w	r6, [r0, r5, lsl #2]
 8000d56:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d58:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8000d5c:	d147      	bne.n	8000dee <PCD_EP_ISR_Handler+0x24c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000d5e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8000d62:	f43f af21 	beq.w	8000ba8 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8000d66:	1c68      	adds	r0, r5, #1
 8000d68:	0082      	lsls	r2, r0, #2
 8000d6a:	1813      	adds	r3, r2, r0
 8000d6c:	00d9      	lsls	r1, r3, #3
 8000d6e:	4421      	add	r1, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d70:	6827      	ldr	r7, [r4, #0]
 8000d72:	f837 3025 	ldrh.w	r3, [r7, r5, lsl #2]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f827 3025 	strh.w	r3, [r7, r5, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8000d8e:	78cb      	ldrb	r3, [r1, #3]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	f000 80de 	beq.w	8000f52 <PCD_EP_ISR_Handler+0x3b0>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d96:	6820      	ldr	r0, [r4, #0]
 8000d98:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d9c:	1c6a      	adds	r2, r5, #1
 8000d9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000da2:	00d6      	lsls	r6, r2, #3
 8000da4:	5da2      	ldrb	r2, [r4, r6]
 8000da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000daa:	4403      	add	r3, r0
 8000dac:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8000db4:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8000db8:	00f2      	lsls	r2, r6, #3
 8000dba:	4616      	mov	r6, r2
 8000dbc:	4422      	add	r2, r4
 8000dbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	f240 80cf 	bls.w	8000f64 <PCD_EP_ISR_Handler+0x3c2>
            ep->xfer_len -= TxByteNbre;
 8000dc6:	4426      	add	r6, r4
 8000dc8:	1ad2      	subs	r2, r2, r3
 8000dca:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000dcc:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8000dd0:	00f2      	lsls	r2, r6, #3
 8000dd2:	4422      	add	r2, r4
 8000dd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 80cb 	bne.w	8000f72 <PCD_EP_ISR_Handler+0x3d0>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ddc:	3501      	adds	r5, #1
 8000dde:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000de2:	00eb      	lsls	r3, r5, #3
 8000de4:	5ce1      	ldrb	r1, [r4, r3]
 8000de6:	4620      	mov	r0, r4
 8000de8:	f003 f810 	bl	8003e0c <HAL_PCD_DataInStageCallback>
 8000dec:	e6dc      	b.n	8000ba8 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000dee:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000df6:	051b      	lsls	r3, r3, #20
 8000df8:	0d1b      	lsrs	r3, r3, #20
 8000dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfe:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8000e02:	00ab      	lsls	r3, r5, #2
 8000e04:	195a      	adds	r2, r3, r5
 8000e06:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000e0a:	4642      	mov	r2, r8
 8000e0c:	f508 78b4 	add.w	r8, r8, #360	; 0x168
 8000e10:	44a0      	add	r8, r4
        if (ep->doublebuffer == 0U)
 8000e12:	4422      	add	r2, r4
 8000e14:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
 8000e18:	bbeb      	cbnz	r3, 8000e96 <PCD_EP_ISR_Handler+0x2f4>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e1a:	6820      	ldr	r0, [r4, #0]
 8000e1c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e20:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000e24:	00ca      	lsls	r2, r1, #3
 8000e26:	4611      	mov	r1, r2
 8000e28:	4422      	add	r2, r4
 8000e2a:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8000e2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e32:	4403      	add	r3, r0
 8000e34:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8000e38:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8000e3c:	bb17      	cbnz	r7, 8000e84 <PCD_EP_ISR_Handler+0x2e2>
        ep->xfer_count += count;
 8000e3e:	00aa      	lsls	r2, r5, #2
 8000e40:	442a      	add	r2, r5
 8000e42:	00d3      	lsls	r3, r2, #3
 8000e44:	4423      	add	r3, r4
 8000e46:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000e4a:	443a      	add	r2, r7
 8000e4c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8000e50:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000e54:	443a      	add	r2, r7
 8000e56:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e5a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000e5e:	b13b      	cbz	r3, 8000e70 <PCD_EP_ISR_Handler+0x2ce>
 8000e60:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000e64:	00d3      	lsls	r3, r2, #3
 8000e66:	4423      	add	r3, r4
 8000e68:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8000e6c:	429f      	cmp	r7, r3
 8000e6e:	d26b      	bcs.n	8000f48 <PCD_EP_ISR_Handler+0x3a6>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000e70:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000e74:	00d3      	lsls	r3, r2, #3
 8000e76:	4423      	add	r3, r4
 8000e78:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f002 ffb9 	bl	8003df4 <HAL_PCD_DataOutStageCallback>
 8000e82:	e76c      	b.n	8000d5e <PCD_EP_ISR_Handler+0x1bc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000e84:	4421      	add	r1, r4
 8000e86:	463b      	mov	r3, r7
 8000e88:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8000e8c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000e90:	f001 ffe4 	bl	8002e5c <USB_ReadPMA>
 8000e94:	e7d3      	b.n	8000e3e <PCD_EP_ISR_Handler+0x29c>
          if (ep->type == EP_TYPE_BULK)
 8000e96:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000e9a:	00d3      	lsls	r3, r2, #3
 8000e9c:	4423      	add	r3, r4
 8000e9e:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d032      	beq.n	8000f0c <PCD_EP_ISR_Handler+0x36a>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000ea6:	6821      	ldr	r1, [r4, #0]
 8000ea8:	00ab      	lsls	r3, r5, #2
 8000eaa:	442b      	add	r3, r5
 8000eac:	00da      	lsls	r2, r3, #3
 8000eae:	4422      	add	r2, r4
 8000eb0:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8000eb4:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000eca:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000ece:	6820      	ldr	r0, [r4, #0]
 8000ed0:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8000ed4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ed8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8000edc:	d01d      	beq.n	8000f1a <PCD_EP_ISR_Handler+0x378>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ede:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000ee2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000ee6:	4403      	add	r3, r0
 8000ee8:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8000eec:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8000ef0:	2f00      	cmp	r7, #0
 8000ef2:	d0a4      	beq.n	8000e3e <PCD_EP_ISR_Handler+0x29c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ef4:	00ab      	lsls	r3, r5, #2
 8000ef6:	442b      	add	r3, r5
 8000ef8:	00d9      	lsls	r1, r3, #3
 8000efa:	4421      	add	r1, r4
 8000efc:	463b      	mov	r3, r7
 8000efe:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8000f02:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000f06:	f001 ffa9 	bl	8002e5c <USB_ReadPMA>
 8000f0a:	e798      	b.n	8000e3e <PCD_EP_ISR_Handler+0x29c>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8000f0c:	4632      	mov	r2, r6
 8000f0e:	4641      	mov	r1, r8
 8000f10:	4620      	mov	r0, r4
 8000f12:	f7ff fbe4 	bl	80006de <HAL_PCD_EP_DB_Receive>
 8000f16:	4607      	mov	r7, r0
 8000f18:	e791      	b.n	8000e3e <PCD_EP_ISR_Handler+0x29c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f1a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000f22:	4403      	add	r3, r0
 8000f24:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8000f28:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8000f2c:	2f00      	cmp	r7, #0
 8000f2e:	d086      	beq.n	8000e3e <PCD_EP_ISR_Handler+0x29c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f30:	00ab      	lsls	r3, r5, #2
 8000f32:	442b      	add	r3, r5
 8000f34:	00d9      	lsls	r1, r3, #3
 8000f36:	4421      	add	r1, r4
 8000f38:	463b      	mov	r3, r7
 8000f3a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8000f3e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000f42:	f001 ff8b 	bl	8002e5c <USB_ReadPMA>
 8000f46:	e77a      	b.n	8000e3e <PCD_EP_ISR_Handler+0x29c>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8000f48:	4641      	mov	r1, r8
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	f001 fbf5 	bl	800273a <USB_EPStartXfer>
 8000f50:	e705      	b.n	8000d5e <PCD_EP_ISR_Handler+0x1bc>
        if ((ep->type != EP_TYPE_BULK) ||
 8000f52:	f416 7f80 	tst.w	r6, #256	; 0x100
 8000f56:	f43f af1e 	beq.w	8000d96 <PCD_EP_ISR_Handler+0x1f4>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8000f5a:	4632      	mov	r2, r6
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f7ff fcc5 	bl	80008ec <HAL_PCD_EP_DB_Transmit>
 8000f62:	e621      	b.n	8000ba8 <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 8000f64:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8000f68:	00f2      	lsls	r2, r6, #3
 8000f6a:	4422      	add	r2, r4
 8000f6c:	2600      	movs	r6, #0
 8000f6e:	6416      	str	r6, [r2, #64]	; 0x40
 8000f70:	e72c      	b.n	8000dcc <PCD_EP_ISR_Handler+0x22a>
            ep->xfer_buff += TxByteNbre;
 8000f72:	00ae      	lsls	r6, r5, #2
 8000f74:	1977      	adds	r7, r6, r5
 8000f76:	00fa      	lsls	r2, r7, #3
 8000f78:	4422      	add	r2, r4
 8000f7a:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 8000f7c:	441f      	add	r7, r3
 8000f7e:	63d7      	str	r7, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000f80:	6c55      	ldr	r5, [r2, #68]	; 0x44
 8000f82:	442b      	add	r3, r5
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f86:	f001 fbd8 	bl	800273a <USB_EPStartXfer>
 8000f8a:	e60d      	b.n	8000ba8 <PCD_EP_ISR_Handler+0x6>
}
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f92 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000f92:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d00d      	beq.n	8000fb6 <HAL_PCD_SetAddress+0x24>
{
 8000f9a:	b510      	push	{r4, lr}
 8000f9c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000fa4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fa8:	6800      	ldr	r0, [r0, #0]
 8000faa:	f001 fb9e 	bl	80026ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8000fb4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000fb6:	2002      	movs	r0, #2
}
 8000fb8:	4770      	bx	lr

08000fba <HAL_PCD_IRQHandler>:
{
 8000fba:	b510      	push	{r4, lr}
 8000fbc:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000fbe:	6800      	ldr	r0, [r0, #0]
 8000fc0:	f001 fba1 	bl	8002706 <USB_ReadInterrupts>
 8000fc4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8000fc8:	f040 8098 	bne.w	80010fc <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000fcc:	6820      	ldr	r0, [r4, #0]
 8000fce:	f001 fb9a 	bl	8002706 <USB_ReadInterrupts>
 8000fd2:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8000fd6:	f040 8095 	bne.w	8001104 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	f001 fb93 	bl	8002706 <USB_ReadInterrupts>
 8000fe0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8000fe4:	d008      	beq.n	8000ff8 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	f001 fb84 	bl	8002706 <USB_ReadInterrupts>
 8000ffe:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001002:	d008      	beq.n	8001016 <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001004:	6822      	ldr	r2, [r4, #0]
 8001006:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800100a:	b29b      	uxth	r3, r3
 800100c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001010:	b29b      	uxth	r3, r3
 8001012:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001016:	6820      	ldr	r0, [r4, #0]
 8001018:	f001 fb75 	bl	8002706 <USB_ReadInterrupts>
 800101c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001020:	d021      	beq.n	8001066 <HAL_PCD_IRQHandler+0xac>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001022:	6822      	ldr	r2, [r4, #0]
 8001024:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001028:	b29b      	uxth	r3, r3
 800102a:	f023 0304 	bic.w	r3, r3, #4
 800102e:	b29b      	uxth	r3, r3
 8001030:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001034:	6822      	ldr	r2, [r4, #0]
 8001036:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800103a:	b29b      	uxth	r3, r3
 800103c:	f023 0308 	bic.w	r3, r3, #8
 8001040:	b29b      	uxth	r3, r3
 8001042:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001046:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d06b      	beq.n	8001126 <HAL_PCD_IRQHandler+0x16c>
    HAL_PCD_ResumeCallback(hpcd);
 800104e:	4620      	mov	r0, r4
 8001050:	f002 ff0e 	bl	8003e70 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800105a:	b29b      	uxth	r3, r3
 800105c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001060:	b29b      	uxth	r3, r3
 8001062:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001066:	6820      	ldr	r0, [r4, #0]
 8001068:	f001 fb4d 	bl	8002706 <USB_ReadInterrupts>
 800106c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001070:	d160      	bne.n	8001134 <HAL_PCD_IRQHandler+0x17a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001072:	6820      	ldr	r0, [r4, #0]
 8001074:	f001 fb47 	bl	8002706 <USB_ReadInterrupts>
 8001078:	f010 0f80 	tst.w	r0, #128	; 0x80
 800107c:	d028      	beq.n	80010d0 <HAL_PCD_IRQHandler+0x116>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001084:	b29b      	uxth	r3, r3
 8001086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800108a:	b29b      	uxth	r3, r3
 800108c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001090:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d168      	bne.n	800116a <HAL_PCD_IRQHandler+0x1b0>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001098:	6822      	ldr	r2, [r4, #0]
 800109a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010a6:	6822      	ldr	r2, [r4, #0]
 80010a8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 80010b4:	2101      	movs	r1, #1
 80010b6:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80010c6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80010ca:	4620      	mov	r0, r4
 80010cc:	f002 ff88 	bl	8003fe0 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010d0:	6820      	ldr	r0, [r4, #0]
 80010d2:	f001 fb18 	bl	8002706 <USB_ReadInterrupts>
 80010d6:	f410 7f00 	tst.w	r0, #512	; 0x200
 80010da:	d14a      	bne.n	8001172 <HAL_PCD_IRQHandler+0x1b8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010dc:	6820      	ldr	r0, [r4, #0]
 80010de:	f001 fb12 	bl	8002706 <USB_ReadInterrupts>
 80010e2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80010e6:	d008      	beq.n	80010fa <HAL_PCD_IRQHandler+0x140>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010e8:	6822      	ldr	r2, [r4, #0]
 80010ea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80010fa:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff fd50 	bl	8000ba2 <PCD_EP_ISR_Handler>
 8001102:	e763      	b.n	8000fcc <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001104:	6822      	ldr	r2, [r4, #0]
 8001106:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800110a:	b29b      	uxth	r3, r3
 800110c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001110:	b29b      	uxth	r3, r3
 8001112:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001116:	4620      	mov	r0, r4
 8001118:	f002 fe89 	bl	8003e2e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800111c:	2100      	movs	r1, #0
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ff37 	bl	8000f92 <HAL_PCD_SetAddress>
 8001124:	e759      	b.n	8000fda <HAL_PCD_IRQHandler+0x20>
      hpcd->LPM_State = LPM_L0;
 8001126:	2100      	movs	r1, #0
 8001128:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800112c:	4620      	mov	r0, r4
 800112e:	f002 ff57 	bl	8003fe0 <HAL_PCDEx_LPM_Callback>
 8001132:	e78c      	b.n	800104e <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001148:	b29b      	uxth	r3, r3
 800114a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800114e:	b29b      	uxth	r3, r3
 8001150:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001154:	6822      	ldr	r2, [r4, #0]
 8001156:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001162:	4620      	mov	r0, r4
 8001164:	f002 fe74 	bl	8003e50 <HAL_PCD_SuspendCallback>
 8001168:	e783      	b.n	8001072 <HAL_PCD_IRQHandler+0xb8>
      HAL_PCD_SuspendCallback(hpcd);
 800116a:	4620      	mov	r0, r4
 800116c:	f002 fe70 	bl	8003e50 <HAL_PCD_SuspendCallback>
 8001170:	e7ae      	b.n	80010d0 <HAL_PCD_IRQHandler+0x116>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001178:	b29b      	uxth	r3, r3
 800117a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800117e:	b29b      	uxth	r3, r3
 8001180:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001184:	4620      	mov	r0, r4
 8001186:	f002 fe4c 	bl	8003e22 <HAL_PCD_SOFCallback>
 800118a:	e7a7      	b.n	80010dc <HAL_PCD_IRQHandler+0x122>

0800118c <HAL_PCD_EP_Open>:
{
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800118e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001192:	d126      	bne.n	80011e2 <HAL_PCD_EP_Open+0x56>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001194:	f001 0507 	and.w	r5, r1, #7
 8001198:	00ae      	lsls	r6, r5, #2
 800119a:	1977      	adds	r7, r6, r5
 800119c:	00fc      	lsls	r4, r7, #3
 800119e:	4627      	mov	r7, r4
 80011a0:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 80011a4:	4404      	add	r4, r0
    ep->is_in = 0U;
 80011a6:	4407      	add	r7, r0
 80011a8:	2500      	movs	r5, #0
 80011aa:	f887 5169 	strb.w	r5, [r7, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80011ae:	f001 0107 	and.w	r1, r1, #7
 80011b2:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80011b4:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 80011b6:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 80011b8:	7862      	ldrb	r2, [r4, #1]
 80011ba:	b102      	cbz	r2, 80011be <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80011bc:	81e1      	strh	r1, [r4, #14]
  if (ep_type == EP_TYPE_BULK)
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d019      	beq.n	80011f6 <HAL_PCD_EP_Open+0x6a>
  __HAL_LOCK(hpcd);
 80011c2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d018      	beq.n	80011fc <HAL_PCD_EP_Open+0x70>
 80011ca:	4605      	mov	r5, r0
 80011cc:	2301      	movs	r3, #1
 80011ce:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011d2:	4621      	mov	r1, r4
 80011d4:	6800      	ldr	r0, [r0, #0]
 80011d6:	f000 ff8e 	bl	80020f6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011da:	2000      	movs	r0, #0
 80011dc:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80011e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011e2:	f001 0507 	and.w	r5, r1, #7
 80011e6:	1c6e      	adds	r6, r5, #1
 80011e8:	00b5      	lsls	r5, r6, #2
 80011ea:	19af      	adds	r7, r5, r6
 80011ec:	00fc      	lsls	r4, r7, #3
 80011ee:	4404      	add	r4, r0
    ep->is_in = 1U;
 80011f0:	2501      	movs	r5, #1
 80011f2:	7065      	strb	r5, [r4, #1]
 80011f4:	e7db      	b.n	80011ae <HAL_PCD_EP_Open+0x22>
    ep->data_pid_start = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	7123      	strb	r3, [r4, #4]
 80011fa:	e7e2      	b.n	80011c2 <HAL_PCD_EP_Open+0x36>
  __HAL_LOCK(hpcd);
 80011fc:	2002      	movs	r0, #2
 80011fe:	e7ef      	b.n	80011e0 <HAL_PCD_EP_Open+0x54>

08001200 <HAL_PCD_EP_Close>:
{
 8001200:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001202:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001206:	d120      	bne.n	800124a <HAL_PCD_EP_Close+0x4a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001208:	f001 0407 	and.w	r4, r1, #7
 800120c:	00a2      	lsls	r2, r4, #2
 800120e:	1915      	adds	r5, r2, r4
 8001210:	00eb      	lsls	r3, r5, #3
 8001212:	461d      	mov	r5, r3
 8001214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001218:	4403      	add	r3, r0
    ep->is_in = 0U;
 800121a:	462c      	mov	r4, r5
 800121c:	4404      	add	r4, r0
 800121e:	2200      	movs	r2, #0
 8001220:	f884 2169 	strb.w	r2, [r4, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001224:	f001 0107 	and.w	r1, r1, #7
 8001228:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 800122a:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800122e:	2a01      	cmp	r2, #1
 8001230:	d015      	beq.n	800125e <HAL_PCD_EP_Close+0x5e>
 8001232:	4604      	mov	r4, r0
 8001234:	2201      	movs	r2, #1
 8001236:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800123a:	4619      	mov	r1, r3
 800123c:	6800      	ldr	r0, [r0, #0]
 800123e:	f001 f8f3 	bl	8002428 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001242:	2000      	movs	r0, #0
 8001244:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001248:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800124a:	f001 0207 	and.w	r2, r1, #7
 800124e:	1c54      	adds	r4, r2, #1
 8001250:	00a2      	lsls	r2, r4, #2
 8001252:	1915      	adds	r5, r2, r4
 8001254:	00eb      	lsls	r3, r5, #3
 8001256:	4403      	add	r3, r0
    ep->is_in = 1U;
 8001258:	2201      	movs	r2, #1
 800125a:	705a      	strb	r2, [r3, #1]
 800125c:	e7e2      	b.n	8001224 <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 800125e:	2002      	movs	r0, #2
 8001260:	e7f2      	b.n	8001248 <HAL_PCD_EP_Close+0x48>

08001262 <HAL_PCD_EP_Receive>:
{
 8001262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001264:	f001 0507 	and.w	r5, r1, #7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001268:	00ae      	lsls	r6, r5, #2
 800126a:	1971      	adds	r1, r6, r5
 800126c:	00cc      	lsls	r4, r1, #3
 800126e:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8001272:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 8001274:	1977      	adds	r7, r6, r5
 8001276:	00fc      	lsls	r4, r7, #3
 8001278:	4404      	add	r4, r0
 800127a:	f8c4 217c 	str.w	r2, [r4, #380]	; 0x17c
  ep->xfer_len = len;
 800127e:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  ep->xfer_count = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8001288:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800128c:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001290:	b125      	cbz	r5, 800129c <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001292:	6800      	ldr	r0, [r0, #0]
 8001294:	f001 fa51 	bl	800273a <USB_EPStartXfer>
}
 8001298:	2000      	movs	r0, #0
 800129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800129c:	6800      	ldr	r0, [r0, #0]
 800129e:	f001 fa4c 	bl	800273a <USB_EPStartXfer>
 80012a2:	e7f9      	b.n	8001298 <HAL_PCD_EP_Receive+0x36>

080012a4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80012a4:	f001 0107 	and.w	r1, r1, #7
 80012a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80012ac:	00cb      	lsls	r3, r1, #3
 80012ae:	4418      	add	r0, r3
}
 80012b0:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 80012b4:	4770      	bx	lr

080012b6 <HAL_PCD_EP_Transmit>:
{
 80012b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b8:	f001 0607 	and.w	r6, r1, #7
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012bc:	1c77      	adds	r7, r6, #1
 80012be:	00bd      	lsls	r5, r7, #2
 80012c0:	19ec      	adds	r4, r5, r7
 80012c2:	00e1      	lsls	r1, r4, #3
 80012c4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80012c6:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 80012ca:	44b4      	add	ip, r6
 80012cc:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80012d0:	4404      	add	r4, r0
 80012d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80012d4:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80012d6:	2201      	movs	r2, #1
 80012d8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_len_db = len;
 80012dc:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	6463      	str	r3, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80012e2:	19ec      	adds	r4, r5, r7
 80012e4:	00e3      	lsls	r3, r4, #3
 80012e6:	461c      	mov	r4, r3
 80012e8:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012ea:	5506      	strb	r6, [r0, r4]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012ec:	b126      	cbz	r6, 80012f8 <HAL_PCD_EP_Transmit+0x42>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012ee:	6800      	ldr	r0, [r0, #0]
 80012f0:	f001 fa23 	bl	800273a <USB_EPStartXfer>
}
 80012f4:	2000      	movs	r0, #0
 80012f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012f8:	6800      	ldr	r0, [r0, #0]
 80012fa:	f001 fa1e 	bl	800273a <USB_EPStartXfer>
 80012fe:	e7f9      	b.n	80012f4 <HAL_PCD_EP_Transmit+0x3e>

08001300 <HAL_PCD_EP_SetStall>:
{
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001306:	6843      	ldr	r3, [r0, #4]
 8001308:	429d      	cmp	r5, r3
 800130a:	d830      	bhi.n	800136e <HAL_PCD_EP_SetStall+0x6e>
  if ((0x80U & ep_addr) == 0x80U)
 800130c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001310:	d11f      	bne.n	8001352 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8001312:	008a      	lsls	r2, r1, #2
 8001314:	1854      	adds	r4, r2, r1
 8001316:	00e3      	lsls	r3, r4, #3
 8001318:	461c      	mov	r4, r3
 800131a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800131e:	4403      	add	r3, r0
    ep->is_in = 0U;
 8001320:	4622      	mov	r2, r4
 8001322:	4402      	add	r2, r0
 8001324:	2100      	movs	r1, #0
 8001326:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 800132a:	2201      	movs	r2, #1
 800132c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800132e:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001330:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8001334:	2a01      	cmp	r2, #1
 8001336:	d01c      	beq.n	8001372 <HAL_PCD_EP_SetStall+0x72>
 8001338:	4604      	mov	r4, r0
 800133a:	2201      	movs	r2, #1
 800133c:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001340:	4619      	mov	r1, r3
 8001342:	6800      	ldr	r0, [r0, #0]
 8001344:	f001 f95b 	bl	80025fe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001348:	b15d      	cbz	r5, 8001362 <HAL_PCD_EP_SetStall+0x62>
  __HAL_UNLOCK(hpcd);
 800134a:	2000      	movs	r0, #0
 800134c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 8001350:	e00e      	b.n	8001370 <HAL_PCD_EP_SetStall+0x70>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001352:	1c6c      	adds	r4, r5, #1
 8001354:	00a2      	lsls	r2, r4, #2
 8001356:	1911      	adds	r1, r2, r4
 8001358:	00cb      	lsls	r3, r1, #3
 800135a:	4403      	add	r3, r0
    ep->is_in = 1U;
 800135c:	2201      	movs	r2, #1
 800135e:	705a      	strb	r2, [r3, #1]
 8001360:	e7e3      	b.n	800132a <HAL_PCD_EP_SetStall+0x2a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001362:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001366:	6820      	ldr	r0, [r4, #0]
 8001368:	f001 f9d0 	bl	800270c <USB_EP0_OutStart>
 800136c:	e7ed      	b.n	800134a <HAL_PCD_EP_SetStall+0x4a>
    return HAL_ERROR;
 800136e:	2001      	movs	r0, #1
}
 8001370:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001372:	2002      	movs	r0, #2
 8001374:	e7fc      	b.n	8001370 <HAL_PCD_EP_SetStall+0x70>

08001376 <HAL_PCD_EP_ClrStall>:
{
 8001376:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001378:	f001 020f 	and.w	r2, r1, #15
 800137c:	6843      	ldr	r3, [r0, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d82f      	bhi.n	80013e2 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001382:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001386:	d122      	bne.n	80013ce <HAL_PCD_EP_ClrStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001388:	f001 0407 	and.w	r4, r1, #7
 800138c:	00a3      	lsls	r3, r4, #2
 800138e:	191d      	adds	r5, r3, r4
 8001390:	00ea      	lsls	r2, r5, #3
 8001392:	4615      	mov	r5, r2
 8001394:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8001398:	4402      	add	r2, r0
    ep->is_in = 0U;
 800139a:	462c      	mov	r4, r5
 800139c:	4404      	add	r4, r0
 800139e:	2300      	movs	r3, #0
 80013a0:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->is_stall = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013a8:	f001 0307 	and.w	r3, r1, #7
 80013ac:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 80013ae:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d017      	beq.n	80013e6 <HAL_PCD_EP_ClrStall+0x70>
 80013b6:	4604      	mov	r4, r0
 80013b8:	2301      	movs	r3, #1
 80013ba:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013be:	4611      	mov	r1, r2
 80013c0:	6800      	ldr	r0, [r0, #0]
 80013c2:	f001 f941 	bl	8002648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 80013cc:	e00a      	b.n	80013e4 <HAL_PCD_EP_ClrStall+0x6e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ce:	f001 0307 	and.w	r3, r1, #7
 80013d2:	1c5c      	adds	r4, r3, #1
 80013d4:	00a3      	lsls	r3, r4, #2
 80013d6:	191d      	adds	r5, r3, r4
 80013d8:	00ea      	lsls	r2, r5, #3
 80013da:	4402      	add	r2, r0
    ep->is_in = 1U;
 80013dc:	2301      	movs	r3, #1
 80013de:	7053      	strb	r3, [r2, #1]
 80013e0:	e7e0      	b.n	80013a4 <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
}
 80013e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80013e6:	2002      	movs	r0, #2
 80013e8:	e7fc      	b.n	80013e4 <HAL_PCD_EP_ClrStall+0x6e>

080013ea <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80013ea:	b410      	push	{r4}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80013ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80013f0:	d010      	beq.n	8001414 <HAL_PCDEx_PMAConfig+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	f001 0107 	and.w	r1, r1, #7
 80013f6:	3101      	adds	r1, #1
 80013f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80013fc:	00cc      	lsls	r4, r1, #3
 80013fe:	4420      	add	r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001400:	b17a      	cbz	r2, 8001422 <HAL_PCDEx_PMAConfig+0x38>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001402:	2201      	movs	r2, #1
 8001404:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001406:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	8143      	strh	r3, [r0, #10]
  }

  return HAL_OK;
}
 800140c:	2000      	movs	r0, #0
 800140e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001412:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001414:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001418:	00cc      	lsls	r4, r1, #3
 800141a:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 800141e:	4420      	add	r0, r4
 8001420:	e7ee      	b.n	8001400 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 0U;
 8001422:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001424:	80c3      	strh	r3, [r0, #6]
 8001426:	e7f1      	b.n	800140c <HAL_PCDEx_PMAConfig+0x22>

08001428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001428:	4602      	mov	r2, r0

  USB_TypeDef *USBx = hpcd->Instance;
 800142a:	6803      	ldr	r3, [r0, #0]
  hpcd->lpm_active = 1U;
 800142c:	2101      	movs	r1, #1
 800142e:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001432:	2000      	movs	r0, #0
 8001434:	f882 02e0 	strb.w	r0, [r2, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001438:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800143c:	430a      	orrs	r2, r1
 800143e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001442:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001446:	f042 0202 	orr.w	r2, r2, #2
 800144a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 800144e:	4770      	bx	lr

08001450 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001450:	2800      	cmp	r0, #0
 8001452:	d138      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001454:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	d008      	beq.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001462:	4a3b      	ldr	r2, [pc, #236]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001464:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800146c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001470:	2000      	movs	r0, #0
 8001472:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001474:	4a36      	ldr	r2, [pc, #216]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001476:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800147a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800147e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2332      	movs	r3, #50	; 0x32
 8001494:	fb03 f302 	mul.w	r3, r3, r2
 8001498:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a2:	e000      	b.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80014a4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80014a8:	6952      	ldr	r2, [r2, #20]
 80014aa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80014ae:	d001      	beq.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x64>
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f7      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014bc:	d101      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  return HAL_OK;
 80014be:	2000      	movs	r0, #0
 80014c0:	4770      	bx	lr
        return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80014ca:	d008      	beq.n	80014de <HAL_PWREx_ControlVoltageScaling+0x8e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80014da:	2000      	movs	r0, #0
 80014dc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ea:	d008      	beq.n	80014fe <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014ec:	4a18      	ldr	r2, [pc, #96]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80014ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 80014fa:	2000      	movs	r0, #0
 80014fc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001500:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	6813      	ldr	r3, [r2, #0]
 800150e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2332      	movs	r3, #50	; 0x32
 800151e:	fb03 f302 	mul.w	r3, r3, r2
 8001522:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9b      	lsrs	r3, r3, #18
 800152a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152c:	e000      	b.n	8001530 <HAL_PWREx_ControlVoltageScaling+0xe0>
        wait_loop_index--;
 800152e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001532:	6952      	ldr	r2, [r2, #20]
 8001534:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001538:	d001      	beq.n	800153e <HAL_PWREx_ControlVoltageScaling+0xee>
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f7      	bne.n	800152e <HAL_PWREx_ControlVoltageScaling+0xde>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001546:	d101      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8001548:	2000      	movs	r0, #0
}
 800154a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800154c:	2003      	movs	r0, #3
 800154e:	4770      	bx	lr
 8001550:	40007000 	.word	0x40007000
 8001554:	20000000 	.word	0x20000000
 8001558:	431bde83 	.word	0x431bde83

0800155c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800155c:	4a02      	ldr	r2, [pc, #8]	; (8001568 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800155e:	6893      	ldr	r3, [r2, #8]
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6093      	str	r3, [r2, #8]
}
 8001566:	4770      	bx	lr
 8001568:	40007000 	.word	0x40007000

0800156c <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800156e:	68d3      	ldr	r3, [r2, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001574:	68d0      	ldr	r0, [r2, #12]
 8001576:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800157a:	3001      	adds	r0, #1

  switch (pllsource)
 800157c:	2b03      	cmp	r3, #3
 800157e:	d011      	beq.n	80015a4 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8001582:	fbb3 f3f0 	udiv	r3, r3, r0
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8001588:	68d0      	ldr	r0, [r2, #12]
 800158a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800158e:	fb00 f003 	mul.w	r0, r0, r3
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800159a:	3301      	adds	r3, #1
 800159c:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 800159e:	fbb0 f0f3 	udiv	r0, r0, r3
 80015a2:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 80015a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80015aa:	68d0      	ldr	r0, [r2, #12]
 80015ac:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80015b0:	fb00 f003 	mul.w	r0, r0, r3
    break;
 80015b4:	e7ed      	b.n	8001592 <RCC_GetSysClockFreqFromPLLSource+0x26>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	00f42400 	.word	0x00f42400
 80015c0:	007a1200 	.word	0x007a1200

080015c4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80015c4:	2800      	cmp	r0, #0
 80015c6:	f000 825e 	beq.w	8001a86 <HAL_RCC_OscConfig+0x4c2>
{
 80015ca:	b570      	push	{r4, r5, r6, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d0:	6803      	ldr	r3, [r0, #0]
 80015d2:	f013 0f01 	tst.w	r3, #1
 80015d6:	d037      	beq.n	8001648 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d8:	4ab4      	ldr	r2, [pc, #720]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80015da:	6893      	ldr	r3, [r2, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d023      	beq.n	8001632 <HAL_RCC_OscConfig+0x6e>
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d023      	beq.n	8001636 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d04e      	beq.n	8001694 <HAL_RCC_OscConfig+0xd0>
 80015f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fa:	d051      	beq.n	80016a0 <HAL_RCC_OscConfig+0xdc>
 80015fc:	4bab      	ldr	r3, [pc, #684]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d052      	beq.n	80016ba <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8001614:	f7fe ff1e 	bl	8000454 <HAL_GetTick>
 8001618:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161a:	4ba4      	ldr	r3, [pc, #656]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001622:	d111      	bne.n	8001648 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7fe ff16 	bl	8000454 <HAL_GetTick>
 8001628:	1b40      	subs	r0, r0, r5
 800162a:	2864      	cmp	r0, #100	; 0x64
 800162c:	d9f5      	bls.n	800161a <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 800162e:	2003      	movs	r0, #3
 8001630:	e232      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001632:	2a03      	cmp	r2, #3
 8001634:	d1d9      	bne.n	80015ea <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	4b9d      	ldr	r3, [pc, #628]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800163e:	d003      	beq.n	8001648 <HAL_RCC_OscConfig+0x84>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8221 	beq.w	8001a8a <HAL_RCC_OscConfig+0x4c6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	f013 0f02 	tst.w	r3, #2
 800164e:	d05d      	beq.n	800170c <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001650:	4a96      	ldr	r2, [pc, #600]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001652:	6893      	ldr	r3, [r2, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001658:	68d2      	ldr	r2, [r2, #12]
 800165a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d03a      	beq.n	80016d8 <HAL_RCC_OscConfig+0x114>
 8001662:	2b04      	cmp	r3, #4
 8001664:	d03a      	beq.n	80016dc <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001666:	68e3      	ldr	r3, [r4, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d075      	beq.n	8001758 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 800166c:	4a8f      	ldr	r2, [pc, #572]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001676:	f7fe feed 	bl	8000454 <HAL_GetTick>
 800167a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001684:	d15f      	bne.n	8001746 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7fe fee5 	bl	8000454 <HAL_GetTick>
 800168a:	1b40      	subs	r0, r0, r5
 800168c:	2802      	cmp	r0, #2
 800168e:	d9f5      	bls.n	800167c <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8001690:	2003      	movs	r0, #3
 8001692:	e201      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	4a85      	ldr	r2, [pc, #532]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e7b6      	b.n	800160e <HAL_RCC_OscConfig+0x4a>
 80016a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016a4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e7a9      	b.n	800160e <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80016ba:	f7fe fecb 	bl	8000454 <HAL_GetTick>
 80016be:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c0:	4b7a      	ldr	r3, [pc, #488]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016c8:	d0be      	beq.n	8001648 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ca:	f7fe fec3 	bl	8000454 <HAL_GetTick>
 80016ce:	1b40      	subs	r0, r0, r5
 80016d0:	2864      	cmp	r0, #100	; 0x64
 80016d2:	d9f5      	bls.n	80016c0 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 80016d4:	2003      	movs	r0, #3
 80016d6:	e1df      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016d8:	2a02      	cmp	r2, #2
 80016da:	d1c2      	bne.n	8001662 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016dc:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_OscConfig+0x12a>
 80016e6:	68e3      	ldr	r3, [r4, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 81d0 	beq.w	8001a8e <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4a6f      	ldr	r2, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80016f0:	6853      	ldr	r3, [r2, #4]
 80016f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80016f6:	6921      	ldr	r1, [r4, #16]
 80016f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80016fc:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016fe:	4b6c      	ldr	r3, [pc, #432]	; (80018b0 <HAL_RCC_OscConfig+0x2ec>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f7fe fe63 	bl	80003cc <HAL_InitTick>
 8001706:	2800      	cmp	r0, #0
 8001708:	f040 81c3 	bne.w	8001a92 <HAL_RCC_OscConfig+0x4ce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	f013 0f08 	tst.w	r3, #8
 8001712:	d04c      	beq.n	80017ae <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	6963      	ldr	r3, [r4, #20]
 8001716:	b39b      	cbz	r3, 8001780 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8001718:	4a64      	ldr	r2, [pc, #400]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800171a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001726:	f7fe fe95 	bl	8000454 <HAL_GetTick>
 800172a:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172c:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001732:	f013 0f02 	tst.w	r3, #2
 8001736:	d13a      	bne.n	80017ae <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7fe fe8c 	bl	8000454 <HAL_GetTick>
 800173c:	1b40      	subs	r0, r0, r5
 800173e:	2802      	cmp	r0, #2
 8001740:	d9f4      	bls.n	800172c <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8001742:	2003      	movs	r0, #3
 8001744:	e1a8      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4a59      	ldr	r2, [pc, #356]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001748:	6853      	ldr	r3, [r2, #4]
 800174a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800174e:	6921      	ldr	r1, [r4, #16]
 8001750:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001754:	6053      	str	r3, [r2, #4]
 8001756:	e7d9      	b.n	800170c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8001758:	4a54      	ldr	r2, [pc, #336]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800175a:	6813      	ldr	r3, [r2, #0]
 800175c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001762:	f7fe fe77 	bl	8000454 <HAL_GetTick>
 8001766:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001770:	d0cc      	beq.n	800170c <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7fe fe6f 	bl	8000454 <HAL_GetTick>
 8001776:	1b40      	subs	r0, r0, r5
 8001778:	2802      	cmp	r0, #2
 800177a:	d9f5      	bls.n	8001768 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 800177c:	2003      	movs	r0, #3
 800177e:	e18b      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
      __HAL_RCC_LSI_DISABLE();
 8001780:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001782:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800178e:	f7fe fe61 	bl	8000454 <HAL_GetTick>
 8001792:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001794:	4b45      	ldr	r3, [pc, #276]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179a:	f013 0f02 	tst.w	r3, #2
 800179e:	d006      	beq.n	80017ae <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7fe fe58 	bl	8000454 <HAL_GetTick>
 80017a4:	1b40      	subs	r0, r0, r5
 80017a6:	2802      	cmp	r0, #2
 80017a8:	d9f4      	bls.n	8001794 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 80017aa:	2003      	movs	r0, #3
 80017ac:	e174      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	f013 0f04 	tst.w	r3, #4
 80017b4:	f000 8081 	beq.w	80018ba <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017b8:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017c0:	d136      	bne.n	8001830 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80017c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ca:	659a      	str	r2, [r3, #88]	; 0x58
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017d6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_RCC_OscConfig+0x2f0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017e0:	d028      	beq.n	8001834 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	68a3      	ldr	r3, [r4, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d039      	beq.n	800185c <HAL_RCC_OscConfig+0x298>
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d03f      	beq.n	800186c <HAL_RCC_OscConfig+0x2a8>
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80017ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80017fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001806:	68a3      	ldr	r3, [r4, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03d      	beq.n	8001888 <HAL_RCC_OscConfig+0x2c4>
      tickstart = HAL_GetTick();
 800180c:	f7fe fe22 	bl	8000454 <HAL_GetTick>
 8001810:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001818:	f013 0f02 	tst.w	r3, #2
 800181c:	d14c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7fe fe19 	bl	8000454 <HAL_GetTick>
 8001822:	1b80      	subs	r0, r0, r6
 8001824:	f241 3388 	movw	r3, #5000	; 0x1388
 8001828:	4298      	cmp	r0, r3
 800182a:	d9f2      	bls.n	8001812 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 800182c:	2003      	movs	r0, #3
 800182e:	e133      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
    FlagStatus       pwrclkchanged = RESET;
 8001830:	2500      	movs	r5, #0
 8001832:	e7d1      	b.n	80017d8 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001834:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <HAL_RCC_OscConfig+0x2f0>)
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800183e:	f7fe fe09 	bl	8000454 <HAL_GetTick>
 8001842:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x2f0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f413 7f80 	tst.w	r3, #256	; 0x100
 800184c:	d1c9      	bne.n	80017e2 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184e:	f7fe fe01 	bl	8000454 <HAL_GetTick>
 8001852:	1b80      	subs	r0, r0, r6
 8001854:	2802      	cmp	r0, #2
 8001856:	d9f5      	bls.n	8001844 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
 800185a:	e11d      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800185e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186a:	e7cc      	b.n	8001806 <HAL_RCC_OscConfig+0x242>
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 800186e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001872:	f042 0204 	orr.w	r2, r2, #4
 8001876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800187a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001886:	e7be      	b.n	8001806 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8001888:	f7fe fde4 	bl	8000454 <HAL_GetTick>
 800188c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001894:	f013 0f02 	tst.w	r3, #2
 8001898:	d00e      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7fe fddb 	bl	8000454 <HAL_GetTick>
 800189e:	1b80      	subs	r0, r0, r6
 80018a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80018a4:	4298      	cmp	r0, r3
 80018a6:	d9f2      	bls.n	800188e <HAL_RCC_OscConfig+0x2ca>
          return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	e0f5      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
 80018ac:	40021000 	.word	0x40021000
 80018b0:	20000008 	.word	0x20000008
 80018b4:	40007000 	.word	0x40007000
    if (pwrclkchanged == SET)
 80018b8:	b9e5      	cbnz	r5, 80018f4 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	f013 0f20 	tst.w	r3, #32
 80018c0:	d035      	beq.n	800192e <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c2:	69a3      	ldr	r3, [r4, #24]
 80018c4:	b1e3      	cbz	r3, 8001900 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 80018c6:	4a77      	ldr	r2, [pc, #476]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 80018c8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80018d4:	f7fe fdbe 	bl	8000454 <HAL_GetTick>
 80018d8:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018da:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 80018dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e0:	f013 0f02 	tst.w	r3, #2
 80018e4:	d123      	bne.n	800192e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e6:	f7fe fdb5 	bl	8000454 <HAL_GetTick>
 80018ea:	1b40      	subs	r0, r0, r5
 80018ec:	2802      	cmp	r0, #2
 80018ee:	d9f4      	bls.n	80018da <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 80018f0:	2003      	movs	r0, #3
 80018f2:	e0d1      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f4:	4a6b      	ldr	r2, [pc, #428]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 80018f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6593      	str	r3, [r2, #88]	; 0x58
 80018fe:	e7dc      	b.n	80018ba <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8001900:	4a68      	ldr	r2, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 8001902:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800190e:	f7fe fda1 	bl	8000454 <HAL_GetTick>
 8001912:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001914:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 8001916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191a:	f013 0f02 	tst.w	r3, #2
 800191e:	d006      	beq.n	800192e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001920:	f7fe fd98 	bl	8000454 <HAL_GetTick>
 8001924:	1b40      	subs	r0, r0, r5
 8001926:	2802      	cmp	r0, #2
 8001928:	d9f4      	bls.n	8001914 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 800192a:	2003      	movs	r0, #3
 800192c:	e0b4      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800192e:	69e3      	ldr	r3, [r4, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80b0 	beq.w	8001a96 <HAL_RCC_OscConfig+0x4d2>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001936:	4a5b      	ldr	r2, [pc, #364]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 8001938:	6892      	ldr	r2, [r2, #8]
 800193a:	f002 020c 	and.w	r2, r2, #12
 800193e:	2a0c      	cmp	r2, #12
 8001940:	d069      	beq.n	8001a16 <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001942:	2b02      	cmp	r3, #2
 8001944:	d01d      	beq.n	8001982 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800194e:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	f022 0203 	bic.w	r2, r2, #3
 8001956:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800195e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001962:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8001964:	f7fe fd76 	bl	8000454 <HAL_GetTick>
 8001968:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196a:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001972:	d04e      	beq.n	8001a12 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe fd6e 	bl	8000454 <HAL_GetTick>
 8001978:	1b00      	subs	r0, r0, r4
 800197a:	2802      	cmp	r0, #2
 800197c:	d9f5      	bls.n	800196a <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 800197e:	2003      	movs	r0, #3
 8001980:	e08a      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
        __HAL_RCC_PLL_DISABLE();
 8001982:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 8001984:	6813      	ldr	r3, [r2, #0]
 8001986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800198c:	f7fe fd62 	bl	8000454 <HAL_GetTick>
 8001990:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001992:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800199a:	d006      	beq.n	80019aa <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7fe fd5a 	bl	8000454 <HAL_GetTick>
 80019a0:	1b40      	subs	r0, r0, r5
 80019a2:	2802      	cmp	r0, #2
 80019a4:	d9f5      	bls.n	8001992 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 80019a6:	2003      	movs	r0, #3
 80019a8:	e076      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019aa:	4a3e      	ldr	r2, [pc, #248]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 80019ac:	68d3      	ldr	r3, [r2, #12]
 80019ae:	493e      	ldr	r1, [pc, #248]	; (8001aa8 <HAL_RCC_OscConfig+0x4e4>)
 80019b0:	4019      	ands	r1, r3
 80019b2:	6a23      	ldr	r3, [r4, #32]
 80019b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80019b6:	3801      	subs	r0, #1
 80019b8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80019bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80019be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80019c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80019c4:	0840      	lsrs	r0, r0, #1
 80019c6:	3801      	subs	r0, #1
 80019c8:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80019cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80019ce:	0840      	lsrs	r0, r0, #1
 80019d0:	3801      	subs	r0, #1
 80019d2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80019d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80019d8:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80019dc:	430b      	orrs	r3, r1
 80019de:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e8:	68d3      	ldr	r3, [r2, #12]
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80019f0:	f7fe fd30 	bl	8000454 <HAL_GetTick>
 80019f4:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7fe fd28 	bl	8000454 <HAL_GetTick>
 8001a04:	1b00      	subs	r0, r0, r4
 8001a06:	2802      	cmp	r0, #2
 8001a08:	d9f5      	bls.n	80019f6 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	e044      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
  return HAL_OK;
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e042      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
 8001a12:	2000      	movs	r0, #0
 8001a14:	e040      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d040      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4d8>
      temp_pllckcfg = RCC->PLLCFGR;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x4e0>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	f003 0103 	and.w	r1, r3, #3
 8001a22:	6a22      	ldr	r2, [r4, #32]
 8001a24:	4291      	cmp	r1, r2
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x468>
        return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	e035      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a32:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a34:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x47a>
        return HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e02c      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a44:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x48a>
        return HAL_ERROR;
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	e024      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a54:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_OscConfig+0x49a>
        return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e01c      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001a62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a64:	0852      	lsrs	r2, r2, #1
 8001a66:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a68:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4ae>
        return HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	e012      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a72:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001a76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a78:	0852      	lsrs	r2, r2, #1
 8001a7a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a7c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001a80:	d00e      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4dc>
        return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
    return HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
}
 8001a88:	4770      	bx	lr
        return HAL_ERROR;
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	e004      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
        return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	e002      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
          return HAL_ERROR;
 8001a92:	2001      	movs	r0, #1
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
  return HAL_OK;
 8001a96:	2000      	movs	r0, #0
}
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	e7fb      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
  return HAL_OK;
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	e7f9      	b.n	8001a98 <HAL_RCC_OscConfig+0x4d4>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	019f800c 	.word	0x019f800c

08001aac <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d033      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d02f      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8001ad0:	2000      	movs	r0, #0
}
 8001ad2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ae2:	3301      	adds	r3, #1
    switch (pllsource)
 8001ae4:	2a03      	cmp	r2, #3
 8001ae6:	d111      	bne.n	8001b0c <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ae8:	4810      	ldr	r0, [pc, #64]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x80>)
 8001aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001af0:	68d0      	ldr	r0, [r2, #12]
 8001af2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001af6:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001b06:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b0a:	4770      	bx	lr
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x84>)
 8001b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001b14:	68d0      	ldr	r0, [r2, #12]
 8001b16:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001b1a:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001b1e:	e7ec      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x84>)
 8001b22:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001b24:	4801      	ldr	r0, [pc, #4]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x80>)
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	007a1200 	.word	0x007a1200
 8001b30:	00f42400 	.word	0x00f42400

08001b34 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001b34:	2800      	cmp	r0, #0
 8001b36:	f000 80ea 	beq.w	8001d0e <HAL_RCC_ClockConfig+0x1da>
{
 8001b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3e:	4b76      	ldr	r3, [pc, #472]	; (8001d18 <HAL_RCC_ClockConfig+0x1e4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	428b      	cmp	r3, r1
 8001b48:	d20c      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4a73      	ldr	r2, [pc, #460]	; (8001d18 <HAL_RCC_ClockConfig+0x1e4>)
 8001b4c:	6813      	ldr	r3, [r2, #0]
 8001b4e:	f023 030f 	bic.w	r3, r3, #15
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	428b      	cmp	r3, r1
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001b60:	2001      	movs	r0, #1
 8001b62:	e0b3      	b.n	8001ccc <HAL_RCC_ClockConfig+0x198>
 8001b64:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f013 0f01 	tst.w	r3, #1
 8001b6c:	d061      	beq.n	8001c32 <HAL_RCC_ClockConfig+0xfe>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d015      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x6c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d033      	beq.n	8001be0 <HAL_RCC_ClockConfig+0xac>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b80:	f000 80c7 	beq.w	8001d12 <HAL_RCC_ClockConfig+0x1de>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b84:	f7ff ff92 	bl	8001aac <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8001b88:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b8a:	4298      	cmp	r0, r3
 8001b8c:	d935      	bls.n	8001bfa <HAL_RCC_ClockConfig+0xc6>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b8e:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001b90:	6893      	ldr	r3, [r2, #8]
 8001b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b9c:	2780      	movs	r7, #128	; 0x80
 8001b9e:	e02d      	b.n	8001bfc <HAL_RCC_ClockConfig+0xc8>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba0:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8001baa:	2001      	movs	r0, #1
 8001bac:	e08e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x198>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bae:	f7ff fcdd 	bl	800156c <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	4298      	cmp	r0, r3
 8001bb6:	d91a      	bls.n	8001bee <HAL_RCC_ClockConfig+0xba>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bb8:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bc2:	6823      	ldr	r3, [r4, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bc4:	f013 0f02 	tst.w	r3, #2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0xbe>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bca:	68a3      	ldr	r3, [r4, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bcc:	b99b      	cbnz	r3, 8001bf6 <HAL_RCC_ClockConfig+0xc2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bce:	4a53      	ldr	r2, [pc, #332]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001bd0:	6893      	ldr	r3, [r2, #8]
 8001bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bda:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bdc:	2780      	movs	r7, #128	; 0x80
 8001bde:	e00d      	b.n	8001bfc <HAL_RCC_ClockConfig+0xc8>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be0:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001be8:	d1cc      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x50>
          return HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
 8001bec:	e06e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x198>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bee:	2700      	movs	r7, #0
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_ClockConfig+0xc8>
 8001bf2:	2700      	movs	r7, #0
 8001bf4:	e002      	b.n	8001bfc <HAL_RCC_ClockConfig+0xc8>
 8001bf6:	2700      	movs	r7, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_ClockConfig+0xc8>
 8001bfa:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bfc:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001bfe:	6893      	ldr	r3, [r2, #8]
 8001c00:	f023 0303 	bic.w	r3, r3, #3
 8001c04:	6861      	ldr	r1, [r4, #4]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001c0a:	f7fe fc23 	bl	8000454 <HAL_GetTick>
 8001c0e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	6862      	ldr	r2, [r4, #4]
 8001c1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c1e:	d009      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7fe fc18 	bl	8000454 <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	d9f0      	bls.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 8001c2e:	2003      	movs	r0, #3
 8001c30:	e04c      	b.n	8001ccc <HAL_RCC_ClockConfig+0x198>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c32:	2700      	movs	r7, #0
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	f013 0f02 	tst.w	r3, #2
 8001c3a:	d048      	beq.n	8001cce <HAL_RCC_ClockConfig+0x19a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	f013 0f04 	tst.w	r3, #4
 8001c40:	d004      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x118>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c42:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001c44:	6893      	ldr	r3, [r2, #8]
 8001c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c4a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f013 0f08 	tst.w	r3, #8
 8001c52:	d006      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c54:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001c56:	6893      	ldr	r3, [r2, #8]
 8001c58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c5c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c60:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c62:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001c64:	6893      	ldr	r3, [r2, #8]
 8001c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c6a:	68a1      	ldr	r1, [r4, #8]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_RCC_ClockConfig+0x1e4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	42ab      	cmp	r3, r5
 8001c7a:	d830      	bhi.n	8001cde <HAL_RCC_ClockConfig+0x1aa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	f013 0f04 	tst.w	r3, #4
 8001c82:	d006      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x15e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001c86:	6893      	ldr	r3, [r2, #8]
 8001c88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c8c:	68e1      	ldr	r1, [r4, #12]
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	f013 0f08 	tst.w	r3, #8
 8001c98:	d007      	beq.n	8001caa <HAL_RCC_ClockConfig+0x176>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c9a:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001c9c:	6893      	ldr	r3, [r2, #8]
 8001c9e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ca2:	6921      	ldr	r1, [r4, #16]
 8001ca4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ca8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001caa:	f7ff feff 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	40d8      	lsrs	r0, r3
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_ClockConfig+0x1f4>)
 8001cc2:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_ClockConfig+0x1f8>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	f7fe fb80 	bl	80003cc <HAL_InitTick>
}
 8001ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8001cce:	2f00      	cmp	r7, #0
 8001cd0:	d0ce      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_RCC_ClockConfig+0x1e8>)
 8001cd4:	6893      	ldr	r3, [r2, #8]
 8001cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cda:	6093      	str	r3, [r2, #8]
 8001cdc:	e7c8      	b.n	8001c70 <HAL_RCC_ClockConfig+0x13c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_RCC_ClockConfig+0x1e4>)
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	f023 030f 	bic.w	r3, r3, #15
 8001ce6:	432b      	orrs	r3, r5
 8001ce8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001cea:	f7fe fbb3 	bl	8000454 <HAL_GetTick>
 8001cee:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1e4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	d0bf      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x148>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7fe fbaa 	bl	8000454 <HAL_GetTick>
 8001d00:	1b80      	subs	r0, r0, r6
 8001d02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d06:	4298      	cmp	r0, r3
 8001d08:	d9f2      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x1bc>
        return HAL_TIMEOUT;
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	e7de      	b.n	8001ccc <HAL_RCC_ClockConfig+0x198>
    return HAL_ERROR;
 8001d0e:	2001      	movs	r0, #1
}
 8001d10:	4770      	bx	lr
          return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
 8001d14:	e7da      	b.n	8001ccc <HAL_RCC_ClockConfig+0x198>
 8001d16:	bf00      	nop
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	04c4b400 	.word	0x04c4b400
 8001d24:	080040a4 	.word	0x080040a4
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d36:	6803      	ldr	r3, [r0, #0]
 8001d38:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001d3c:	d06e      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d46:	d11e      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d50:	659a      	str	r2, [r3, #88]	; 0x58
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d5c:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d68:	f7fe fb74 	bl	8000454 <HAL_GetTick>
 8001d6c:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d76:	d108      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7fe fb6c 	bl	8000454 <HAL_GetTick>
 8001d7c:	1b40      	subs	r0, r0, r5
 8001d7e:	2802      	cmp	r0, #2
 8001d80:	d9f5      	bls.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8001d82:	2503      	movs	r5, #3
 8001d84:	e002      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2600      	movs	r6, #0
 8001d88:	e7e9      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d8a:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8001d8c:	bb45      	cbnz	r5, 8001de0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d94:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d98:	d015      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8001d9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d012      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001da0:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001da2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001daa:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001dae:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001db2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001db6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001dba:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001dbe:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dc6:	f013 0f01 	tst.w	r3, #1
 8001dca:	d110      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8001dcc:	b945      	cbnz	r5, 8001de0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001dd0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de0:	b1ee      	cbz	r6, 8001e1e <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001de4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6593      	str	r3, [r2, #88]	; 0x58
 8001dec:	e017      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8001dee:	f7fe fb31 	bl	8000454 <HAL_GetTick>
 8001df2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f013 0f02 	tst.w	r3, #2
 8001dfe:	d1e5      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe fb28 	bl	8000454 <HAL_GetTick>
 8001e04:	1bc0      	subs	r0, r0, r7
 8001e06:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e0a:	4298      	cmp	r0, r3
 8001e0c:	d9f2      	bls.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8001e0e:	2503      	movs	r5, #3
 8001e10:	e7dc      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e1c:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	f013 0f01 	tst.w	r3, #1
 8001e24:	d008      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e26:	4a9f      	ldr	r2, [pc, #636]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e28:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	6861      	ldr	r1, [r4, #4]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	f013 0f02 	tst.w	r3, #2
 8001e3e:	d008      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e40:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e46:	f023 030c 	bic.w	r3, r3, #12
 8001e4a:	68a1      	ldr	r1, [r4, #8]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	f013 0f04 	tst.w	r3, #4
 8001e58:	d008      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e5a:	4a92      	ldr	r2, [pc, #584]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e60:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e64:	68e1      	ldr	r1, [r4, #12]
 8001e66:	430b      	orrs	r3, r1
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	f013 0f08 	tst.w	r3, #8
 8001e72:	d008      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e74:	4a8b      	ldr	r2, [pc, #556]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e7e:	6921      	ldr	r1, [r4, #16]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	f013 0f10 	tst.w	r3, #16
 8001e8c:	d008      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e8e:	4a85      	ldr	r2, [pc, #532]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e90:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	6961      	ldr	r1, [r4, #20]
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	f013 0f20 	tst.w	r3, #32
 8001ea6:	d008      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ea8:	4a7e      	ldr	r2, [pc, #504]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001eaa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001eae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001eb2:	69a1      	ldr	r1, [r4, #24]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ec0:	d008      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec2:	4a78      	ldr	r2, [pc, #480]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ec4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ec8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ecc:	69e1      	ldr	r1, [r4, #28]
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eda:	d008      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001edc:	4a71      	ldr	r2, [pc, #452]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ede:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ee2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ee6:	6a21      	ldr	r1, [r4, #32]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ef4:	d008      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ef6:	4a6b      	ldr	r2, [pc, #428]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ef8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001efc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f02:	430b      	orrs	r3, r1
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f10:	4a64      	ldr	r2, [pc, #400]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f12:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f2a:	4a5e      	ldr	r2, [pc, #376]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f30:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001f34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f36:	430b      	orrs	r3, r1
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001f42:	d00c      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f44:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001f50:	430b      	orrs	r3, r1
 8001f52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5c:	d079      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001f64:	d00c      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f66:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f6c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f72:	430b      	orrs	r3, r1
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7e:	d06d      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f88:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f8e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f94:	430b      	orrs	r3, r1
 8001f96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d061      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fb0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001fb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fc2:	d055      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001fca:	d00c      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fcc:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fd2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001fd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe4:	d049      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001fec:	d00c      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001fee:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ff0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ff4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ff8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002000:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002006:	d03d      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800200e:	d00c      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002012:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002016:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800201a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800201c:	430b      	orrs	r3, r1
 800201e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002022:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d031      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002030:	d00c      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002034:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002038:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800203c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800203e:	430b      	orrs	r3, r1
 8002040:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002044:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800204a:	d025      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 800204c:	4628      	mov	r0, r5
 800204e:	b003      	add	sp, #12
 8002050:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002052:	68d3      	ldr	r3, [r2, #12]
 8002054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002058:	60d3      	str	r3, [r2, #12]
 800205a:	e780      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800205c:	68d3      	ldr	r3, [r2, #12]
 800205e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002062:	60d3      	str	r3, [r2, #12]
 8002064:	e78c      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002066:	68d3      	ldr	r3, [r2, #12]
 8002068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206c:	60d3      	str	r3, [r2, #12]
 800206e:	e798      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002070:	68d3      	ldr	r3, [r2, #12]
 8002072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002076:	60d3      	str	r3, [r2, #12]
 8002078:	e7a4      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207a:	68d3      	ldr	r3, [r2, #12]
 800207c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002080:	60d3      	str	r3, [r2, #12]
 8002082:	e7b0      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002084:	68d3      	ldr	r3, [r2, #12]
 8002086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208a:	60d3      	str	r3, [r2, #12]
 800208c:	e7bc      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800208e:	68d3      	ldr	r3, [r2, #12]
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	60d3      	str	r3, [r2, #12]
 8002096:	e7c8      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002098:	68d3      	ldr	r3, [r2, #12]
 800209a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209e:	60d3      	str	r3, [r2, #12]
 80020a0:	e7d4      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000

080020a8 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80020ae:	f64b 7280 	movw	r2, #49024	; 0xbf80
 80020b2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	4770      	bx	lr

080020ba <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80020ba:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80020be:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80020c2:	045b      	lsls	r3, r3, #17
 80020c4:	0c5b      	lsrs	r3, r3, #17
 80020c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80020ca:	2000      	movs	r0, #0
 80020cc:	4770      	bx	lr

080020ce <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80020ce:	b084      	sub	sp, #16
 80020d0:	b410      	push	{r4}
 80020d2:	ac02      	add	r4, sp, #8
 80020d4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80020d8:	2301      	movs	r3, #1
 80020da:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80020e4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80020e8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50

  return HAL_OK;
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020f2:	b004      	add	sp, #16
 80020f4:	4770      	bx	lr

080020f6 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80020f6:	b430      	push	{r4, r5}
 80020f8:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80020fa:	780a      	ldrb	r2, [r1, #0]
 80020fc:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8002100:	b2a4      	uxth	r4, r4
 8002102:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002106:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800210a:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 800210c:	78c8      	ldrb	r0, [r1, #3]
 800210e:	2803      	cmp	r0, #3
 8002110:	d85b      	bhi.n	80021ca <USB_ActivateEndpoint+0xd4>
 8002112:	e8df f000 	tbb	[pc, r0]
 8002116:	564e      	.short	0x564e
 8002118:	5202      	.short	0x5202
  HAL_StatusTypeDef ret = HAL_OK;
 800211a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800211c:	f248 0580 	movw	r5, #32896	; 0x8080
 8002120:	432c      	orrs	r4, r5
 8002122:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002126:	780c      	ldrb	r4, [r1, #0]
 8002128:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800212c:	b212      	sxth	r2, r2
 800212e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002132:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002136:	4322      	orrs	r2, r4
 8002138:	b292      	uxth	r2, r2
 800213a:	432a      	orrs	r2, r5
 800213c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8002140:	7b0a      	ldrb	r2, [r1, #12]
 8002142:	2a00      	cmp	r2, #0
 8002144:	f040 80b1 	bne.w	80022aa <USB_ActivateEndpoint+0x1b4>
  {
    if (ep->is_in != 0U)
 8002148:	784a      	ldrb	r2, [r1, #1]
 800214a:	2a00      	cmp	r2, #0
 800214c:	d04e      	beq.n	80021ec <USB_ActivateEndpoint+0xf6>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800214e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002152:	441a      	add	r2, r3
 8002154:	780c      	ldrb	r4, [r1, #0]
 8002156:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800215a:	88cc      	ldrh	r4, [r1, #6]
 800215c:	0864      	lsrs	r4, r4, #1
 800215e:	0064      	lsls	r4, r4, #1
 8002160:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002164:	780c      	ldrb	r4, [r1, #0]
 8002166:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800216a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800216e:	d00c      	beq.n	800218a <USB_ActivateEndpoint+0x94>
 8002170:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002174:	b292      	uxth	r2, r2
 8002176:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800217a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800217e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002182:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002186:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800218a:	78ca      	ldrb	r2, [r1, #3]
 800218c:	2a01      	cmp	r2, #1
 800218e:	d01e      	beq.n	80021ce <USB_ActivateEndpoint+0xd8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002190:	7809      	ldrb	r1, [r1, #0]
 8002192:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002196:	b292      	uxth	r2, r2
 8002198:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800219c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a0:	f082 0220 	eor.w	r2, r2, #32
 80021a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ac:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80021b0:	e060      	b.n	8002274 <USB_ActivateEndpoint+0x17e>
      wEpRegVal |= USB_EP_CONTROL;
 80021b2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80021b6:	2000      	movs	r0, #0
      break;
 80021b8:	e7b0      	b.n	800211c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80021ba:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80021be:	2000      	movs	r0, #0
      break;
 80021c0:	e7ac      	b.n	800211c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80021c2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80021c6:	2000      	movs	r0, #0
      break;
 80021c8:	e7a8      	b.n	800211c <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 80021ca:	2001      	movs	r0, #1
 80021cc:	e7a6      	b.n	800211c <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80021ce:	7809      	ldrb	r1, [r1, #0]
 80021d0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80021d4:	b292      	uxth	r2, r2
 80021d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80021ea:	e043      	b.n	8002274 <USB_ActivateEndpoint+0x17e>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80021ec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80021f0:	441a      	add	r2, r3
 80021f2:	780c      	ldrb	r4, [r1, #0]
 80021f4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80021f8:	88cc      	ldrh	r4, [r1, #6]
 80021fa:	0864      	lsrs	r4, r4, #1
 80021fc:	0064      	lsls	r4, r4, #1
 80021fe:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002202:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002206:	441a      	add	r2, r3
 8002208:	780c      	ldrb	r4, [r1, #0]
 800220a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800220e:	690c      	ldr	r4, [r1, #16]
 8002210:	bb94      	cbnz	r4, 8002278 <USB_ActivateEndpoint+0x182>
 8002212:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8002216:	b2a4      	uxth	r4, r4
 8002218:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800221c:	b2a4      	uxth	r4, r4
 800221e:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8002222:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8002226:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800222a:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800222e:	780c      	ldrb	r4, [r1, #0]
 8002230:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002234:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002238:	d00c      	beq.n	8002254 <USB_ActivateEndpoint+0x15e>
 800223a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800223e:	b292      	uxth	r2, r2
 8002240:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002244:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002248:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800224c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002250:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002254:	7809      	ldrb	r1, [r1, #0]
 8002256:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800225a:	b292      	uxth	r2, r2
 800225c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002260:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002264:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002270:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002274:	bc30      	pop	{r4, r5}
 8002276:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002278:	2c3e      	cmp	r4, #62	; 0x3e
 800227a:	d809      	bhi.n	8002290 <USB_ActivateEndpoint+0x19a>
 800227c:	0865      	lsrs	r5, r4, #1
 800227e:	f014 0f01 	tst.w	r4, #1
 8002282:	d000      	beq.n	8002286 <USB_ActivateEndpoint+0x190>
 8002284:	3501      	adds	r5, #1
 8002286:	02ad      	lsls	r5, r5, #10
 8002288:	b2ad      	uxth	r5, r5
 800228a:	f8a2 5406 	strh.w	r5, [r2, #1030]	; 0x406
 800228e:	e7ce      	b.n	800222e <USB_ActivateEndpoint+0x138>
 8002290:	0965      	lsrs	r5, r4, #5
 8002292:	f014 0f1f 	tst.w	r4, #31
 8002296:	d100      	bne.n	800229a <USB_ActivateEndpoint+0x1a4>
 8002298:	3d01      	subs	r5, #1
 800229a:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 800229e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80022a2:	b2a4      	uxth	r4, r4
 80022a4:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 80022a8:	e7c1      	b.n	800222e <USB_ActivateEndpoint+0x138>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80022aa:	780c      	ldrb	r4, [r1, #0]
 80022ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022b0:	b292      	uxth	r2, r2
 80022b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80022b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ba:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80022be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80022c6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022ca:	441a      	add	r2, r3
 80022cc:	780c      	ldrb	r4, [r1, #0]
 80022ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80022d2:	890c      	ldrh	r4, [r1, #8]
 80022d4:	0864      	lsrs	r4, r4, #1
 80022d6:	0064      	lsls	r4, r4, #1
 80022d8:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 80022dc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022e0:	441a      	add	r2, r3
 80022e2:	780c      	ldrb	r4, [r1, #0]
 80022e4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80022e8:	894c      	ldrh	r4, [r1, #10]
 80022ea:	0864      	lsrs	r4, r4, #1
 80022ec:	0064      	lsls	r4, r4, #1
 80022ee:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 80022f2:	784a      	ldrb	r2, [r1, #1]
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d140      	bne.n	800237a <USB_ActivateEndpoint+0x284>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022f8:	780c      	ldrb	r4, [r1, #0]
 80022fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022fe:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002302:	d00c      	beq.n	800231e <USB_ActivateEndpoint+0x228>
 8002304:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002308:	b292      	uxth	r2, r2
 800230a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800230e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002312:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800231a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800231e:	780c      	ldrb	r4, [r1, #0]
 8002320:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002324:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002328:	d00c      	beq.n	8002344 <USB_ActivateEndpoint+0x24e>
 800232a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800232e:	b292      	uxth	r2, r2
 8002330:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002334:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002340:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002344:	780d      	ldrb	r5, [r1, #0]
 8002346:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800234a:	b292      	uxth	r2, r2
 800234c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002350:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002354:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002358:	f248 0480 	movw	r4, #32896	; 0x8080
 800235c:	4322      	orrs	r2, r4
 800235e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002362:	7809      	ldrb	r1, [r1, #0]
 8002364:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002368:	b292      	uxth	r2, r2
 800236a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800236e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002372:	4322      	orrs	r2, r4
 8002374:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002378:	e77c      	b.n	8002274 <USB_ActivateEndpoint+0x17e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800237a:	780c      	ldrb	r4, [r1, #0]
 800237c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002380:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002384:	d00c      	beq.n	80023a0 <USB_ActivateEndpoint+0x2aa>
 8002386:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800238a:	b292      	uxth	r2, r2
 800238c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002390:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002394:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800239c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023a0:	780c      	ldrb	r4, [r1, #0]
 80023a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80023aa:	d00c      	beq.n	80023c6 <USB_ActivateEndpoint+0x2d0>
 80023ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023b0:	b292      	uxth	r2, r2
 80023b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80023b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80023c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80023c6:	78ca      	ldrb	r2, [r1, #3]
 80023c8:	2a01      	cmp	r2, #1
 80023ca:	d01e      	beq.n	800240a <USB_ActivateEndpoint+0x314>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80023cc:	780c      	ldrb	r4, [r1, #0]
 80023ce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023d2:	b292      	uxth	r2, r2
 80023d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80023d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023dc:	f082 0220 	eor.w	r2, r2, #32
 80023e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80023ec:	7809      	ldrb	r1, [r1, #0]
 80023ee:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80023f2:	b292      	uxth	r2, r2
 80023f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002400:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002404:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002408:	e734      	b.n	8002274 <USB_ActivateEndpoint+0x17e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800240a:	780c      	ldrb	r4, [r1, #0]
 800240c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002410:	b292      	uxth	r2, r2
 8002412:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002422:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8002426:	e7e1      	b.n	80023ec <USB_ActivateEndpoint+0x2f6>

08002428 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002428:	7b0b      	ldrb	r3, [r1, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d146      	bne.n	80024bc <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800242e:	784b      	ldrb	r3, [r1, #1]
 8002430:	b313      	cbz	r3, 8002478 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002432:	780a      	ldrb	r2, [r1, #0]
 8002434:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002438:	f013 0f40 	tst.w	r3, #64	; 0x40
 800243c:	d00c      	beq.n	8002458 <USB_DeactivateEndpoint+0x30>
 800243e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002442:	b29b      	uxth	r3, r3
 8002444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002450:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002454:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002458:	780a      	ldrb	r2, [r1, #0]
 800245a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002474:	2000      	movs	r0, #0
 8002476:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002478:	780a      	ldrb	r2, [r1, #0]
 800247a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800247e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002482:	d00c      	beq.n	800249e <USB_DeactivateEndpoint+0x76>
 8002484:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002488:	b29b      	uxth	r3, r3
 800248a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800249e:	780a      	ldrb	r2, [r1, #0]
 80024a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80024ba:	e7db      	b.n	8002474 <USB_DeactivateEndpoint+0x4c>
{
 80024bc:	b410      	push	{r4}
    if (ep->is_in == 0U)
 80024be:	784b      	ldrb	r3, [r1, #1]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d14f      	bne.n	8002564 <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024c4:	780a      	ldrb	r2, [r1, #0]
 80024c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024ca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80024ce:	d00c      	beq.n	80024ea <USB_DeactivateEndpoint+0xc2>
 80024d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024ea:	780a      	ldrb	r2, [r1, #0]
 80024ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024f4:	d00c      	beq.n	8002510 <USB_DeactivateEndpoint+0xe8>
 80024f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800250c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002510:	780a      	ldrb	r2, [r1, #0]
 8002512:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800251c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002528:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800252c:	780b      	ldrb	r3, [r1, #0]
 800252e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002532:	b292      	uxth	r2, r2
 8002534:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002538:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800253c:	f248 0480 	movw	r4, #32896	; 0x8080
 8002540:	4322      	orrs	r2, r4
 8002542:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002546:	780a      	ldrb	r2, [r1, #0]
 8002548:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002556:	4323      	orrs	r3, r4
 8002558:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800255c:	2000      	movs	r0, #0
 800255e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002562:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002564:	780a      	ldrb	r2, [r1, #0]
 8002566:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800256a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800256e:	d00c      	beq.n	800258a <USB_DeactivateEndpoint+0x162>
 8002570:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002586:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800258a:	780a      	ldrb	r2, [r1, #0]
 800258c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002590:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002594:	d00c      	beq.n	80025b0 <USB_DeactivateEndpoint+0x188>
 8002596:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800259a:	b29b      	uxth	r3, r3
 800259c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80025b0:	780a      	ldrb	r2, [r1, #0]
 80025b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025cc:	780b      	ldrb	r3, [r1, #0]
 80025ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025d2:	b292      	uxth	r2, r2
 80025d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80025d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025dc:	f248 0480 	movw	r4, #32896	; 0x8080
 80025e0:	4322      	orrs	r2, r4
 80025e2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025e6:	780a      	ldrb	r2, [r1, #0]
 80025e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	4323      	orrs	r3, r4
 80025f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80025fc:	e7ae      	b.n	800255c <USB_DeactivateEndpoint+0x134>

080025fe <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80025fe:	784b      	ldrb	r3, [r1, #1]
 8002600:	b98b      	cbnz	r3, 8002626 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002602:	780a      	ldrb	r2, [r1, #0]
 8002604:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002608:	b29b      	uxth	r3, r3
 800260a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002622:	2000      	movs	r0, #0
 8002624:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002626:	780a      	ldrb	r2, [r1, #0]
 8002628:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002636:	f083 0310 	eor.w	r3, r3, #16
 800263a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002642:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002646:	e7ec      	b.n	8002622 <USB_EPSetStall+0x24>

08002648 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002648:	7b0b      	ldrb	r3, [r1, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d14b      	bne.n	80026e6 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800264e:	784b      	ldrb	r3, [r1, #1]
 8002650:	b333      	cbz	r3, 80026a0 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002652:	780a      	ldrb	r2, [r1, #0]
 8002654:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002658:	f013 0f40 	tst.w	r3, #64	; 0x40
 800265c:	d00c      	beq.n	8002678 <USB_EPClearStall+0x30>
 800265e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002674:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002678:	78cb      	ldrb	r3, [r1, #3]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d033      	beq.n	80026e6 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800267e:	780a      	ldrb	r2, [r1, #0]
 8002680:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800268e:	f083 0320 	eor.w	r3, r3, #32
 8002692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800269e:	e022      	b.n	80026e6 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026a0:	780a      	ldrb	r2, [r1, #0]
 80026a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026a6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80026aa:	d00c      	beq.n	80026c6 <USB_EPClearStall+0x7e>
 80026ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026c6:	780a      	ldrb	r2, [r1, #0]
 80026c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80026e6:	2000      	movs	r0, #0
 80026e8:	4770      	bx	lr

080026ea <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80026ea:	b911      	cbnz	r1, 80026f2 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80026f2:	2000      	movs	r0, #0
 80026f4:	4770      	bx	lr

080026f6 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80026f6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80026fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fe:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8002702:	2000      	movs	r0, #0
 8002704:	4770      	bx	lr

08002706 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002706:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800270a:	4770      	bx	lr

0800270c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800270c:	2000      	movs	r0, #0
 800270e:	4770      	bx	lr

08002710 <USB_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002710:	3301      	adds	r3, #1
 8002712:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002714:	4402      	add	r2, r0
 8002716:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800271a:	b16b      	cbz	r3, 8002738 <USB_WritePMA+0x28>
{
 800271c:	b410      	push	{r4}
  {
    temp1 = *pBuf;
 800271e:	780c      	ldrb	r4, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002720:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8002722:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8002726:	f822 4b02 	strh.w	r4, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800272a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800272c:	3b01      	subs	r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f5      	bne.n	800271e <USB_WritePMA+0xe>
  }
}
 8002732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	4770      	bx	lr

0800273a <USB_EPStartXfer>:
{
 800273a:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800273c:	784a      	ldrb	r2, [r1, #1]
 800273e:	2a01      	cmp	r2, #1
 8002740:	d033      	beq.n	80027aa <USB_EPStartXfer+0x70>
    if (ep->doublebuffer == 0U)
 8002742:	7b0b      	ldrb	r3, [r1, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 827d 	bne.w	8002c44 <USB_EPStartXfer+0x50a>
      if (ep->xfer_len > ep->maxpacket)
 800274a:	698b      	ldr	r3, [r1, #24]
 800274c:	690a      	ldr	r2, [r1, #16]
 800274e:	4293      	cmp	r3, r2
 8002750:	f240 825b 	bls.w	8002c0a <USB_EPStartXfer+0x4d0>
        ep->xfer_len -= len;
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002758:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800275c:	4403      	add	r3, r0
 800275e:	780c      	ldrb	r4, [r1, #0]
 8002760:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002764:	2a00      	cmp	r2, #0
 8002766:	f040 8254 	bne.w	8002c12 <USB_EPStartXfer+0x4d8>
 800276a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800276e:	b292      	uxth	r2, r2
 8002770:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002774:	b292      	uxth	r2, r2
 8002776:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800277a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800277e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002782:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002786:	780a      	ldrb	r2, [r1, #0]
 8002788:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002796:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800279a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  return HAL_OK;
 80027a6:	2000      	movs	r0, #0
}
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80027aa:	698b      	ldr	r3, [r1, #24]
 80027ac:	690e      	ldr	r6, [r1, #16]
 80027ae:	42b3      	cmp	r3, r6
 80027b0:	d900      	bls.n	80027b4 <USB_EPStartXfer+0x7a>
      len = ep->maxpacket;
 80027b2:	4633      	mov	r3, r6
 80027b4:	460c      	mov	r4, r1
 80027b6:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0U)
 80027b8:	7b09      	ldrb	r1, [r1, #12]
 80027ba:	b319      	cbz	r1, 8002804 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 80027bc:	78e1      	ldrb	r1, [r4, #3]
 80027be:	2902      	cmp	r1, #2
 80027c0:	d040      	beq.n	8002844 <USB_EPStartXfer+0x10a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027c2:	7821      	ldrb	r1, [r4, #0]
 80027c4:	f830 0021 	ldrh.w	r0, [r0, r1, lsl #2]
 80027c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027cc:	f000 81d2 	beq.w	8002b74 <USB_EPStartXfer+0x43a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	f040 81af 	bne.w	8002b34 <USB_EPStartXfer+0x3fa>
 80027d6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80027da:	442a      	add	r2, r5
 80027dc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 818e 	bne.w	8002b02 <USB_EPStartXfer+0x3c8>
 80027e6:	f8b1 2406 	ldrh.w	r2, [r1, #1030]	; 0x406
 80027ea:	b292      	uxth	r2, r2
 80027ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80027f0:	b292      	uxth	r2, r2
 80027f2:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 80027f6:	f8b1 2406 	ldrh.w	r2, [r1, #1030]	; 0x406
 80027fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fe:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8002802:	e19f      	b.n	8002b44 <USB_EPStartXfer+0x40a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002804:	b29e      	uxth	r6, r3
 8002806:	4633      	mov	r3, r6
 8002808:	88e2      	ldrh	r2, [r4, #6]
 800280a:	6961      	ldr	r1, [r4, #20]
 800280c:	f7ff ff80 	bl	8002710 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002810:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002814:	442b      	add	r3, r5
 8002816:	7822      	ldrb	r2, [r4, #0]
 8002818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800281c:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002820:	7822      	ldrb	r2, [r4, #0]
 8002822:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002830:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002840:	2000      	movs	r0, #0
 8002842:	e7b1      	b.n	80027a8 <USB_EPStartXfer+0x6e>
        if (ep->xfer_len_db > ep->maxpacket)
 8002844:	6a23      	ldr	r3, [r4, #32]
 8002846:	429e      	cmp	r6, r3
 8002848:	f080 813f 	bcs.w	8002aca <USB_EPStartXfer+0x390>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800284c:	7822      	ldrb	r2, [r4, #0]
 800284e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002852:	b29b      	uxth	r3, r3
 8002854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002864:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          len = ep->maxpacket;
 8002868:	6926      	ldr	r6, [r4, #16]
          ep->xfer_len_db -= len;
 800286a:	6a23      	ldr	r3, [r4, #32]
 800286c:	1b9b      	subs	r3, r3, r6
 800286e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002870:	7823      	ldrb	r3, [r4, #0]
 8002872:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002876:	f012 0f40 	tst.w	r2, #64	; 0x40
 800287a:	f000 8093 	beq.w	80029a4 <USB_EPStartXfer+0x26a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800287e:	7862      	ldrb	r2, [r4, #1]
 8002880:	bb6a      	cbnz	r2, 80028de <USB_EPStartXfer+0x1a4>
 8002882:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002886:	4402      	add	r2, r0
 8002888:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800288c:	b976      	cbnz	r6, 80028ac <USB_EPStartXfer+0x172>
 800288e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002892:	b292      	uxth	r2, r2
 8002894:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002898:	b292      	uxth	r2, r2
 800289a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800289e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80028a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80028aa:	e01a      	b.n	80028e2 <USB_EPStartXfer+0x1a8>
 80028ac:	2e3e      	cmp	r6, #62	; 0x3e
 80028ae:	d809      	bhi.n	80028c4 <USB_EPStartXfer+0x18a>
 80028b0:	0872      	lsrs	r2, r6, #1
 80028b2:	f016 0f01 	tst.w	r6, #1
 80028b6:	d000      	beq.n	80028ba <USB_EPStartXfer+0x180>
 80028b8:	3201      	adds	r2, #1
 80028ba:	0292      	lsls	r2, r2, #10
 80028bc:	b292      	uxth	r2, r2
 80028be:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80028c2:	e00e      	b.n	80028e2 <USB_EPStartXfer+0x1a8>
 80028c4:	0972      	lsrs	r2, r6, #5
 80028c6:	f016 0f1f 	tst.w	r6, #31
 80028ca:	d100      	bne.n	80028ce <USB_EPStartXfer+0x194>
 80028cc:	3a01      	subs	r2, #1
 80028ce:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80028d2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80028d6:	b292      	uxth	r2, r2
 80028d8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80028dc:	e001      	b.n	80028e2 <USB_EPStartXfer+0x1a8>
 80028de:	2a01      	cmp	r2, #1
 80028e0:	d027      	beq.n	8002932 <USB_EPStartXfer+0x1f8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80028e2:	b2b3      	uxth	r3, r6
 80028e4:	8962      	ldrh	r2, [r4, #10]
 80028e6:	6961      	ldr	r1, [r4, #20]
 80028e8:	4628      	mov	r0, r5
 80028ea:	f7ff ff11 	bl	8002710 <USB_WritePMA>
            ep->xfer_buff += len;
 80028ee:	6963      	ldr	r3, [r4, #20]
 80028f0:	441e      	add	r6, r3
 80028f2:	6166      	str	r6, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80028f4:	6a22      	ldr	r2, [r4, #32]
 80028f6:	6923      	ldr	r3, [r4, #16]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d923      	bls.n	8002944 <USB_EPStartXfer+0x20a>
              ep->xfer_len_db -= len;
 80028fc:	1ad2      	subs	r2, r2, r3
 80028fe:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002900:	7862      	ldrb	r2, [r4, #1]
 8002902:	2a00      	cmp	r2, #0
 8002904:	d13b      	bne.n	800297e <USB_EPStartXfer+0x244>
 8002906:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800290a:	442a      	add	r2, r5
 800290c:	7821      	ldrb	r1, [r4, #0]
 800290e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002912:	b9db      	cbnz	r3, 800294c <USB_EPStartXfer+0x212>
 8002914:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8002918:	b289      	uxth	r1, r1
 800291a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800291e:	b289      	uxth	r1, r1
 8002920:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002924:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 8002928:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800292c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002930:	e027      	b.n	8002982 <USB_EPStartXfer+0x248>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002932:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002936:	4402      	add	r2, r0
 8002938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800293c:	b2b2      	uxth	r2, r6
 800293e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002942:	e7ce      	b.n	80028e2 <USB_EPStartXfer+0x1a8>
              ep->xfer_len_db = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	6223      	str	r3, [r4, #32]
              len = ep->xfer_len_db;
 8002948:	4613      	mov	r3, r2
 800294a:	e7d9      	b.n	8002900 <USB_EPStartXfer+0x1c6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800294c:	2b3e      	cmp	r3, #62	; 0x3e
 800294e:	d809      	bhi.n	8002964 <USB_EPStartXfer+0x22a>
 8002950:	0859      	lsrs	r1, r3, #1
 8002952:	f013 0f01 	tst.w	r3, #1
 8002956:	d000      	beq.n	800295a <USB_EPStartXfer+0x220>
 8002958:	3101      	adds	r1, #1
 800295a:	0289      	lsls	r1, r1, #10
 800295c:	b289      	uxth	r1, r1
 800295e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8002962:	e00e      	b.n	8002982 <USB_EPStartXfer+0x248>
 8002964:	0959      	lsrs	r1, r3, #5
 8002966:	f013 0f1f 	tst.w	r3, #31
 800296a:	d100      	bne.n	800296e <USB_EPStartXfer+0x234>
 800296c:	3901      	subs	r1, #1
 800296e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002972:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002976:	b289      	uxth	r1, r1
 8002978:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800297c:	e001      	b.n	8002982 <USB_EPStartXfer+0x248>
 800297e:	2a01      	cmp	r2, #1
 8002980:	d006      	beq.n	8002990 <USB_EPStartXfer+0x256>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002982:	b29b      	uxth	r3, r3
 8002984:	8922      	ldrh	r2, [r4, #8]
 8002986:	6961      	ldr	r1, [r4, #20]
 8002988:	4628      	mov	r0, r5
 800298a:	f7ff fec1 	bl	8002710 <USB_WritePMA>
 800298e:	e747      	b.n	8002820 <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002990:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002994:	442a      	add	r2, r5
 8002996:	7821      	ldrb	r1, [r4, #0]
 8002998:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800299c:	b299      	uxth	r1, r3
 800299e:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80029a2:	e7ee      	b.n	8002982 <USB_EPStartXfer+0x248>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80029a4:	7862      	ldrb	r2, [r4, #1]
 80029a6:	bb6a      	cbnz	r2, 8002a04 <USB_EPStartXfer+0x2ca>
 80029a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80029ac:	4402      	add	r2, r0
 80029ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80029b2:	b976      	cbnz	r6, 80029d2 <USB_EPStartXfer+0x298>
 80029b4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80029b8:	b292      	uxth	r2, r2
 80029ba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80029be:	b292      	uxth	r2, r2
 80029c0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80029c4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80029c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029cc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80029d0:	e01a      	b.n	8002a08 <USB_EPStartXfer+0x2ce>
 80029d2:	2e3e      	cmp	r6, #62	; 0x3e
 80029d4:	d809      	bhi.n	80029ea <USB_EPStartXfer+0x2b0>
 80029d6:	0872      	lsrs	r2, r6, #1
 80029d8:	f016 0f01 	tst.w	r6, #1
 80029dc:	d000      	beq.n	80029e0 <USB_EPStartXfer+0x2a6>
 80029de:	3201      	adds	r2, #1
 80029e0:	0292      	lsls	r2, r2, #10
 80029e2:	b292      	uxth	r2, r2
 80029e4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80029e8:	e00e      	b.n	8002a08 <USB_EPStartXfer+0x2ce>
 80029ea:	0972      	lsrs	r2, r6, #5
 80029ec:	f016 0f1f 	tst.w	r6, #31
 80029f0:	d100      	bne.n	80029f4 <USB_EPStartXfer+0x2ba>
 80029f2:	3a01      	subs	r2, #1
 80029f4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80029f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80029fc:	b292      	uxth	r2, r2
 80029fe:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002a02:	e001      	b.n	8002a08 <USB_EPStartXfer+0x2ce>
 8002a04:	2a01      	cmp	r2, #1
 8002a06:	d027      	beq.n	8002a58 <USB_EPStartXfer+0x31e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a08:	b2b3      	uxth	r3, r6
 8002a0a:	8922      	ldrh	r2, [r4, #8]
 8002a0c:	6961      	ldr	r1, [r4, #20]
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f7ff fe7e 	bl	8002710 <USB_WritePMA>
            ep->xfer_buff += len;
 8002a14:	6963      	ldr	r3, [r4, #20]
 8002a16:	441e      	add	r6, r3
 8002a18:	6166      	str	r6, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002a1a:	6a22      	ldr	r2, [r4, #32]
 8002a1c:	6923      	ldr	r3, [r4, #16]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d923      	bls.n	8002a6a <USB_EPStartXfer+0x330>
              ep->xfer_len_db -= len;
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a26:	7862      	ldrb	r2, [r4, #1]
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d13b      	bne.n	8002aa4 <USB_EPStartXfer+0x36a>
 8002a2c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a30:	442a      	add	r2, r5
 8002a32:	7821      	ldrb	r1, [r4, #0]
 8002a34:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002a38:	b9db      	cbnz	r3, 8002a72 <USB_EPStartXfer+0x338>
 8002a3a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002a3e:	b289      	uxth	r1, r1
 8002a40:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002a44:	b289      	uxth	r1, r1
 8002a46:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002a4a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8002a4e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002a52:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002a56:	e027      	b.n	8002aa8 <USB_EPStartXfer+0x36e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a58:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a5c:	4402      	add	r2, r0
 8002a5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002a62:	b2b2      	uxth	r2, r6
 8002a64:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002a68:	e7ce      	b.n	8002a08 <USB_EPStartXfer+0x2ce>
              ep->xfer_len_db = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6223      	str	r3, [r4, #32]
              len = ep->xfer_len_db;
 8002a6e:	4613      	mov	r3, r2
 8002a70:	e7d9      	b.n	8002a26 <USB_EPStartXfer+0x2ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a72:	2b3e      	cmp	r3, #62	; 0x3e
 8002a74:	d809      	bhi.n	8002a8a <USB_EPStartXfer+0x350>
 8002a76:	0859      	lsrs	r1, r3, #1
 8002a78:	f013 0f01 	tst.w	r3, #1
 8002a7c:	d000      	beq.n	8002a80 <USB_EPStartXfer+0x346>
 8002a7e:	3101      	adds	r1, #1
 8002a80:	0289      	lsls	r1, r1, #10
 8002a82:	b289      	uxth	r1, r1
 8002a84:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002a88:	e00e      	b.n	8002aa8 <USB_EPStartXfer+0x36e>
 8002a8a:	0959      	lsrs	r1, r3, #5
 8002a8c:	f013 0f1f 	tst.w	r3, #31
 8002a90:	d100      	bne.n	8002a94 <USB_EPStartXfer+0x35a>
 8002a92:	3901      	subs	r1, #1
 8002a94:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002a98:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002a9c:	b289      	uxth	r1, r1
 8002a9e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002aa2:	e001      	b.n	8002aa8 <USB_EPStartXfer+0x36e>
 8002aa4:	2a01      	cmp	r2, #1
 8002aa6:	d006      	beq.n	8002ab6 <USB_EPStartXfer+0x37c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	8962      	ldrh	r2, [r4, #10]
 8002aac:	6961      	ldr	r1, [r4, #20]
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f7ff fe2e 	bl	8002710 <USB_WritePMA>
 8002ab4:	e6b4      	b.n	8002820 <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ab6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002aba:	442a      	add	r2, r5
 8002abc:	7821      	ldrb	r1, [r4, #0]
 8002abe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8002ac8:	e7ee      	b.n	8002aa8 <USB_EPStartXfer+0x36e>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002aca:	7821      	ldrb	r1, [r4, #0]
 8002acc:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002ad6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002ae6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002aea:	4402      	add	r2, r0
 8002aec:	7821      	ldrb	r1, [r4, #0]
 8002aee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002af8:	8922      	ldrh	r2, [r4, #8]
 8002afa:	6961      	ldr	r1, [r4, #20]
 8002afc:	f7ff fe08 	bl	8002710 <USB_WritePMA>
 8002b00:	e68e      	b.n	8002820 <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b02:	2b3e      	cmp	r3, #62	; 0x3e
 8002b04:	d809      	bhi.n	8002b1a <USB_EPStartXfer+0x3e0>
 8002b06:	085a      	lsrs	r2, r3, #1
 8002b08:	f013 0f01 	tst.w	r3, #1
 8002b0c:	d000      	beq.n	8002b10 <USB_EPStartXfer+0x3d6>
 8002b0e:	3201      	adds	r2, #1
 8002b10:	0292      	lsls	r2, r2, #10
 8002b12:	b292      	uxth	r2, r2
 8002b14:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8002b18:	e014      	b.n	8002b44 <USB_EPStartXfer+0x40a>
 8002b1a:	095a      	lsrs	r2, r3, #5
 8002b1c:	f013 0f1f 	tst.w	r3, #31
 8002b20:	d100      	bne.n	8002b24 <USB_EPStartXfer+0x3ea>
 8002b22:	3a01      	subs	r2, #1
 8002b24:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002b28:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
 8002b32:	e007      	b.n	8002b44 <USB_EPStartXfer+0x40a>
 8002b34:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b38:	442a      	add	r2, r5
 8002b3a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	f8a1 2406 	strh.w	r2, [r1, #1030]	; 0x406
          pmabuffer = ep->pmaaddr1;
 8002b44:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	6961      	ldr	r1, [r4, #20]
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f7ff fde0 	bl	8002710 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002b50:	7863      	ldrb	r3, [r4, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d147      	bne.n	8002be6 <USB_EPStartXfer+0x4ac>
 8002b56:	7822      	ldrb	r2, [r4, #0]
 8002b58:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b6e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002b72:	e655      	b.n	8002820 <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b74:	bb6a      	cbnz	r2, 8002bd2 <USB_EPStartXfer+0x498>
 8002b76:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b7a:	442a      	add	r2, r5
 8002b7c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002b80:	b973      	cbnz	r3, 8002ba0 <USB_EPStartXfer+0x466>
 8002b82:	f8b1 2402 	ldrh.w	r2, [r1, #1026]	; 0x402
 8002b86:	b292      	uxth	r2, r2
 8002b88:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8002b92:	f8b1 2402 	ldrh.w	r2, [r1, #1026]	; 0x402
 8002b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9a:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8002b9e:	e020      	b.n	8002be2 <USB_EPStartXfer+0x4a8>
 8002ba0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ba2:	d809      	bhi.n	8002bb8 <USB_EPStartXfer+0x47e>
 8002ba4:	085a      	lsrs	r2, r3, #1
 8002ba6:	f013 0f01 	tst.w	r3, #1
 8002baa:	d000      	beq.n	8002bae <USB_EPStartXfer+0x474>
 8002bac:	3201      	adds	r2, #1
 8002bae:	0292      	lsls	r2, r2, #10
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8002bb6:	e014      	b.n	8002be2 <USB_EPStartXfer+0x4a8>
 8002bb8:	095a      	lsrs	r2, r3, #5
 8002bba:	f013 0f1f 	tst.w	r3, #31
 8002bbe:	d100      	bne.n	8002bc2 <USB_EPStartXfer+0x488>
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002bc6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
 8002bd0:	e007      	b.n	8002be2 <USB_EPStartXfer+0x4a8>
 8002bd2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002bd6:	442a      	add	r2, r5
 8002bd8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	f8a1 2402 	strh.w	r2, [r1, #1026]	; 0x402
          pmabuffer = ep->pmaaddr0;
 8002be2:	8922      	ldrh	r2, [r4, #8]
 8002be4:	e7af      	b.n	8002b46 <USB_EPStartXfer+0x40c>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	f47f ae1a 	bne.w	8002820 <USB_EPStartXfer+0xe6>
 8002bec:	7822      	ldrb	r2, [r4, #0]
 8002bee:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002c08:	e60a      	b.n	8002820 <USB_EPStartXfer+0xe6>
        ep->xfer_len = 0U;
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8002c0e:	461a      	mov	r2, r3
 8002c10:	e5a2      	b.n	8002758 <USB_EPStartXfer+0x1e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002c12:	2a3e      	cmp	r2, #62	; 0x3e
 8002c14:	d809      	bhi.n	8002c2a <USB_EPStartXfer+0x4f0>
 8002c16:	0854      	lsrs	r4, r2, #1
 8002c18:	f012 0f01 	tst.w	r2, #1
 8002c1c:	d000      	beq.n	8002c20 <USB_EPStartXfer+0x4e6>
 8002c1e:	3401      	adds	r4, #1
 8002c20:	02a4      	lsls	r4, r4, #10
 8002c22:	b2a4      	uxth	r4, r4
 8002c24:	f8a3 4406 	strh.w	r4, [r3, #1030]	; 0x406
 8002c28:	e5ad      	b.n	8002786 <USB_EPStartXfer+0x4c>
 8002c2a:	0954      	lsrs	r4, r2, #5
 8002c2c:	f012 0f1f 	tst.w	r2, #31
 8002c30:	d100      	bne.n	8002c34 <USB_EPStartXfer+0x4fa>
 8002c32:	3c01      	subs	r4, #1
 8002c34:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002c38:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002c3c:	b2a4      	uxth	r4, r4
 8002c3e:	f8a3 4406 	strh.w	r4, [r3, #1030]	; 0x406
 8002c42:	e5a0      	b.n	8002786 <USB_EPStartXfer+0x4c>
      if (ep->type == EP_TYPE_BULK)
 8002c44:	78cb      	ldrb	r3, [r1, #3]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d004      	beq.n	8002c54 <USB_EPStartXfer+0x51a>
      else if (ep->type == EP_TYPE_ISOC)
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	f000 808e 	beq.w	8002d6c <USB_EPStartXfer+0x632>
        return HAL_ERROR;
 8002c50:	2001      	movs	r0, #1
 8002c52:	e5a9      	b.n	80027a8 <USB_EPStartXfer+0x6e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002c54:	b9aa      	cbnz	r2, 8002c82 <USB_EPStartXfer+0x548>
 8002c56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c5a:	4403      	add	r3, r0
 8002c5c:	780a      	ldrb	r2, [r1, #0]
 8002c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c62:	690a      	ldr	r2, [r1, #16]
 8002c64:	bb3a      	cbnz	r2, 8002cb6 <USB_EPStartXfer+0x57c>
 8002c66:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c70:	b292      	uxth	r2, r2
 8002c72:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002c76:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002c82:	784b      	ldrb	r3, [r1, #1]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d148      	bne.n	8002d1a <USB_EPStartXfer+0x5e0>
 8002c88:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c8c:	4403      	add	r3, r0
 8002c8e:	780a      	ldrb	r2, [r1, #0]
 8002c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c94:	690a      	ldr	r2, [r1, #16]
 8002c96:	bb3a      	cbnz	r2, 8002ce8 <USB_EPStartXfer+0x5ae>
 8002c98:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002ca8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8002cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cb4:	e033      	b.n	8002d1e <USB_EPStartXfer+0x5e4>
 8002cb6:	2a3e      	cmp	r2, #62	; 0x3e
 8002cb8:	d809      	bhi.n	8002cce <USB_EPStartXfer+0x594>
 8002cba:	0854      	lsrs	r4, r2, #1
 8002cbc:	f012 0f01 	tst.w	r2, #1
 8002cc0:	d000      	beq.n	8002cc4 <USB_EPStartXfer+0x58a>
 8002cc2:	3401      	adds	r4, #1
 8002cc4:	02a2      	lsls	r2, r4, #10
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002ccc:	e7d9      	b.n	8002c82 <USB_EPStartXfer+0x548>
 8002cce:	0954      	lsrs	r4, r2, #5
 8002cd0:	f012 0f1f 	tst.w	r2, #31
 8002cd4:	d100      	bne.n	8002cd8 <USB_EPStartXfer+0x59e>
 8002cd6:	3c01      	subs	r4, #1
 8002cd8:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 8002cdc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002ce0:	b292      	uxth	r2, r2
 8002ce2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8002ce6:	e7cc      	b.n	8002c82 <USB_EPStartXfer+0x548>
 8002ce8:	2a3e      	cmp	r2, #62	; 0x3e
 8002cea:	d809      	bhi.n	8002d00 <USB_EPStartXfer+0x5c6>
 8002cec:	0854      	lsrs	r4, r2, #1
 8002cee:	f012 0f01 	tst.w	r2, #1
 8002cf2:	d000      	beq.n	8002cf6 <USB_EPStartXfer+0x5bc>
 8002cf4:	3401      	adds	r4, #1
 8002cf6:	02a2      	lsls	r2, r4, #10
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002cfe:	e00e      	b.n	8002d1e <USB_EPStartXfer+0x5e4>
 8002d00:	0954      	lsrs	r4, r2, #5
 8002d02:	f012 0f1f 	tst.w	r2, #31
 8002d06:	d100      	bne.n	8002d0a <USB_EPStartXfer+0x5d0>
 8002d08:	3c01      	subs	r4, #1
 8002d0a:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 8002d0e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d12:	b292      	uxth	r2, r2
 8002d14:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002d18:	e001      	b.n	8002d1e <USB_EPStartXfer+0x5e4>
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d01c      	beq.n	8002d58 <USB_EPStartXfer+0x61e>
        if (ep->xfer_count != 0U)
 8002d1e:	69cb      	ldr	r3, [r1, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f43f ad30 	beq.w	8002786 <USB_EPStartXfer+0x4c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002d26:	780a      	ldrb	r2, [r1, #0]
 8002d28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d2c:	f244 0440 	movw	r4, #16448	; 0x4040
 8002d30:	4023      	ands	r3, r4
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002d32:	42a3      	cmp	r3, r4
 8002d34:	d002      	beq.n	8002d3c <USB_EPStartXfer+0x602>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f47f ad25 	bne.w	8002786 <USB_EPStartXfer+0x4c>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002d3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002d56:	e516      	b.n	8002786 <USB_EPStartXfer+0x4c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002d58:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d5c:	4403      	add	r3, r0
 8002d5e:	780a      	ldrb	r2, [r1, #0]
 8002d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d64:	8a0a      	ldrh	r2, [r1, #16]
 8002d66:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8002d6a:	e7d8      	b.n	8002d1e <USB_EPStartXfer+0x5e4>
        if (ep->xfer_len > ep->maxpacket)
 8002d6c:	698c      	ldr	r4, [r1, #24]
 8002d6e:	690b      	ldr	r3, [r1, #16]
 8002d70:	429c      	cmp	r4, r3
 8002d72:	d930      	bls.n	8002dd6 <USB_EPStartXfer+0x69c>
          ep->xfer_len -= len;
 8002d74:	1ae4      	subs	r4, r4, r3
 8002d76:	618c      	str	r4, [r1, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002d78:	b9a2      	cbnz	r2, 8002da4 <USB_EPStartXfer+0x66a>
 8002d7a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d7e:	4402      	add	r2, r0
 8002d80:	780c      	ldrb	r4, [r1, #0]
 8002d82:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002d86:	bb53      	cbnz	r3, 8002dde <USB_EPStartXfer+0x6a4>
 8002d88:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	; 0x402
 8002d8c:	b2a4      	uxth	r4, r4
 8002d8e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8002d92:	b2a4      	uxth	r4, r4
 8002d94:	f8a2 4402 	strh.w	r4, [r2, #1026]	; 0x402
 8002d98:	f8b2 4402 	ldrh.w	r4, [r2, #1026]	; 0x402
 8002d9c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002da0:	f8a2 4402 	strh.w	r4, [r2, #1026]	; 0x402
 8002da4:	784a      	ldrb	r2, [r1, #1]
 8002da6:	2a00      	cmp	r2, #0
 8002da8:	d14b      	bne.n	8002e42 <USB_EPStartXfer+0x708>
 8002daa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002dae:	4402      	add	r2, r0
 8002db0:	780c      	ldrb	r4, [r1, #0]
 8002db2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002db6:	bb5b      	cbnz	r3, 8002e10 <USB_EPStartXfer+0x6d6>
 8002db8:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8002dc8:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 8002dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd0:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8002dd4:	e4d7      	b.n	8002786 <USB_EPStartXfer+0x4c>
          ep->xfer_len = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	618b      	str	r3, [r1, #24]
          len = ep->xfer_len;
 8002dda:	4623      	mov	r3, r4
 8002ddc:	e7cc      	b.n	8002d78 <USB_EPStartXfer+0x63e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002dde:	2b3e      	cmp	r3, #62	; 0x3e
 8002de0:	d809      	bhi.n	8002df6 <USB_EPStartXfer+0x6bc>
 8002de2:	085c      	lsrs	r4, r3, #1
 8002de4:	f013 0f01 	tst.w	r3, #1
 8002de8:	d000      	beq.n	8002dec <USB_EPStartXfer+0x6b2>
 8002dea:	3401      	adds	r4, #1
 8002dec:	02a4      	lsls	r4, r4, #10
 8002dee:	b2a4      	uxth	r4, r4
 8002df0:	f8a2 4402 	strh.w	r4, [r2, #1026]	; 0x402
 8002df4:	e7d6      	b.n	8002da4 <USB_EPStartXfer+0x66a>
 8002df6:	095c      	lsrs	r4, r3, #5
 8002df8:	f013 0f1f 	tst.w	r3, #31
 8002dfc:	d100      	bne.n	8002e00 <USB_EPStartXfer+0x6c6>
 8002dfe:	3c01      	subs	r4, #1
 8002e00:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002e04:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002e08:	b2a4      	uxth	r4, r4
 8002e0a:	f8a2 4402 	strh.w	r4, [r2, #1026]	; 0x402
 8002e0e:	e7c9      	b.n	8002da4 <USB_EPStartXfer+0x66a>
 8002e10:	2b3e      	cmp	r3, #62	; 0x3e
 8002e12:	d809      	bhi.n	8002e28 <USB_EPStartXfer+0x6ee>
 8002e14:	085c      	lsrs	r4, r3, #1
 8002e16:	f013 0f01 	tst.w	r3, #1
 8002e1a:	d000      	beq.n	8002e1e <USB_EPStartXfer+0x6e4>
 8002e1c:	3401      	adds	r4, #1
 8002e1e:	02a3      	lsls	r3, r4, #10
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8002e26:	e4ae      	b.n	8002786 <USB_EPStartXfer+0x4c>
 8002e28:	095c      	lsrs	r4, r3, #5
 8002e2a:	f013 0f1f 	tst.w	r3, #31
 8002e2e:	d100      	bne.n	8002e32 <USB_EPStartXfer+0x6f8>
 8002e30:	3c01      	subs	r4, #1
 8002e32:	ea6f 63c4 	mvn.w	r3, r4, lsl #27
 8002e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8002e40:	e4a1      	b.n	8002786 <USB_EPStartXfer+0x4c>
 8002e42:	2a01      	cmp	r2, #1
 8002e44:	f47f ac9f 	bne.w	8002786 <USB_EPStartXfer+0x4c>
 8002e48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e4c:	4402      	add	r2, r0
 8002e4e:	780c      	ldrb	r4, [r1, #0]
 8002e50:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
 8002e5a:	e494      	b.n	8002786 <USB_EPStartXfer+0x4c>

08002e5c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002e5c:	b430      	push	{r4, r5}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002e5e:	085d      	lsrs	r5, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002e60:	4402      	add	r2, r0
 8002e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8002e66:	e007      	b.n	8002e78 <USB_ReadPMA+0x1c>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8002e68:	f832 4b02 	ldrh.w	r4, [r2], #2
 8002e6c:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002e6e:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002e70:	0a24      	lsrs	r4, r4, #8
 8002e72:	704c      	strb	r4, [r1, #1]
    pBuf++;
 8002e74:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8002e76:	3d01      	subs	r5, #1
 8002e78:	2d00      	cmp	r5, #0
 8002e7a:	d1f5      	bne.n	8002e68 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002e7c:	f013 0f01 	tst.w	r3, #1
 8002e80:	d001      	beq.n	8002e86 <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 8002e82:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002e84:	700b      	strb	r3, [r1, #0]
  }
}
 8002e86:	bc30      	pop	{r4, r5}
 8002e88:	4770      	bx	lr

08002e8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8002e8a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002e8c:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002e90:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002e94:	b15b      	cbz	r3, 8002eae <USBD_CDC_EP0_RxReady+0x24>
 8002e96:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002e9a:	28ff      	cmp	r0, #255	; 0xff
 8002e9c:	d007      	beq.n	8002eae <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002ea8:	23ff      	movs	r3, #255	; 0xff
 8002eaa:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
}
 8002eae:	2000      	movs	r0, #0
 8002eb0:	bd10      	pop	{r4, pc}
	...

08002eb4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8002eb4:	2343      	movs	r3, #67	; 0x43
 8002eb6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8002eb8:	4800      	ldr	r0, [pc, #0]	; (8002ebc <USBD_CDC_GetFSCfgDesc+0x8>)
 8002eba:	4770      	bx	lr
 8002ebc:	20000044 	.word	0x20000044

08002ec0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8002ec0:	2343      	movs	r3, #67	; 0x43
 8002ec2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8002ec4:	4800      	ldr	r0, [pc, #0]	; (8002ec8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002ec6:	4770      	bx	lr
 8002ec8:	20000088 	.word	0x20000088

08002ecc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002ecc:	2343      	movs	r3, #67	; 0x43
 8002ece:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002ed0:	4800      	ldr	r0, [pc, #0]	; (8002ed4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002ed2:	4770      	bx	lr
 8002ed4:	200000d8 	.word	0x200000d8

08002ed8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8002ed8:	230a      	movs	r3, #10
 8002eda:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8002edc:	4800      	ldr	r0, [pc, #0]	; (8002ee0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002ede:	4770      	bx	lr
 8002ee0:	200000cc 	.word	0x200000cc

08002ee4 <USBD_CDC_DataOut>:
{
 8002ee4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002ee6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8002eea:	b175      	cbz	r5, 8002f0a <USBD_CDC_DataOut+0x26>
 8002eec:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002eee:	f001 f871 	bl	8003fd4 <USBD_LL_GetRxDataSize>
 8002ef2:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002ef6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8002f00:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8002f04:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002f06:	2000      	movs	r0, #0
}
 8002f08:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8002f0a:	2003      	movs	r0, #3
 8002f0c:	e7fc      	b.n	8002f08 <USBD_CDC_DataOut+0x24>

08002f0e <USBD_CDC_DataIn>:
{
 8002f0e:	b570      	push	{r4, r5, r6, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002f10:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8002f14:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8002f18:	b355      	cbz	r5, 8002f70 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8002f1a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002f1e:	0093      	lsls	r3, r2, #2
 8002f20:	4403      	add	r3, r0
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	b14b      	cbz	r3, 8002f3a <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002f26:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8002f2a:	00f2      	lsls	r2, r6, #3
 8002f2c:	4414      	add	r4, r2
 8002f2e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002f30:	fbb3 f2f4 	udiv	r2, r3, r4
 8002f34:	fb04 3312 	mls	r3, r4, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8002f38:	b173      	cbz	r3, 8002f58 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8002f40:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	b1ab      	cbz	r3, 8002f74 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8002f48:	460a      	mov	r2, r1
 8002f4a:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8002f4e:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8002f52:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002f54:	2000      	movs	r0, #0
}
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8002f58:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002f5c:	0093      	lsls	r3, r2, #2
 8002f5e:	4403      	add	r3, r0
 8002f60:	2400      	movs	r4, #0
 8002f62:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002f64:	4623      	mov	r3, r4
 8002f66:	4622      	mov	r2, r4
 8002f68:	f001 f824 	bl	8003fb4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8002f6c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002f6e:	e7f2      	b.n	8002f56 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8002f70:	2003      	movs	r0, #3
 8002f72:	e7f0      	b.n	8002f56 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8002f74:	2000      	movs	r0, #0
 8002f76:	e7ee      	b.n	8002f56 <USBD_CDC_DataIn+0x48>

08002f78 <USBD_CDC_Setup>:
{
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002f80:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8002f8a:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f8e:	780b      	ldrb	r3, [r1, #0]
 8002f90:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8002f94:	d027      	beq.n	8002fe6 <USBD_CDC_Setup+0x6e>
 8002f96:	2a20      	cmp	r2, #32
 8002f98:	d15b      	bne.n	8003052 <USBD_CDC_Setup+0xda>
      if (req->wLength != 0U)
 8002f9a:	88ca      	ldrh	r2, [r1, #6]
 8002f9c:	b93a      	cbnz	r2, 8002fae <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002f9e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	7848      	ldrb	r0, [r1, #1]
 8002fa8:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8002faa:	2000      	movs	r0, #0
 8002fac:	e054      	b.n	8003058 <USBD_CDC_Setup+0xe0>
        if ((req->bmRequest & 0x80U) != 0U)
 8002fae:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fb2:	d00c      	beq.n	8002fce <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002fb4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4631      	mov	r1, r6
 8002fbc:	7860      	ldrb	r0, [r4, #1]
 8002fbe:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8002fc0:	88e2      	ldrh	r2, [r4, #6]
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 fdbb 	bl	8003b40 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8002fca:	2000      	movs	r0, #0
 8002fcc:	e044      	b.n	8003058 <USBD_CDC_Setup+0xe0>
          hcdc->CmdOpCode = req->bRequest;
 8002fce:	784b      	ldrb	r3, [r1, #1]
 8002fd0:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002fd4:	798b      	ldrb	r3, [r1, #6]
 8002fd6:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8002fda:	88ca      	ldrh	r2, [r1, #6]
 8002fdc:	4631      	mov	r1, r6
 8002fde:	f000 fdc4 	bl	8003b6a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e038      	b.n	8003058 <USBD_CDC_Setup+0xe0>
      switch (req->bRequest)
 8002fe6:	784b      	ldrb	r3, [r1, #1]
 8002fe8:	2b0b      	cmp	r3, #11
 8002fea:	d82e      	bhi.n	800304a <USBD_CDC_Setup+0xd2>
 8002fec:	e8df f003 	tbb	[pc, r3]
 8002ff0:	2d2d3606 	.word	0x2d2d3606
 8002ff4:	2d2d2d2d 	.word	0x2d2d2d2d
 8002ff8:	23142d2d 	.word	0x23142d2d
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ffc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003000:	2b03      	cmp	r3, #3
 8003002:	d105      	bne.n	8003010 <USBD_CDC_Setup+0x98>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003004:	2202      	movs	r2, #2
 8003006:	a901      	add	r1, sp, #4
 8003008:	f000 fd9a 	bl	8003b40 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800300c:	2000      	movs	r0, #0
 800300e:	e023      	b.n	8003058 <USBD_CDC_Setup+0xe0>
            USBD_CtlError(pdev, req);
 8003010:	f000 fa52 	bl	80034b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8003014:	2003      	movs	r0, #3
 8003016:	e01f      	b.n	8003058 <USBD_CDC_Setup+0xe0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003018:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800301c:	2b03      	cmp	r3, #3
 800301e:	d106      	bne.n	800302e <USBD_CDC_Setup+0xb6>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8003020:	2201      	movs	r2, #1
 8003022:	f10d 0107 	add.w	r1, sp, #7
 8003026:	f000 fd8b 	bl	8003b40 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800302a:	2000      	movs	r0, #0
 800302c:	e014      	b.n	8003058 <USBD_CDC_Setup+0xe0>
            USBD_CtlError(pdev, req);
 800302e:	f000 fa43 	bl	80034b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8003032:	2003      	movs	r0, #3
 8003034:	e010      	b.n	8003058 <USBD_CDC_Setup+0xe0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003036:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800303a:	2b03      	cmp	r3, #3
 800303c:	d101      	bne.n	8003042 <USBD_CDC_Setup+0xca>
  USBD_StatusTypeDef ret = USBD_OK;
 800303e:	2000      	movs	r0, #0
 8003040:	e00a      	b.n	8003058 <USBD_CDC_Setup+0xe0>
            USBD_CtlError(pdev, req);
 8003042:	f000 fa39 	bl	80034b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8003046:	2003      	movs	r0, #3
 8003048:	e006      	b.n	8003058 <USBD_CDC_Setup+0xe0>
          USBD_CtlError(pdev, req);
 800304a:	f000 fa35 	bl	80034b8 <USBD_CtlError>
          ret = USBD_FAIL;
 800304e:	2003      	movs	r0, #3
          break;
 8003050:	e002      	b.n	8003058 <USBD_CDC_Setup+0xe0>
      USBD_CtlError(pdev, req);
 8003052:	f000 fa31 	bl	80034b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8003056:	2003      	movs	r0, #3
}
 8003058:	b002      	add	sp, #8
 800305a:	bd70      	pop	{r4, r5, r6, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800305c:	2000      	movs	r0, #0
 800305e:	e7fb      	b.n	8003058 <USBD_CDC_Setup+0xe0>

08003060 <USBD_CDC_DeInit>:
{
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003064:	2181      	movs	r1, #129	; 0x81
 8003066:	f000 ff6e 	bl	8003f46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800306a:	2500      	movs	r5, #0
 800306c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800306e:	2101      	movs	r1, #1
 8003070:	4620      	mov	r0, r4
 8003072:	f000 ff68 	bl	8003f46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003076:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800307a:	2182      	movs	r1, #130	; 0x82
 800307c:	4620      	mov	r0, r4
 800307e:	f000 ff62 	bl	8003f46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003082:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8003086:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800308a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800308e:	b14b      	cbz	r3, 80030a4 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003090:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8003098:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800309c:	f000 ffc8 	bl	8004030 <USBD_static_free>
    pdev->pClassData = NULL;
 80030a0:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80030a4:	2000      	movs	r0, #0
 80030a6:	bd38      	pop	{r3, r4, r5, pc}

080030a8 <USBD_CDC_Init>:
{
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80030ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80030b0:	f000 ffba 	bl	8004028 <USBD_static_malloc>
  if (hcdc == NULL)
 80030b4:	b3b0      	cbz	r0, 8003124 <USBD_CDC_Init+0x7c>
 80030b6:	4605      	mov	r5, r0
  pdev->pClassData = (void *)hcdc;
 80030b8:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80030bc:	7c23      	ldrb	r3, [r4, #16]
 80030be:	bbb3      	cbnz	r3, 800312e <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80030c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c4:	2202      	movs	r2, #2
 80030c6:	2181      	movs	r1, #129	; 0x81
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 ff31 	bl	8003f30 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80030ce:	2601      	movs	r6, #1
 80030d0:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80030d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d6:	2202      	movs	r2, #2
 80030d8:	4631      	mov	r1, r6
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 ff28 	bl	8003f30 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80030e0:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80030e4:	2310      	movs	r3, #16
 80030e6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80030ea:	2308      	movs	r3, #8
 80030ec:	2203      	movs	r2, #3
 80030ee:	2182      	movs	r1, #130	; 0x82
 80030f0:	4620      	mov	r0, r4
 80030f2:	f000 ff1d 	bl	8003f30 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80030fc:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4798      	blx	r3
  hcdc->TxState = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800310a:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800310e:	7c23      	ldrb	r3, [r4, #16]
 8003110:	b30b      	cbz	r3, 8003156 <USBD_CDC_Init+0xae>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003118:	2101      	movs	r1, #1
 800311a:	4620      	mov	r0, r4
 800311c:	f000 ff52 	bl	8003fc4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003120:	2000      	movs	r0, #0
}
 8003122:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800312a:	2002      	movs	r0, #2
 800312c:	e7f9      	b.n	8003122 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	2202      	movs	r2, #2
 8003132:	2181      	movs	r1, #129	; 0x81
 8003134:	4620      	mov	r0, r4
 8003136:	f000 fefb 	bl	8003f30 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800313a:	2601      	movs	r6, #1
 800313c:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800313e:	2340      	movs	r3, #64	; 0x40
 8003140:	2202      	movs	r2, #2
 8003142:	4631      	mov	r1, r6
 8003144:	4620      	mov	r0, r4
 8003146:	f000 fef3 	bl	8003f30 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800314a:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800314e:	2310      	movs	r3, #16
 8003150:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8003154:	e7c9      	b.n	80030ea <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800315e:	2101      	movs	r1, #1
 8003160:	4620      	mov	r0, r4
 8003162:	f000 ff2f 	bl	8003fc4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003166:	2000      	movs	r0, #0
 8003168:	e7db      	b.n	8003122 <USBD_CDC_Init+0x7a>

0800316a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800316a:	b119      	cbz	r1, 8003174 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800316c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8003170:	2000      	movs	r0, #0
 8003172:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003174:	2003      	movs	r0, #3
}
 8003176:	4770      	bx	lr

08003178 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003178:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 800317c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003180:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8003184:	2000      	movs	r0, #0
 8003186:	4770      	bx	lr

08003188 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003188:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 800318c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 8003190:	2000      	movs	r0, #0
 8003192:	4770      	bx	lr

08003194 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003194:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8003198:	b19a      	cbz	r2, 80031c2 <USBD_CDC_ReceivePacket+0x2e>
{
 800319a:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800319c:	7c03      	ldrb	r3, [r0, #16]
 800319e:	b13b      	cbz	r3, 80031b0 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031a0:	2340      	movs	r3, #64	; 0x40
 80031a2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80031a6:	2101      	movs	r1, #1
 80031a8:	f000 ff0c 	bl	8003fc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80031ac:	2000      	movs	r0, #0
}
 80031ae:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80031b8:	2101      	movs	r1, #1
 80031ba:	f000 ff03 	bl	8003fc4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80031be:	2000      	movs	r0, #0
 80031c0:	e7f5      	b.n	80031ae <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 80031c2:	2003      	movs	r0, #3
}
 80031c4:	4770      	bx	lr

080031c6 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80031c6:	b198      	cbz	r0, 80031f0 <USBD_Init+0x2a>
{
 80031c8:	b508      	push	{r3, lr}
 80031ca:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80031cc:	2000      	movs	r0, #0
 80031ce:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80031d2:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80031d6:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80031da:	b109      	cbz	r1, 80031e0 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80031dc:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 80031e0:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 80031e8:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80031ea:	f000 fe55 	bl	8003e98 <USBD_LL_Init>

  return ret;
}
 80031ee:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80031f0:	2003      	movs	r0, #3
}
 80031f2:	4770      	bx	lr

080031f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80031f4:	b510      	push	{r4, lr}
 80031f6:	b082      	sub	sp, #8
  uint16_t len = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80031fe:	b161      	cbz	r1, 800321a <USBD_RegisterClass+0x26>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003200:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8003204:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003206:	b153      	cbz	r3, 800321e <USBD_RegisterClass+0x2a>
 8003208:	4604      	mov	r4, r0
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800320a:	f10d 0006 	add.w	r0, sp, #6
 800320e:	4798      	blx	r3
 8003210:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8003214:	2000      	movs	r0, #0
}
 8003216:	b002      	add	sp, #8
 8003218:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800321a:	2003      	movs	r0, #3
 800321c:	e7fb      	b.n	8003216 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800321e:	2000      	movs	r0, #0
 8003220:	e7f9      	b.n	8003216 <USBD_RegisterClass+0x22>

08003222 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003222:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003224:	f000 fe7c 	bl	8003f20 <USBD_LL_Start>
}
 8003228:	bd08      	pop	{r3, pc}

0800322a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800322a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800322c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003230:	b113      	cbz	r3, 8003238 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4798      	blx	r3
  }

  return ret;
}
 8003236:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003238:	2003      	movs	r0, #3
 800323a:	e7fc      	b.n	8003236 <USBD_SetClassConfig+0xc>

0800323c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800323c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800323e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003242:	b10b      	cbz	r3, 8003248 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003248:	2000      	movs	r0, #0
 800324a:	bd08      	pop	{r3, pc}

0800324c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003250:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8003254:	4628      	mov	r0, r5
 8003256:	f000 f91b 	bl	8003490 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800325a:	2301      	movs	r3, #1
 800325c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003260:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8003264:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003268:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800326c:	f001 031f 	and.w	r3, r1, #31
 8003270:	2b01      	cmp	r3, #1
 8003272:	d00d      	beq.n	8003290 <USBD_LL_SetupStage+0x44>
 8003274:	b13b      	cbz	r3, 8003286 <USBD_LL_SetupStage+0x3a>
 8003276:	2b02      	cmp	r3, #2
 8003278:	d00f      	beq.n	800329a <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800327a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800327e:	4620      	mov	r0, r4
 8003280:	f000 fe69 	bl	8003f56 <USBD_LL_StallEP>
      break;
 8003284:	e003      	b.n	800328e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003286:	4629      	mov	r1, r5
 8003288:	4620      	mov	r0, r4
 800328a:	f000 face 	bl	800382a <USBD_StdDevReq>
  }

  return ret;
}
 800328e:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003290:	4629      	mov	r1, r5
 8003292:	4620      	mov	r0, r4
 8003294:	f000 fb04 	bl	80038a0 <USBD_StdItfReq>
      break;
 8003298:	e7f9      	b.n	800328e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800329a:	4629      	mov	r1, r5
 800329c:	4620      	mov	r0, r4
 800329e:	f000 fb33 	bl	8003908 <USBD_StdEPReq>
      break;
 80032a2:	e7f4      	b.n	800328e <USBD_LL_SetupStage+0x42>

080032a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80032a8:	bb29      	cbnz	r1, 80032f6 <USBD_LL_DataOutStage+0x52>
 80032aa:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80032ac:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80032b0:	2a03      	cmp	r2, #3
 80032b2:	d001      	beq.n	80032b8 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80032b4:	2000      	movs	r0, #0
 80032b6:	e029      	b.n	800330c <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 80032b8:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80032bc:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80032c0:	4291      	cmp	r1, r2
 80032c2:	d80d      	bhi.n	80032e0 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80032c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	b123      	cbz	r3, 80032d6 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80032cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80032d0:	2a03      	cmp	r2, #3
 80032d2:	d100      	bne.n	80032d6 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 80032d4:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 fc5e 	bl	8003b98 <USBD_CtlSendStatus>
  return USBD_OK;
 80032dc:	2000      	movs	r0, #0
 80032de:	e015      	b.n	800330c <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 80032e0:	1a89      	subs	r1, r1, r2
 80032e2:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80032e6:	428a      	cmp	r2, r1
 80032e8:	bf28      	it	cs
 80032ea:	460a      	movcs	r2, r1
 80032ec:	4619      	mov	r1, r3
 80032ee:	f000 fc4b 	bl	8003b88 <USBD_CtlContinueRx>
  return USBD_OK;
 80032f2:	2000      	movs	r0, #0
 80032f4:	e00a      	b.n	800330c <USBD_LL_DataOutStage+0x68>
 80032f6:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 80032f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	b133      	cbz	r3, 800330e <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003300:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003304:	2903      	cmp	r1, #3
 8003306:	d104      	bne.n	8003312 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8003308:	4611      	mov	r1, r2
 800330a:	4798      	blx	r3
}
 800330c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800330e:	2003      	movs	r0, #3
 8003310:	e7fc      	b.n	800330c <USBD_LL_DataOutStage+0x68>
 8003312:	2003      	movs	r0, #3
 8003314:	e7fa      	b.n	800330c <USBD_LL_DataOutStage+0x68>

08003316 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003316:	b510      	push	{r4, lr}
 8003318:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800331a:	2900      	cmp	r1, #0
 800331c:	d146      	bne.n	80033ac <USBD_LL_DataInStage+0x96>
 800331e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003320:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003324:	2a02      	cmp	r2, #2
 8003326:	d005      	beq.n	8003334 <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8003328:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800332c:	2b01      	cmp	r3, #1
 800332e:	d039      	beq.n	80033a4 <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003330:	2000      	movs	r0, #0
 8003332:	e046      	b.n	80033c2 <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 8003334:	69c2      	ldr	r2, [r0, #28]
 8003336:	6a01      	ldr	r1, [r0, #32]
 8003338:	428a      	cmp	r2, r1
 800333a:	d813      	bhi.n	8003364 <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 800333c:	428a      	cmp	r2, r1
 800333e:	d01d      	beq.n	800337c <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003340:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	b12b      	cbz	r3, 8003354 <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003348:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800334c:	2a03      	cmp	r2, #3
 800334e:	d101      	bne.n	8003354 <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 8003350:	4620      	mov	r0, r4
 8003352:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	4620      	mov	r0, r4
 8003358:	f000 fdfd 	bl	8003f56 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800335c:	4620      	mov	r0, r4
 800335e:	f000 fc26 	bl	8003bae <USBD_CtlReceiveStatus>
 8003362:	e7e1      	b.n	8003328 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 8003364:	1a52      	subs	r2, r2, r1
 8003366:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003368:	4619      	mov	r1, r3
 800336a:	f000 fbf6 	bl	8003b5a <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800336e:	2300      	movs	r3, #0
 8003370:	461a      	mov	r2, r3
 8003372:	4619      	mov	r1, r3
 8003374:	4620      	mov	r0, r4
 8003376:	f000 fe25 	bl	8003fc4 <USBD_LL_PrepareReceive>
 800337a:	e7d5      	b.n	8003328 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 800337c:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800337e:	4299      	cmp	r1, r3
 8003380:	d8de      	bhi.n	8003340 <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 8003382:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003386:	4293      	cmp	r3, r2
 8003388:	d2da      	bcs.n	8003340 <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800338a:	2200      	movs	r2, #0
 800338c:	4611      	mov	r1, r2
 800338e:	f000 fbe4 	bl	8003b5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003392:	2100      	movs	r1, #0
 8003394:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003398:	460b      	mov	r3, r1
 800339a:	460a      	mov	r2, r1
 800339c:	4620      	mov	r0, r4
 800339e:	f000 fe11 	bl	8003fc4 <USBD_LL_PrepareReceive>
 80033a2:	e7c1      	b.n	8003328 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 80033a4:	2000      	movs	r0, #0
 80033a6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 80033aa:	e00a      	b.n	80033c2 <USBD_LL_DataInStage+0xac>
 80033ac:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 80033ae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	b133      	cbz	r3, 80033c4 <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80033b6:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d104      	bne.n	80033c8 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80033be:	4611      	mov	r1, r2
 80033c0:	4798      	blx	r3
}
 80033c2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80033c4:	2003      	movs	r0, #3
 80033c6:	e7fc      	b.n	80033c2 <USBD_LL_DataInStage+0xac>
 80033c8:	2003      	movs	r0, #3
 80033ca:	e7fa      	b.n	80033c2 <USBD_LL_DataInStage+0xac>

080033cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80033dc:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80033de:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80033e2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80033e6:	b123      	cbz	r3, 80033f2 <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80033e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2100      	movs	r1, #0
 80033f0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80033f2:	2340      	movs	r3, #64	; 0x40
 80033f4:	2200      	movs	r2, #0
 80033f6:	4611      	mov	r1, r2
 80033f8:	4620      	mov	r0, r4
 80033fa:	f000 fd99 	bl	8003f30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80033fe:	2601      	movs	r6, #1
 8003400:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003404:	2540      	movs	r5, #64	; 0x40
 8003406:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800340a:	462b      	mov	r3, r5
 800340c:	2200      	movs	r2, #0
 800340e:	2180      	movs	r1, #128	; 0x80
 8003410:	4620      	mov	r0, r4
 8003412:	f000 fd8d 	bl	8003f30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003416:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003418:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800341a:	2000      	movs	r0, #0
 800341c:	bd70      	pop	{r4, r5, r6, pc}

0800341e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800341e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003420:	2000      	movs	r0, #0
 8003422:	4770      	bx	lr

08003424 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8003424:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003428:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800342c:	2304      	movs	r3, #4
 800342e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003432:	2000      	movs	r0, #0
 8003434:	4770      	bx	lr

08003436 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003436:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800343a:	2b04      	cmp	r3, #4
 800343c:	d001      	beq.n	8003442 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800343e:	2000      	movs	r0, #0
 8003440:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003442:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8003446:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800344a:	e7f8      	b.n	800343e <USBD_LL_Resume+0x8>

0800344c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800344c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800344e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003452:	2b03      	cmp	r3, #3
 8003454:	d001      	beq.n	800345a <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8003456:	2000      	movs	r0, #0
 8003458:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800345a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f8      	beq.n	8003456 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8003464:	4798      	blx	r3
 8003466:	e7f6      	b.n	8003456 <USBD_LL_SOF+0xa>

08003468 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 8003468:	2300      	movs	r3, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800346a:	e002      	b.n	8003472 <USBD_GetLen+0xa>
  {
    len++;
 800346c:	3301      	adds	r3, #1
 800346e:	b2db      	uxtb	r3, r3
    pbuff++;
 8003470:	3001      	adds	r0, #1
  while (*pbuff != (uint8_t)'\0')
 8003472:	7802      	ldrb	r2, [r0, #0]
 8003474:	2a00      	cmp	r2, #0
 8003476:	d1f9      	bne.n	800346c <USBD_GetLen+0x4>
  }

  return len;
}
 8003478:	4618      	mov	r0, r3
 800347a:	4770      	bx	lr

0800347c <USBD_SetFeature>:
{
 800347c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800347e:	884b      	ldrh	r3, [r1, #2]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d000      	beq.n	8003486 <USBD_SetFeature+0xa>
}
 8003484:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003486:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800348a:	f000 fb85 	bl	8003b98 <USBD_CtlSendStatus>
}
 800348e:	e7f9      	b.n	8003484 <USBD_SetFeature+0x8>

08003490 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8003490:	780b      	ldrb	r3, [r1, #0]
 8003492:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003494:	784b      	ldrb	r3, [r1, #1]
 8003496:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8003498:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800349a:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800349c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80034a0:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80034a2:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80034a4:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80034a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80034aa:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80034ac:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80034ae:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80034b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80034b4:	80c3      	strh	r3, [r0, #6]
}
 80034b6:	4770      	bx	lr

080034b8 <USBD_CtlError>:
{
 80034b8:	b510      	push	{r4, lr}
 80034ba:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	f000 fd4a 	bl	8003f56 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80034c2:	2100      	movs	r1, #0
 80034c4:	4620      	mov	r0, r4
 80034c6:	f000 fd46 	bl	8003f56 <USBD_LL_StallEP>
}
 80034ca:	bd10      	pop	{r4, pc}

080034cc <USBD_GetDescriptor>:
{
 80034cc:	b530      	push	{r4, r5, lr}
 80034ce:	b083      	sub	sp, #12
 80034d0:	4604      	mov	r4, r0
 80034d2:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80034da:	884a      	ldrh	r2, [r1, #2]
 80034dc:	0a13      	lsrs	r3, r2, #8
 80034de:	3b01      	subs	r3, #1
 80034e0:	2b0e      	cmp	r3, #14
 80034e2:	f200 80bc 	bhi.w	800365e <USBD_GetDescriptor+0x192>
 80034e6:	e8df f003 	tbb	[pc, r3]
 80034ea:	3015      	.short	0x3015
 80034ec:	9ebaba44 	.word	0x9ebaba44
 80034f0:	bababaab 	.word	0xbababaab
 80034f4:	babababa 	.word	0xbabababa
 80034f8:	08          	.byte	0x08
 80034f9:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80034fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	b123      	cbz	r3, 800350c <USBD_GetDescriptor+0x40>
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8003502:	f10d 0106 	add.w	r1, sp, #6
 8003506:	7c00      	ldrb	r0, [r0, #16]
 8003508:	4798      	blx	r3
 800350a:	e00a      	b.n	8003522 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 800350c:	4629      	mov	r1, r5
 800350e:	f7ff ffd3 	bl	80034b8 <USBD_CtlError>
 8003512:	e018      	b.n	8003546 <USBD_GetDescriptor+0x7a>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003514:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f10d 0106 	add.w	r1, sp, #6
 800351e:	7c00      	ldrb	r0, [r0, #16]
 8003520:	4798      	blx	r3
    if (req->wLength != 0U)
 8003522:	88ea      	ldrh	r2, [r5, #6]
 8003524:	2a00      	cmp	r2, #0
 8003526:	f000 80a3 	beq.w	8003670 <USBD_GetDescriptor+0x1a4>
      if (len != 0U)
 800352a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8099 	beq.w	8003666 <USBD_GetDescriptor+0x19a>
        len = MIN(len, req->wLength);
 8003534:	429a      	cmp	r2, r3
 8003536:	bf28      	it	cs
 8003538:	461a      	movcs	r2, r3
 800353a:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800353e:	4601      	mov	r1, r0
 8003540:	4620      	mov	r0, r4
 8003542:	f000 fafd 	bl	8003b40 <USBD_CtlSendData>
}
 8003546:	b003      	add	sp, #12
 8003548:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800354a:	7c03      	ldrb	r3, [r0, #16]
 800354c:	b943      	cbnz	r3, 8003560 <USBD_GetDescriptor+0x94>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800354e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	f10d 0006 	add.w	r0, sp, #6
 8003558:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800355a:	2302      	movs	r3, #2
 800355c:	7043      	strb	r3, [r0, #1]
 800355e:	e7e0      	b.n	8003522 <USBD_GetDescriptor+0x56>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003560:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f10d 0006 	add.w	r0, sp, #6
 800356a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800356c:	2302      	movs	r3, #2
 800356e:	7043      	strb	r3, [r0, #1]
 8003570:	e7d7      	b.n	8003522 <USBD_GetDescriptor+0x56>
    switch ((uint8_t)(req->wValue))
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	2a05      	cmp	r2, #5
 8003576:	d852      	bhi.n	800361e <USBD_GetDescriptor+0x152>
 8003578:	e8df f002 	tbb	[pc, r2]
 800357c:	2a1d1003 	.word	0x2a1d1003
 8003580:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003582:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	b123      	cbz	r3, 8003594 <USBD_GetDescriptor+0xc8>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800358a:	f10d 0106 	add.w	r1, sp, #6
 800358e:	7c00      	ldrb	r0, [r0, #16]
 8003590:	4798      	blx	r3
 8003592:	e7c6      	b.n	8003522 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8003594:	4629      	mov	r1, r5
 8003596:	f7ff ff8f 	bl	80034b8 <USBD_CtlError>
 800359a:	e7d4      	b.n	8003546 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800359c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	b123      	cbz	r3, 80035ae <USBD_GetDescriptor+0xe2>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80035a4:	f10d 0106 	add.w	r1, sp, #6
 80035a8:	7c00      	ldrb	r0, [r0, #16]
 80035aa:	4798      	blx	r3
 80035ac:	e7b9      	b.n	8003522 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7ff ff82 	bl	80034b8 <USBD_CtlError>
 80035b4:	e7c7      	b.n	8003546 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80035b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	b123      	cbz	r3, 80035c8 <USBD_GetDescriptor+0xfc>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80035be:	f10d 0106 	add.w	r1, sp, #6
 80035c2:	7c00      	ldrb	r0, [r0, #16]
 80035c4:	4798      	blx	r3
 80035c6:	e7ac      	b.n	8003522 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80035c8:	4629      	mov	r1, r5
 80035ca:	f7ff ff75 	bl	80034b8 <USBD_CtlError>
 80035ce:	e7ba      	b.n	8003546 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80035d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	b123      	cbz	r3, 80035e2 <USBD_GetDescriptor+0x116>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80035d8:	f10d 0106 	add.w	r1, sp, #6
 80035dc:	7c00      	ldrb	r0, [r0, #16]
 80035de:	4798      	blx	r3
 80035e0:	e79f      	b.n	8003522 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80035e2:	4629      	mov	r1, r5
 80035e4:	f7ff ff68 	bl	80034b8 <USBD_CtlError>
 80035e8:	e7ad      	b.n	8003546 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80035ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	b123      	cbz	r3, 80035fc <USBD_GetDescriptor+0x130>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80035f2:	f10d 0106 	add.w	r1, sp, #6
 80035f6:	7c00      	ldrb	r0, [r0, #16]
 80035f8:	4798      	blx	r3
 80035fa:	e792      	b.n	8003522 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7ff ff5b 	bl	80034b8 <USBD_CtlError>
 8003602:	e7a0      	b.n	8003546 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003604:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	b123      	cbz	r3, 8003616 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800360c:	f10d 0106 	add.w	r1, sp, #6
 8003610:	7c00      	ldrb	r0, [r0, #16]
 8003612:	4798      	blx	r3
 8003614:	e785      	b.n	8003522 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8003616:	4629      	mov	r1, r5
 8003618:	f7ff ff4e 	bl	80034b8 <USBD_CtlError>
 800361c:	e793      	b.n	8003546 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 800361e:	4629      	mov	r1, r5
 8003620:	f7ff ff4a 	bl	80034b8 <USBD_CtlError>
 8003624:	e78f      	b.n	8003546 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003626:	7c03      	ldrb	r3, [r0, #16]
 8003628:	b933      	cbnz	r3, 8003638 <USBD_GetDescriptor+0x16c>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800362a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800362e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003630:	f10d 0006 	add.w	r0, sp, #6
 8003634:	4798      	blx	r3
 8003636:	e774      	b.n	8003522 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 8003638:	4629      	mov	r1, r5
 800363a:	f7ff ff3d 	bl	80034b8 <USBD_CtlError>
 800363e:	e782      	b.n	8003546 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003640:	7c03      	ldrb	r3, [r0, #16]
 8003642:	b943      	cbnz	r3, 8003656 <USBD_GetDescriptor+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003644:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f10d 0006 	add.w	r0, sp, #6
 800364e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003650:	2307      	movs	r3, #7
 8003652:	7043      	strb	r3, [r0, #1]
 8003654:	e765      	b.n	8003522 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 8003656:	4629      	mov	r1, r5
 8003658:	f7ff ff2e 	bl	80034b8 <USBD_CtlError>
 800365c:	e773      	b.n	8003546 <USBD_GetDescriptor+0x7a>
    USBD_CtlError(pdev, req);
 800365e:	4629      	mov	r1, r5
 8003660:	f7ff ff2a 	bl	80034b8 <USBD_CtlError>
 8003664:	e76f      	b.n	8003546 <USBD_GetDescriptor+0x7a>
        USBD_CtlError(pdev, req);
 8003666:	4629      	mov	r1, r5
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff ff25 	bl	80034b8 <USBD_CtlError>
 800366e:	e76a      	b.n	8003546 <USBD_GetDescriptor+0x7a>
      (void)USBD_CtlSendStatus(pdev);
 8003670:	4620      	mov	r0, r4
 8003672:	f000 fa91 	bl	8003b98 <USBD_CtlSendStatus>
 8003676:	e766      	b.n	8003546 <USBD_GetDescriptor+0x7a>

08003678 <USBD_SetAddress>:
{
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800367c:	888b      	ldrh	r3, [r1, #4]
 800367e:	b9f3      	cbnz	r3, 80036be <USBD_SetAddress+0x46>
 8003680:	88cb      	ldrh	r3, [r1, #6]
 8003682:	b9e3      	cbnz	r3, 80036be <USBD_SetAddress+0x46>
 8003684:	884b      	ldrh	r3, [r1, #2]
 8003686:	2b7f      	cmp	r3, #127	; 0x7f
 8003688:	d819      	bhi.n	80036be <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800368a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800368e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003692:	2b03      	cmp	r3, #3
 8003694:	d00c      	beq.n	80036b0 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8003696:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800369a:	4629      	mov	r1, r5
 800369c:	f000 fc82 	bl	8003fa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80036a0:	4620      	mov	r0, r4
 80036a2:	f000 fa79 	bl	8003b98 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80036a6:	b135      	cbz	r5, 80036b6 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80036a8:	2302      	movs	r3, #2
 80036aa:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80036ae:	e009      	b.n	80036c4 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80036b0:	f7ff ff02 	bl	80034b8 <USBD_CtlError>
 80036b4:	e006      	b.n	80036c4 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80036bc:	e002      	b.n	80036c4 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80036be:	4620      	mov	r0, r4
 80036c0:	f7ff fefa 	bl	80034b8 <USBD_CtlError>
}
 80036c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080036c8 <USBD_SetConfig>:
{
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4604      	mov	r4, r0
 80036cc:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80036ce:	7889      	ldrb	r1, [r1, #2]
 80036d0:	4b2e      	ldr	r3, [pc, #184]	; (800378c <USBD_SetConfig+0xc4>)
 80036d2:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80036d4:	2901      	cmp	r1, #1
 80036d6:	d80f      	bhi.n	80036f8 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 80036d8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d011      	beq.n	8003704 <USBD_SetConfig+0x3c>
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d025      	beq.n	8003730 <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 80036e4:	4629      	mov	r1, r5
 80036e6:	f7ff fee7 	bl	80034b8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80036ea:	4b28      	ldr	r3, [pc, #160]	; (800378c <USBD_SetConfig+0xc4>)
 80036ec:	7819      	ldrb	r1, [r3, #0]
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7ff fda4 	bl	800323c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80036f4:	2603      	movs	r6, #3
    break;
 80036f6:	e003      	b.n	8003700 <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 80036f8:	4629      	mov	r1, r5
 80036fa:	f7ff fedd 	bl	80034b8 <USBD_CtlError>
    return USBD_FAIL;
 80036fe:	2603      	movs	r6, #3
}
 8003700:	4630      	mov	r0, r6
 8003702:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 8003704:	b181      	cbz	r1, 8003728 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 8003706:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003708:	f7ff fd8f 	bl	800322a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800370c:	4606      	mov	r6, r0
 800370e:	b120      	cbz	r0, 800371a <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 8003710:	4629      	mov	r1, r5
 8003712:	4620      	mov	r0, r4
 8003714:	f7ff fed0 	bl	80034b8 <USBD_CtlError>
 8003718:	e7f2      	b.n	8003700 <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 800371a:	4620      	mov	r0, r4
 800371c:	f000 fa3c 	bl	8003b98 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003720:	2303      	movs	r3, #3
 8003722:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003726:	e7eb      	b.n	8003700 <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8003728:	f000 fa36 	bl	8003b98 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800372c:	2600      	movs	r6, #0
 800372e:	e7e7      	b.n	8003700 <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 8003730:	b1c9      	cbz	r1, 8003766 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 8003732:	6843      	ldr	r3, [r0, #4]
 8003734:	4299      	cmp	r1, r3
 8003736:	d025      	beq.n	8003784 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003738:	b2d9      	uxtb	r1, r3
 800373a:	f7ff fd7f 	bl	800323c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <USBD_SetConfig+0xc4>)
 8003740:	7819      	ldrb	r1, [r3, #0]
 8003742:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003744:	4620      	mov	r0, r4
 8003746:	f7ff fd70 	bl	800322a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800374a:	4606      	mov	r6, r0
 800374c:	b1b0      	cbz	r0, 800377c <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 800374e:	4629      	mov	r1, r5
 8003750:	4620      	mov	r0, r4
 8003752:	f7ff feb1 	bl	80034b8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003756:	7921      	ldrb	r1, [r4, #4]
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff fd6f 	bl	800323c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800375e:	2302      	movs	r3, #2
 8003760:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003764:	e7cc      	b.n	8003700 <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8003766:	2302      	movs	r3, #2
 8003768:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800376c:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800376e:	f7ff fd65 	bl	800323c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8003772:	4620      	mov	r0, r4
 8003774:	f000 fa10 	bl	8003b98 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003778:	2600      	movs	r6, #0
 800377a:	e7c1      	b.n	8003700 <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 800377c:	4620      	mov	r0, r4
 800377e:	f000 fa0b 	bl	8003b98 <USBD_CtlSendStatus>
 8003782:	e7bd      	b.n	8003700 <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8003784:	f000 fa08 	bl	8003b98 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003788:	2600      	movs	r6, #0
 800378a:	e7b9      	b.n	8003700 <USBD_SetConfig+0x38>
 800378c:	200001a0 	.word	0x200001a0

08003790 <USBD_GetConfig>:
{
 8003790:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8003792:	88cb      	ldrh	r3, [r1, #6]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10b      	bne.n	80037b0 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8003798:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800379c:	b19b      	cbz	r3, 80037c6 <USBD_GetConfig+0x36>
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d909      	bls.n	80037b6 <USBD_GetConfig+0x26>
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d10f      	bne.n	80037c6 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80037a6:	2201      	movs	r2, #1
 80037a8:	1d01      	adds	r1, r0, #4
 80037aa:	f000 f9c9 	bl	8003b40 <USBD_CtlSendData>
      break;
 80037ae:	e001      	b.n	80037b4 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80037b0:	f7ff fe82 	bl	80034b8 <USBD_CtlError>
}
 80037b4:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 80037b6:	4601      	mov	r1, r0
 80037b8:	2300      	movs	r3, #0
 80037ba:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80037be:	2201      	movs	r2, #1
 80037c0:	f000 f9be 	bl	8003b40 <USBD_CtlSendData>
      break;
 80037c4:	e7f6      	b.n	80037b4 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 80037c6:	f7ff fe77 	bl	80034b8 <USBD_CtlError>
}
 80037ca:	e7f3      	b.n	80037b4 <USBD_GetConfig+0x24>

080037cc <USBD_GetStatus>:
{
 80037cc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80037ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037d2:	3b01      	subs	r3, #1
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d812      	bhi.n	80037fe <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 80037d8:	88cb      	ldrh	r3, [r1, #6]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d10c      	bne.n	80037f8 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80037de:	2301      	movs	r3, #1
 80037e0:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 80037e2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80037e6:	b10b      	cbz	r3, 80037ec <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80037e8:	2303      	movs	r3, #3
 80037ea:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80037ec:	2202      	movs	r2, #2
 80037ee:	f100 010c 	add.w	r1, r0, #12
 80037f2:	f000 f9a5 	bl	8003b40 <USBD_CtlSendData>
}
 80037f6:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 80037f8:	f7ff fe5e 	bl	80034b8 <USBD_CtlError>
      break;
 80037fc:	e7fb      	b.n	80037f6 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 80037fe:	f7ff fe5b 	bl	80034b8 <USBD_CtlError>
}
 8003802:	e7f8      	b.n	80037f6 <USBD_GetStatus+0x2a>

08003804 <USBD_ClrFeature>:
{
 8003804:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003806:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800380a:	3b01      	subs	r3, #1
 800380c:	2b02      	cmp	r3, #2
 800380e:	d809      	bhi.n	8003824 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003810:	884b      	ldrh	r3, [r1, #2]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d000      	beq.n	8003818 <USBD_ClrFeature+0x14>
}
 8003816:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800381e:	f000 f9bb 	bl	8003b98 <USBD_CtlSendStatus>
 8003822:	e7f8      	b.n	8003816 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8003824:	f7ff fe48 	bl	80034b8 <USBD_CtlError>
}
 8003828:	e7f5      	b.n	8003816 <USBD_ClrFeature+0x12>

0800382a <USBD_StdDevReq>:
{
 800382a:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800382c:	780b      	ldrb	r3, [r1, #0]
 800382e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003832:	2b20      	cmp	r3, #32
 8003834:	d006      	beq.n	8003844 <USBD_StdDevReq+0x1a>
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d004      	beq.n	8003844 <USBD_StdDevReq+0x1a>
 800383a:	b143      	cbz	r3, 800384e <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 800383c:	f7ff fe3c 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003840:	2000      	movs	r0, #0
    break;
 8003842:	e003      	b.n	800384c <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003844:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4798      	blx	r3
}
 800384c:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 800384e:	784b      	ldrb	r3, [r1, #1]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d821      	bhi.n	8003898 <USBD_StdDevReq+0x6e>
 8003854:	e8df f003 	tbb	[pc, r3]
 8003858:	18201c14 	.word	0x18201c14
 800385c:	20050920 	.word	0x20050920
 8003860:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 8003862:	f7ff fe33 	bl	80034cc <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 8003866:	2000      	movs	r0, #0
      break;
 8003868:	e7f0      	b.n	800384c <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 800386a:	f7ff ff05 	bl	8003678 <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 800386e:	2000      	movs	r0, #0
      break;
 8003870:	e7ec      	b.n	800384c <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 8003872:	f7ff ff29 	bl	80036c8 <USBD_SetConfig>
      break;
 8003876:	e7e9      	b.n	800384c <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 8003878:	f7ff ff8a 	bl	8003790 <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 800387c:	2000      	movs	r0, #0
      break;
 800387e:	e7e5      	b.n	800384c <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 8003880:	f7ff ffa4 	bl	80037cc <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003884:	2000      	movs	r0, #0
      break;
 8003886:	e7e1      	b.n	800384c <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 8003888:	f7ff fdf8 	bl	800347c <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 800388c:	2000      	movs	r0, #0
      break;
 800388e:	e7dd      	b.n	800384c <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 8003890:	f7ff ffb8 	bl	8003804 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 8003894:	2000      	movs	r0, #0
      break;
 8003896:	e7d9      	b.n	800384c <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 8003898:	f7ff fe0e 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800389c:	2000      	movs	r0, #0
      break;
 800389e:	e7d5      	b.n	800384c <USBD_StdDevReq+0x22>

080038a0 <USBD_StdItfReq>:
{
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	4605      	mov	r5, r0
 80038a4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038a6:	780b      	ldrb	r3, [r1, #0]
 80038a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d007      	beq.n	80038c0 <USBD_StdItfReq+0x20>
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d005      	beq.n	80038c0 <USBD_StdItfReq+0x20>
 80038b4:	b123      	cbz	r3, 80038c0 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 80038b6:	f7ff fdff 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80038ba:	2600      	movs	r6, #0
}
 80038bc:	4630      	mov	r0, r6
 80038be:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 80038c0:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80038c4:	3b01      	subs	r3, #1
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d818      	bhi.n	80038fc <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80038ca:	7923      	ldrb	r3, [r4, #4]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d80f      	bhi.n	80038f0 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80038d0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4621      	mov	r1, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	4798      	blx	r3
 80038dc:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80038de:	88e3      	ldrh	r3, [r4, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1eb      	bne.n	80038bc <USBD_StdItfReq+0x1c>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1e9      	bne.n	80038bc <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 80038e8:	4628      	mov	r0, r5
 80038ea:	f000 f955 	bl	8003b98 <USBD_CtlSendStatus>
 80038ee:	e7e5      	b.n	80038bc <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 80038f0:	4621      	mov	r1, r4
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7ff fde0 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80038f8:	2600      	movs	r6, #0
 80038fa:	e7df      	b.n	80038bc <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 80038fc:	4621      	mov	r1, r4
 80038fe:	4628      	mov	r0, r5
 8003900:	f7ff fdda 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003904:	2600      	movs	r6, #0
      break;
 8003906:	e7d9      	b.n	80038bc <USBD_StdItfReq+0x1c>

08003908 <USBD_StdEPReq>:
{
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4605      	mov	r5, r0
 800390c:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800390e:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003910:	780b      	ldrb	r3, [r1, #0]
 8003912:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003916:	2b20      	cmp	r3, #32
 8003918:	d008      	beq.n	800392c <USBD_StdEPReq+0x24>
 800391a:	b2d1      	uxtb	r1, r2
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d005      	beq.n	800392c <USBD_StdEPReq+0x24>
 8003920:	b15b      	cbz	r3, 800393a <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 8003922:	4621      	mov	r1, r4
 8003924:	f7ff fdc8 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003928:	2000      	movs	r0, #0
    break;
 800392a:	e005      	b.n	8003938 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800392c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4621      	mov	r1, r4
 8003934:	4628      	mov	r0, r5
 8003936:	4798      	blx	r3
}
 8003938:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800393a:	7863      	ldrb	r3, [r4, #1]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d02f      	beq.n	80039a0 <USBD_StdEPReq+0x98>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05d      	beq.n	8003a00 <USBD_StdEPReq+0xf8>
 8003944:	2b03      	cmp	r3, #3
 8003946:	f040 80d8 	bne.w	8003afa <USBD_StdEPReq+0x1f2>
      switch (pdev->dev_state)
 800394a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800394e:	2b02      	cmp	r3, #2
 8003950:	d006      	beq.n	8003960 <USBD_StdEPReq+0x58>
 8003952:	2b03      	cmp	r3, #3
 8003954:	d015      	beq.n	8003982 <USBD_StdEPReq+0x7a>
        USBD_CtlError(pdev, req);
 8003956:	4621      	mov	r1, r4
 8003958:	f7ff fdae 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800395c:	2000      	movs	r0, #0
        break;
 800395e:	e7eb      	b.n	8003938 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003960:	b109      	cbz	r1, 8003966 <USBD_StdEPReq+0x5e>
 8003962:	2980      	cmp	r1, #128	; 0x80
 8003964:	d105      	bne.n	8003972 <USBD_StdEPReq+0x6a>
          USBD_CtlError(pdev, req);
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f7ff fda5 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800396e:	2000      	movs	r0, #0
 8003970:	e7e2      	b.n	8003938 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8003972:	f000 faf0 	bl	8003f56 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	4628      	mov	r0, r5
 800397a:	f000 faec 	bl	8003f56 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800397e:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003980:	e7da      	b.n	8003938 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003982:	8863      	ldrh	r3, [r4, #2]
 8003984:	b923      	cbnz	r3, 8003990 <USBD_StdEPReq+0x88>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003986:	b119      	cbz	r1, 8003990 <USBD_StdEPReq+0x88>
 8003988:	2980      	cmp	r1, #128	; 0x80
 800398a:	d001      	beq.n	8003990 <USBD_StdEPReq+0x88>
 800398c:	88e3      	ldrh	r3, [r4, #6]
 800398e:	b123      	cbz	r3, 800399a <USBD_StdEPReq+0x92>
        (void)USBD_CtlSendStatus(pdev);
 8003990:	4628      	mov	r0, r5
 8003992:	f000 f901 	bl	8003b98 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003996:	2000      	movs	r0, #0
        break;
 8003998:	e7ce      	b.n	8003938 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800399a:	f000 fadc 	bl	8003f56 <USBD_LL_StallEP>
 800399e:	e7f7      	b.n	8003990 <USBD_StdEPReq+0x88>
      switch (pdev->dev_state)
 80039a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d006      	beq.n	80039b6 <USBD_StdEPReq+0xae>
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d015      	beq.n	80039d8 <USBD_StdEPReq+0xd0>
        USBD_CtlError(pdev, req);
 80039ac:	4621      	mov	r1, r4
 80039ae:	f7ff fd83 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80039b2:	2000      	movs	r0, #0
        break;
 80039b4:	e7c0      	b.n	8003938 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80039b6:	b109      	cbz	r1, 80039bc <USBD_StdEPReq+0xb4>
 80039b8:	2980      	cmp	r1, #128	; 0x80
 80039ba:	d105      	bne.n	80039c8 <USBD_StdEPReq+0xc0>
          USBD_CtlError(pdev, req);
 80039bc:	4621      	mov	r1, r4
 80039be:	4628      	mov	r0, r5
 80039c0:	f7ff fd7a 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80039c4:	2000      	movs	r0, #0
 80039c6:	e7b7      	b.n	8003938 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80039c8:	f000 fac5 	bl	8003f56 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	4628      	mov	r0, r5
 80039d0:	f000 fac1 	bl	8003f56 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80039d4:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80039d6:	e7af      	b.n	8003938 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80039d8:	8863      	ldrh	r3, [r4, #2]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 8092 	bne.w	8003b04 <USBD_StdEPReq+0x1fc>
          if ((ep_addr & 0x7FU) != 0x00U)
 80039e0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80039e4:	d109      	bne.n	80039fa <USBD_StdEPReq+0xf2>
          (void)USBD_CtlSendStatus(pdev);
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 f8d6 	bl	8003b98 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80039ec:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4621      	mov	r1, r4
 80039f4:	4628      	mov	r0, r5
 80039f6:	4798      	blx	r3
 80039f8:	e79e      	b.n	8003938 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80039fa:	f000 fab4 	bl	8003f66 <USBD_LL_ClearStallEP>
 80039fe:	e7f2      	b.n	80039e6 <USBD_StdEPReq+0xde>
      switch (pdev->dev_state)
 8003a00:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d006      	beq.n	8003a16 <USBD_StdEPReq+0x10e>
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d02a      	beq.n	8003a62 <USBD_StdEPReq+0x15a>
        USBD_CtlError(pdev, req);
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	f7ff fd53 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003a12:	2000      	movs	r0, #0
        break;
 8003a14:	e790      	b.n	8003938 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a16:	b109      	cbz	r1, 8003a1c <USBD_StdEPReq+0x114>
 8003a18:	2980      	cmp	r1, #128	; 0x80
 8003a1a:	d113      	bne.n	8003a44 <USBD_StdEPReq+0x13c>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a1c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a20:	d115      	bne.n	8003a4e <USBD_StdEPReq+0x146>
              &pdev->ep_out[ep_addr & 0x7FU];
 8003a22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a2a:	008b      	lsls	r3, r1, #2
 8003a2c:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8003a30:	4429      	add	r1, r5
 8003a32:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8003a34:	2400      	movs	r4, #0
 8003a36:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 f880 	bl	8003b40 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003a40:	4620      	mov	r0, r4
        break;
 8003a42:	e779      	b.n	8003938 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8003a44:	4621      	mov	r1, r4
 8003a46:	f7ff fd37 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003a4a:	2000      	movs	r0, #0
          break;
 8003a4c:	e774      	b.n	8003938 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a4e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003a52:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a56:	008b      	lsls	r3, r1, #2
 8003a58:	f103 0110 	add.w	r1, r3, #16
 8003a5c:	4429      	add	r1, r5
 8003a5e:	3104      	adds	r1, #4
 8003a60:	e7e8      	b.n	8003a34 <USBD_StdEPReq+0x12c>
        if ((ep_addr & 0x80U) == 0x80U)
 8003a62:	b252      	sxtb	r2, r2
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	db1f      	blt.n	8003aa8 <USBD_StdEPReq+0x1a0>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003a68:	f001 030f 	and.w	r3, r1, #15
 8003a6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a70:	0098      	lsls	r0, r3, #2
 8003a72:	4428      	add	r0, r5
 8003a74:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 8003a78:	b32b      	cbz	r3, 8003ac6 <USBD_StdEPReq+0x1be>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a7a:	2a00      	cmp	r2, #0
 8003a7c:	db29      	blt.n	8003ad2 <USBD_StdEPReq+0x1ca>
              &pdev->ep_out[ep_addr & 0x7FU];
 8003a7e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a86:	0093      	lsls	r3, r2, #2
 8003a88:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8003a8c:	442c      	add	r4, r5
 8003a8e:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003a90:	b109      	cbz	r1, 8003a96 <USBD_StdEPReq+0x18e>
 8003a92:	2980      	cmp	r1, #128	; 0x80
 8003a94:	d127      	bne.n	8003ae6 <USBD_StdEPReq+0x1de>
            pep->status = 0x0000U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f84e 	bl	8003b40 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003aa4:	2000      	movs	r0, #0
          break;
 8003aa6:	e747      	b.n	8003938 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003aa8:	f001 030f 	and.w	r3, r1, #15
 8003aac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ab0:	0098      	lsls	r0, r3, #2
 8003ab2:	4428      	add	r0, r5
 8003ab4:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1df      	bne.n	8003a7a <USBD_StdEPReq+0x172>
            USBD_CtlError(pdev, req);
 8003aba:	4621      	mov	r1, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	f7ff fcfb 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003ac2:	2000      	movs	r0, #0
            break;
 8003ac4:	e738      	b.n	8003938 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f7ff fcf5 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003ace:	2000      	movs	r0, #0
            break;
 8003ad0:	e732      	b.n	8003938 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003ad2:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8003ad6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ada:	0093      	lsls	r3, r2, #2
 8003adc:	f103 0410 	add.w	r4, r3, #16
 8003ae0:	442c      	add	r4, r5
 8003ae2:	3404      	adds	r4, #4
 8003ae4:	e7d4      	b.n	8003a90 <USBD_StdEPReq+0x188>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f000 fa45 	bl	8003f76 <USBD_LL_IsStallEP>
 8003aec:	b110      	cbz	r0, 8003af4 <USBD_StdEPReq+0x1ec>
            pep->status = 0x0001U;
 8003aee:	2301      	movs	r3, #1
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	e7d2      	b.n	8003a9a <USBD_StdEPReq+0x192>
            pep->status = 0x0000U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	e7cf      	b.n	8003a9a <USBD_StdEPReq+0x192>
      USBD_CtlError(pdev, req);
 8003afa:	4621      	mov	r1, r4
 8003afc:	f7ff fcdc 	bl	80034b8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003b00:	2000      	movs	r0, #0
      break;
 8003b02:	e719      	b.n	8003938 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 8003b04:	2000      	movs	r0, #0
 8003b06:	e717      	b.n	8003938 <USBD_StdEPReq+0x30>

08003b08 <USBD_GetString>:
  if (desc == NULL)
 8003b08:	b1c8      	cbz	r0, 8003b3e <USBD_GetString+0x36>
{
 8003b0a:	b570      	push	{r4, r5, r6, lr}
 8003b0c:	460d      	mov	r5, r1
 8003b0e:	4616      	mov	r6, r2
 8003b10:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8003b12:	f7ff fca9 	bl	8003468 <USBD_GetLen>
 8003b16:	3001      	adds	r0, #1
 8003b18:	0040      	lsls	r0, r0, #1
 8003b1a:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8003b1c:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	706b      	strb	r3, [r5, #1]
  idx++;
 8003b22:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8003b24:	e007      	b.n	8003b36 <USBD_GetString+0x2e>
    unicode[idx] = *pdesc;
 8003b26:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8003b28:	3401      	adds	r4, #1
    idx++;
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8003b2e:	2100      	movs	r1, #0
 8003b30:	54a9      	strb	r1, [r5, r2]
    idx++;
 8003b32:	3302      	adds	r3, #2
 8003b34:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8003b36:	7822      	ldrb	r2, [r4, #0]
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	d1f4      	bne.n	8003b26 <USBD_GetString+0x1e>
}
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
 8003b3e:	4770      	bx	lr

08003b40 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8003b40:	b510      	push	{r4, lr}
 8003b42:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003b44:	2202      	movs	r2, #2
 8003b46:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8003b4a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8003b4c:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003b4e:	460a      	mov	r2, r1
 8003b50:	2100      	movs	r1, #0
 8003b52:	f000 fa2f 	bl	8003fb4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b56:	2000      	movs	r0, #0
 8003b58:	bd10      	pop	{r4, pc}

08003b5a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8003b5a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	460a      	mov	r2, r1
 8003b60:	2100      	movs	r1, #0
 8003b62:	f000 fa27 	bl	8003fb4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b66:	2000      	movs	r0, #0
 8003b68:	bd08      	pop	{r3, pc}

08003b6a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003b6e:	2203      	movs	r2, #3
 8003b70:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8003b74:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8003b78:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	2100      	movs	r1, #0
 8003b80:	f000 fa20 	bl	8003fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003b84:	2000      	movs	r0, #0
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8003b88:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	460a      	mov	r2, r1
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f000 fa18 	bl	8003fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003b94:	2000      	movs	r0, #0
 8003b96:	bd08      	pop	{r3, pc}

08003b98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003b98:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f000 fa05 	bl	8003fb4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003baa:	2000      	movs	r0, #0
 8003bac:	bd08      	pop	{r3, pc}

08003bae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003bae:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f000 fa02 	bl	8003fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	bd08      	pop	{r3, pc}

08003bc4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8003bc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	490f      	ldr	r1, [pc, #60]	; (8003c08 <MX_USB_Device_Init+0x44>)
 8003bca:	4810      	ldr	r0, [pc, #64]	; (8003c0c <MX_USB_Device_Init+0x48>)
 8003bcc:	f7ff fafb 	bl	80031c6 <USBD_Init>
 8003bd0:	b970      	cbnz	r0, 8003bf0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8003bd2:	490f      	ldr	r1, [pc, #60]	; (8003c10 <MX_USB_Device_Init+0x4c>)
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <MX_USB_Device_Init+0x48>)
 8003bd6:	f7ff fb0d 	bl	80031f4 <USBD_RegisterClass>
 8003bda:	b960      	cbnz	r0, 8003bf6 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8003bdc:	490d      	ldr	r1, [pc, #52]	; (8003c14 <MX_USB_Device_Init+0x50>)
 8003bde:	480b      	ldr	r0, [pc, #44]	; (8003c0c <MX_USB_Device_Init+0x48>)
 8003be0:	f7ff fac3 	bl	800316a <USBD_CDC_RegisterInterface>
 8003be4:	b950      	cbnz	r0, 8003bfc <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8003be6:	4809      	ldr	r0, [pc, #36]	; (8003c0c <MX_USB_Device_Init+0x48>)
 8003be8:	f7ff fb1b 	bl	8003222 <USBD_Start>
 8003bec:	b948      	cbnz	r0, 8003c02 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8003bee:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003bf0:	f7fc fb82 	bl	80002f8 <Error_Handler>
 8003bf4:	e7ed      	b.n	8003bd2 <MX_USB_Device_Init+0xe>
    Error_Handler();
 8003bf6:	f7fc fb7f 	bl	80002f8 <Error_Handler>
 8003bfa:	e7ef      	b.n	8003bdc <MX_USB_Device_Init+0x18>
    Error_Handler();
 8003bfc:	f7fc fb7c 	bl	80002f8 <Error_Handler>
 8003c00:	e7f1      	b.n	8003be6 <MX_USB_Device_Init+0x22>
    Error_Handler();
 8003c02:	f7fc fb79 	bl	80002f8 <Error_Handler>
}
 8003c06:	e7f2      	b.n	8003bee <MX_USB_Device_Init+0x2a>
 8003c08:	20000130 	.word	0x20000130
 8003c0c:	200003c8 	.word	0x200003c8
 8003c10:	2000000c 	.word	0x2000000c
 8003c14:	2000011c 	.word	0x2000011c

08003c18 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003c18:	2000      	movs	r0, #0
 8003c1a:	4770      	bx	lr

08003c1c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	4770      	bx	lr

08003c20 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8003c20:	2000      	movs	r0, #0
 8003c22:	4770      	bx	lr

08003c24 <CDC_Receive_FS>:
{
 8003c24:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003c26:	4c05      	ldr	r4, [pc, #20]	; (8003c3c <CDC_Receive_FS+0x18>)
 8003c28:	4601      	mov	r1, r0
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff faac 	bl	8003188 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7ff faaf 	bl	8003194 <USBD_CDC_ReceivePacket>
}
 8003c36:	2000      	movs	r0, #0
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200003c8 	.word	0x200003c8

08003c40 <CDC_Init_FS>:
{
 8003c40:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003c42:	4c06      	ldr	r4, [pc, #24]	; (8003c5c <CDC_Init_FS+0x1c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	4906      	ldr	r1, [pc, #24]	; (8003c60 <CDC_Init_FS+0x20>)
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f7ff fa95 	bl	8003178 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003c4e:	4905      	ldr	r1, [pc, #20]	; (8003c64 <CDC_Init_FS+0x24>)
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff fa99 	bl	8003188 <USBD_CDC_SetRxBuffer>
}
 8003c56:	2000      	movs	r0, #0
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200003c8 	.word	0x200003c8
 8003c60:	20000e98 	.word	0x20000e98
 8003c64:	20000698 	.word	0x20000698

08003c68 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8003c68:	2312      	movs	r3, #18
 8003c6a:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8003c6c:	4800      	ldr	r0, [pc, #0]	; (8003c70 <USBD_CDC_DeviceDescriptor+0x8>)
 8003c6e:	4770      	bx	lr
 8003c70:	20000150 	.word	0x20000150

08003c74 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003c74:	2304      	movs	r3, #4
 8003c76:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003c78:	4800      	ldr	r0, [pc, #0]	; (8003c7c <USBD_CDC_LangIDStrDescriptor+0x8>)
 8003c7a:	4770      	bx	lr
 8003c7c:	20000164 	.word	0x20000164

08003c80 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d216      	bcs.n	8003cb4 <IntToUnicode+0x34>
{
 8003c86:	b430      	push	{r4, r5}
 8003c88:	e00b      	b.n	8003ca2 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003c8a:	3437      	adds	r4, #55	; 0x37
 8003c8c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8003c90:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8003c92:	005c      	lsls	r4, r3, #1
 8003c94:	3401      	adds	r4, #1
 8003c96:	2500      	movs	r5, #0
 8003c98:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d206      	bcs.n	8003cb0 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8003ca2:	0f04      	lsrs	r4, r0, #28
 8003ca4:	2c09      	cmp	r4, #9
 8003ca6:	d8f0      	bhi.n	8003c8a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003ca8:	3430      	adds	r4, #48	; 0x30
 8003caa:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8003cae:	e7ef      	b.n	8003c90 <IntToUnicode+0x10>
  }
}
 8003cb0:	bc30      	pop	{r4, r5}
 8003cb2:	4770      	bx	lr
 8003cb4:	4770      	bx	lr
	...

08003cb8 <Get_SerialNum>:
{
 8003cb8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <Get_SerialNum+0x2c>)
 8003cbc:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003cc6:	18c0      	adds	r0, r0, r3
 8003cc8:	d100      	bne.n	8003ccc <Get_SerialNum+0x14>
}
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003ccc:	4d06      	ldr	r5, [pc, #24]	; (8003ce8 <Get_SerialNum+0x30>)
 8003cce:	2208      	movs	r2, #8
 8003cd0:	1ca9      	adds	r1, r5, #2
 8003cd2:	f7ff ffd5 	bl	8003c80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	f105 0112 	add.w	r1, r5, #18
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff ffcf 	bl	8003c80 <IntToUnicode>
}
 8003ce2:	e7f2      	b.n	8003cca <Get_SerialNum+0x12>
 8003ce4:	1fff7590 	.word	0x1fff7590
 8003ce8:	20000168 	.word	0x20000168

08003cec <USBD_CDC_SerialStrDescriptor>:
{
 8003cec:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003cee:	231a      	movs	r3, #26
 8003cf0:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8003cf2:	f7ff ffe1 	bl	8003cb8 <Get_SerialNum>
}
 8003cf6:	4801      	ldr	r0, [pc, #4]	; (8003cfc <USBD_CDC_SerialStrDescriptor+0x10>)
 8003cf8:	bd08      	pop	{r3, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000168 	.word	0x20000168

08003d00 <USBD_CDC_ProductStrDescriptor>:
{
 8003d00:	b508      	push	{r3, lr}
 8003d02:	460a      	mov	r2, r1
  if(speed == 0)
 8003d04:	b128      	cbz	r0, 8003d12 <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8003d06:	4905      	ldr	r1, [pc, #20]	; (8003d1c <USBD_CDC_ProductStrDescriptor+0x1c>)
 8003d08:	4805      	ldr	r0, [pc, #20]	; (8003d20 <USBD_CDC_ProductStrDescriptor+0x20>)
 8003d0a:	f7ff fefd 	bl	8003b08 <USBD_GetString>
}
 8003d0e:	4803      	ldr	r0, [pc, #12]	; (8003d1c <USBD_CDC_ProductStrDescriptor+0x1c>)
 8003d10:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8003d12:	4902      	ldr	r1, [pc, #8]	; (8003d1c <USBD_CDC_ProductStrDescriptor+0x1c>)
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <USBD_CDC_ProductStrDescriptor+0x20>)
 8003d16:	f7ff fef7 	bl	8003b08 <USBD_GetString>
 8003d1a:	e7f8      	b.n	8003d0e <USBD_CDC_ProductStrDescriptor+0xe>
 8003d1c:	20001698 	.word	0x20001698
 8003d20:	080040e4 	.word	0x080040e4

08003d24 <USBD_CDC_ManufacturerStrDescriptor>:
{
 8003d24:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003d26:	4c04      	ldr	r4, [pc, #16]	; (8003d38 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8003d28:	460a      	mov	r2, r1
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	4803      	ldr	r0, [pc, #12]	; (8003d3c <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 8003d2e:	f7ff feeb 	bl	8003b08 <USBD_GetString>
}
 8003d32:	4620      	mov	r0, r4
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	bf00      	nop
 8003d38:	20001698 	.word	0x20001698
 8003d3c:	080040d0 	.word	0x080040d0

08003d40 <USBD_CDC_ConfigStrDescriptor>:
{
 8003d40:	b508      	push	{r3, lr}
 8003d42:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8003d44:	b128      	cbz	r0, 8003d52 <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8003d46:	4905      	ldr	r1, [pc, #20]	; (8003d5c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8003d48:	4805      	ldr	r0, [pc, #20]	; (8003d60 <USBD_CDC_ConfigStrDescriptor+0x20>)
 8003d4a:	f7ff fedd 	bl	8003b08 <USBD_GetString>
}
 8003d4e:	4803      	ldr	r0, [pc, #12]	; (8003d5c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8003d50:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8003d52:	4902      	ldr	r1, [pc, #8]	; (8003d5c <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <USBD_CDC_ConfigStrDescriptor+0x20>)
 8003d56:	f7ff fed7 	bl	8003b08 <USBD_GetString>
 8003d5a:	e7f8      	b.n	8003d4e <USBD_CDC_ConfigStrDescriptor+0xe>
 8003d5c:	20001698 	.word	0x20001698
 8003d60:	080040b4 	.word	0x080040b4

08003d64 <USBD_CDC_InterfaceStrDescriptor>:
{
 8003d64:	b508      	push	{r3, lr}
 8003d66:	460a      	mov	r2, r1
  if(speed == 0)
 8003d68:	b128      	cbz	r0, 8003d76 <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8003d6a:	4905      	ldr	r1, [pc, #20]	; (8003d80 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8003d6c:	4805      	ldr	r0, [pc, #20]	; (8003d84 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8003d6e:	f7ff fecb 	bl	8003b08 <USBD_GetString>
}
 8003d72:	4803      	ldr	r0, [pc, #12]	; (8003d80 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8003d74:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8003d76:	4902      	ldr	r1, [pc, #8]	; (8003d80 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8003d7a:	f7ff fec5 	bl	8003b08 <USBD_GetString>
 8003d7e:	e7f8      	b.n	8003d72 <USBD_CDC_InterfaceStrDescriptor+0xe>
 8003d80:	20001698 	.word	0x20001698
 8003d84:	080040c0 	.word	0x080040c0

08003d88 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003d88:	b118      	cbz	r0, 8003d92 <USBD_Get_USB_Status+0xa>
 8003d8a:	2802      	cmp	r0, #2
 8003d8c:	d003      	beq.n	8003d96 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8003d8e:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003d90:	4770      	bx	lr
      usb_status = USBD_OK;
 8003d92:	2000      	movs	r0, #0
 8003d94:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8003d96:	2001      	movs	r0, #1
    break;
 8003d98:	4770      	bx	lr

08003d9a <SystemClockConfig_Resume>:
{
 8003d9a:	b508      	push	{r3, lr}
  SystemClock_Config();
 8003d9c:	f7fc fa64 	bl	8000268 <SystemClock_Config>
}
 8003da0:	bd08      	pop	{r3, pc}
	...

08003da4 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8003da4:	6802      	ldr	r2, [r0, #0]
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_PCD_MspInit+0x3c>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d000      	beq.n	8003dae <HAL_PCD_MspInit+0xa>
 8003dac:	4770      	bx	lr
{
 8003dae:	b500      	push	{lr}
 8003db0:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8003db2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003db6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003db8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	4611      	mov	r1, r2
 8003dcc:	2014      	movs	r0, #20
 8003dce:	f7fc fb59 	bl	8000484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8003dd2:	2014      	movs	r0, #20
 8003dd4:	f7fc fb8a 	bl	80004ec <HAL_NVIC_EnableIRQ>
}
 8003dd8:	b003      	add	sp, #12
 8003dda:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dde:	bf00      	nop
 8003de0:	40005c00 	.word	0x40005c00

08003de4 <HAL_PCD_SetupStageCallback>:
{
 8003de4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003de6:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8003dea:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8003dee:	f7ff fa2d 	bl	800324c <USBD_LL_SetupStage>
}
 8003df2:	bd08      	pop	{r3, pc}

08003df4 <HAL_PCD_DataOutStageCallback>:
{
 8003df4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003df6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003dfa:	00d3      	lsls	r3, r2, #3
 8003dfc:	4403      	add	r3, r0
 8003dfe:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003e02:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8003e06:	f7ff fa4d 	bl	80032a4 <USBD_LL_DataOutStage>
}
 8003e0a:	bd08      	pop	{r3, pc}

08003e0c <HAL_PCD_DataInStageCallback>:
{
 8003e0c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003e0e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003e12:	00d3      	lsls	r3, r2, #3
 8003e14:	4403      	add	r3, r0
 8003e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e18:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8003e1c:	f7ff fa7b 	bl	8003316 <USBD_LL_DataInStage>
}
 8003e20:	bd08      	pop	{r3, pc}

08003e22 <HAL_PCD_SOFCallback>:
{
 8003e22:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003e24:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8003e28:	f7ff fb10 	bl	800344c <USBD_LL_SOF>
}
 8003e2c:	bd08      	pop	{r3, pc}

08003e2e <HAL_PCD_ResetCallback>:
{
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003e32:	6883      	ldr	r3, [r0, #8]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d001      	beq.n	8003e3c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003e38:	f7fc fa5e 	bl	80002f8 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8003e42:	f7ff faec 	bl	800341e <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003e46:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8003e4a:	f7ff fabf 	bl	80033cc <USBD_LL_Reset>
}
 8003e4e:	bd10      	pop	{r4, pc}

08003e50 <HAL_PCD_SuspendCallback>:
{
 8003e50:	b510      	push	{r4, lr}
 8003e52:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003e54:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8003e58:	f7ff fae4 	bl	8003424 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8003e5c:	69a3      	ldr	r3, [r4, #24]
 8003e5e:	b123      	cbz	r3, 8003e6a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003e60:	4a02      	ldr	r2, [pc, #8]	; (8003e6c <HAL_PCD_SuspendCallback+0x1c>)
 8003e62:	6913      	ldr	r3, [r2, #16]
 8003e64:	f043 0306 	orr.w	r3, r3, #6
 8003e68:	6113      	str	r3, [r2, #16]
}
 8003e6a:	bd10      	pop	{r4, pc}
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <HAL_PCD_ResumeCallback>:
{
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8003e74:	6983      	ldr	r3, [r0, #24]
 8003e76:	b923      	cbnz	r3, 8003e82 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003e78:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8003e7c:	f7ff fadb 	bl	8003436 <USBD_LL_Resume>
}
 8003e80:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003e82:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_PCD_ResumeCallback+0x24>)
 8003e84:	6913      	ldr	r3, [r2, #16]
 8003e86:	f023 0306 	bic.w	r3, r3, #6
 8003e8a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8003e8c:	f7ff ff85 	bl	8003d9a <SystemClockConfig_Resume>
 8003e90:	e7f2      	b.n	8003e78 <HAL_PCD_ResumeCallback+0x8>
 8003e92:	bf00      	nop
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <USBD_LL_Init>:
{
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003e9c:	481e      	ldr	r0, [pc, #120]	; (8003f18 <USBD_LL_Init+0x80>)
 8003e9e:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8003ea2:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <USBD_LL_Init+0x84>)
 8003ea8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003eb2:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003eb8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003eba:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003ebc:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003ebe:	f7fc fc93 	bl	80007e8 <HAL_PCD_Init>
 8003ec2:	bb30      	cbnz	r0, 8003f12 <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003ec4:	2318      	movs	r3, #24
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	4611      	mov	r1, r2
 8003eca:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8003ece:	f7fd fa8c 	bl	80013ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003ed2:	2358      	movs	r3, #88	; 0x58
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8003edc:	f7fd fa85 	bl	80013ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003ee0:	23c0      	movs	r3, #192	; 0xc0
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2181      	movs	r1, #129	; 0x81
 8003ee6:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8003eea:	f7fd fa7e 	bl	80013ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003eee:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8003efa:	f7fd fa76 	bl	80013ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f02:	2200      	movs	r2, #0
 8003f04:	2182      	movs	r1, #130	; 0x82
 8003f06:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8003f0a:	f7fd fa6e 	bl	80013ea <HAL_PCDEx_PMAConfig>
}
 8003f0e:	2000      	movs	r0, #0
 8003f10:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003f12:	f7fc f9f1 	bl	80002f8 <Error_Handler>
 8003f16:	e7d5      	b.n	8003ec4 <USBD_LL_Init+0x2c>
 8003f18:	20001898 	.word	0x20001898
 8003f1c:	40005c00 	.word	0x40005c00

08003f20 <USBD_LL_Start>:
{
 8003f20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003f22:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003f26:	f7fc fccc 	bl	80008c2 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003f2a:	f7ff ff2d 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003f2e:	bd08      	pop	{r3, pc}

08003f30 <USBD_LL_OpenEP>:
{
 8003f30:	b510      	push	{r4, lr}
 8003f32:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003f34:	4613      	mov	r3, r2
 8003f36:	4622      	mov	r2, r4
 8003f38:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003f3c:	f7fd f926 	bl	800118c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003f40:	f7ff ff22 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003f44:	bd10      	pop	{r4, pc}

08003f46 <USBD_LL_CloseEP>:
{
 8003f46:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003f48:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003f4c:	f7fd f958 	bl	8001200 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003f50:	f7ff ff1a 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003f54:	bd08      	pop	{r3, pc}

08003f56 <USBD_LL_StallEP>:
{
 8003f56:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003f58:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003f5c:	f7fd f9d0 	bl	8001300 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003f60:	f7ff ff12 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003f64:	bd08      	pop	{r3, pc}

08003f66 <USBD_LL_ClearStallEP>:
{
 8003f66:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003f68:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003f6c:	f7fd fa03 	bl	8001376 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003f70:	f7ff ff0a 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003f74:	bd08      	pop	{r3, pc}

08003f76 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003f76:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8003f7a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003f7e:	d108      	bne.n	8003f92 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003f80:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003f84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 8003f90:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003f92:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003f96:	3101      	adds	r1, #1
 8003f98:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003f9c:	00ca      	lsls	r2, r1, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	7898      	ldrb	r0, [r3, #2]
 8003fa2:	4770      	bx	lr

08003fa4 <USBD_LL_SetUSBAddress>:
{
 8003fa4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003fa6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003faa:	f7fc fff2 	bl	8000f92 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003fae:	f7ff feeb 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003fb2:	bd08      	pop	{r3, pc}

08003fb4 <USBD_LL_Transmit>:
{
 8003fb4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003fb6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003fba:	f7fd f97c 	bl	80012b6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003fbe:	f7ff fee3 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003fc2:	bd08      	pop	{r3, pc}

08003fc4 <USBD_LL_PrepareReceive>:
{
 8003fc4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003fc6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003fca:	f7fd f94a 	bl	8001262 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003fce:	f7ff fedb 	bl	8003d88 <USBD_Get_USB_Status>
}
 8003fd2:	bd08      	pop	{r3, pc}

08003fd4 <USBD_LL_GetRxDataSize>:
{
 8003fd4:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003fd6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003fda:	f7fd f963 	bl	80012a4 <HAL_PCD_EP_GetRxCount>
}
 8003fde:	bd08      	pop	{r3, pc}

08003fe0 <HAL_PCDEx_LPM_Callback>:
{
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4604      	mov	r4, r0
  switch (msg)
 8003fe4:	b111      	cbz	r1, 8003fec <HAL_PCDEx_LPM_Callback+0xc>
 8003fe6:	2901      	cmp	r1, #1
 8003fe8:	d00f      	beq.n	800400a <HAL_PCDEx_LPM_Callback+0x2a>
}
 8003fea:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8003fec:	6983      	ldr	r3, [r0, #24]
 8003fee:	b923      	cbnz	r3, 8003ffa <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 8003ff0:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8003ff4:	f7ff fa1f 	bl	8003436 <USBD_LL_Resume>
    break;
 8003ff8:	e7f7      	b.n	8003fea <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 8003ffa:	f7ff fece 	bl	8003d9a <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <HAL_PCDEx_LPM_Callback+0x44>)
 8004000:	6913      	ldr	r3, [r2, #16]
 8004002:	f023 0306 	bic.w	r3, r3, #6
 8004006:	6113      	str	r3, [r2, #16]
 8004008:	e7f2      	b.n	8003ff0 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800400a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800400e:	f7ff fa09 	bl	8003424 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8004012:	69a3      	ldr	r3, [r4, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0e8      	beq.n	8003fea <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004018:	4a02      	ldr	r2, [pc, #8]	; (8004024 <HAL_PCDEx_LPM_Callback+0x44>)
 800401a:	6913      	ldr	r3, [r2, #16]
 800401c:	f043 0306 	orr.w	r3, r3, #6
 8004020:	6113      	str	r3, [r2, #16]
}
 8004022:	e7e2      	b.n	8003fea <HAL_PCDEx_LPM_Callback+0xa>
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <USBD_static_malloc>:
}
 8004028:	4800      	ldr	r0, [pc, #0]	; (800402c <USBD_static_malloc+0x4>)
 800402a:	4770      	bx	lr
 800402c:	200001a4 	.word	0x200001a4

08004030 <USBD_static_free>:
}
 8004030:	4770      	bx	lr
	...

08004034 <__libc_init_array>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4e0d      	ldr	r6, [pc, #52]	; (800406c <__libc_init_array+0x38>)
 8004038:	4c0d      	ldr	r4, [pc, #52]	; (8004070 <__libc_init_array+0x3c>)
 800403a:	1ba4      	subs	r4, r4, r6
 800403c:	10a4      	asrs	r4, r4, #2
 800403e:	2500      	movs	r5, #0
 8004040:	42a5      	cmp	r5, r4
 8004042:	d109      	bne.n	8004058 <__libc_init_array+0x24>
 8004044:	4e0b      	ldr	r6, [pc, #44]	; (8004074 <__libc_init_array+0x40>)
 8004046:	4c0c      	ldr	r4, [pc, #48]	; (8004078 <__libc_init_array+0x44>)
 8004048:	f000 f820 	bl	800408c <_init>
 800404c:	1ba4      	subs	r4, r4, r6
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	2500      	movs	r5, #0
 8004052:	42a5      	cmp	r5, r4
 8004054:	d105      	bne.n	8004062 <__libc_init_array+0x2e>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405c:	4798      	blx	r3
 800405e:	3501      	adds	r5, #1
 8004060:	e7ee      	b.n	8004040 <__libc_init_array+0xc>
 8004062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004066:	4798      	blx	r3
 8004068:	3501      	adds	r5, #1
 800406a:	e7f2      	b.n	8004052 <__libc_init_array+0x1e>
 800406c:	080040fc 	.word	0x080040fc
 8004070:	080040fc 	.word	0x080040fc
 8004074:	080040fc 	.word	0x080040fc
 8004078:	08004100 	.word	0x08004100

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <_init>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr

08004098 <_fini>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	bf00      	nop
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr
